sil_stage canonical

import Builtin
import Swift
import SwiftShims

// static CommandLine._argc
sil_global [fragile] @_TZvOs11CommandLine5_argcVs5Int32 : $Int32

// globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4
sil_global private_external [fragile] @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4 : $Builtin.Word

// static CommandLine._unsafeArgv
sil_global [fragile] @_TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___ : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>

// _emptyStringStorage
sil_global [fragile] @_Tvs19_emptyStringStorageVs6UInt32 : $UInt32

// _swiftEmptyArrayStorage
sil_global [fragile] @_swiftEmptyArrayStorage : $_SwiftEmptyArrayStorage

sil_scope 1 {  parent @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 }

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
// %0                                             // user: %3
// %1                                             // user: %9
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = global_addr @_TZvOs11CommandLine5_argcVs5Int32 : $*Int32, scope 1 // user: %3
  store %0 to %2 : $*Int32, scope 1               // id: %3
  %4 = global_addr @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4 : $*Builtin.Word, scope 1 // user: %5
  %5 = address_to_pointer %4 : $*Builtin.Word to $Builtin.RawPointer, scope 1 // user: %7
  // function_ref globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4
  %6 = function_ref @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4 : $@convention(thin) () -> (), scope 1 // user: %7
  %7 = builtin "once"(%5 : $Builtin.RawPointer, %6 : $@convention(thin) () -> ()) : $(), scope 1
  %8 = global_addr @_TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___ : $*UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>, scope 1 // user: %9
  store %1 to %8 : $*UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>, scope 1 // id: %9
  %10 = integer_literal $Builtin.Int32, 0, scope 1 // user: %11
  %11 = struct $Int32 (%10 : $Builtin.Int32), scope 1 // user: %12
  return %11 : $Int32, scope 1                    // id: %12
}

sil_scope 2 {  parent @_TZFO5throw7MyErroroi2eefTS0_S0__Sb : $@convention(method) (MyError, MyError, @thin MyError.Type) -> Bool }
sil_scope 3 {  parent 2 }

// static MyError.== infix(MyError, MyError) -> Bool
sil hidden @_TZFO5throw7MyErroroi2eefTS0_S0__Sb : $@convention(method) (MyError, MyError, @thin MyError.Type) -> Bool {
bb0(%0 : $MyError, %1 : $MyError, %2 : $@thin MyError.Type):
  %3 = integer_literal $Builtin.Int1, -1, scope 3 // user: %4
  %4 = struct $Bool (%3 : $Builtin.Int1), scope 3 // user: %5
  return %4 : $Bool, scope 3                      // id: %5
}

sil_scope 4 {  parent @_TFO5throw7MyErrorg9hashValueSi : $@convention(method) (MyError) -> Int }
sil_scope 5 {  parent 4 }
sil_scope 6 {  parent 5 }
sil_scope 7 {  parent @_TFSig9hashValueSi : $@convention(method) (Int) -> Int }
sil_scope 8 {  parent 5 }
sil_scope 9 {  parent 7 inlined_at 8 }

// MyError.hashValue.getter
sil hidden @_TFO5throw7MyErrorg9hashValueSi : $@convention(method) (MyError) -> Int {
bb0(%0 : $MyError):
  %1 = integer_literal $Builtin.Int64, 0, scope 6 // user: %2
  %2 = struct $Int (%1 : $Builtin.Int64), scope 6 // users: %4, %3
  debug_value %2 : $Int, scope 9                  // id: %3
  return %2 : $Int, scope 5                       // id: %4
}

sil_scope 10 {  parent @_TFO5throw7MyErrorg5_codeSi : $@convention(method) (MyError) -> Int }
sil_scope 11 {  parent 10 }
sil_scope 12 {  parent 11 }

// MyError._code.getter
sil hidden @_TFO5throw7MyErrorg5_codeSi : $@convention(method) (MyError) -> Int {
bb0(%0 : $MyError):
  %1 = integer_literal $Builtin.Int64, 0, scope 12 // user: %2
  %2 = struct $Int (%1 : $Builtin.Int64), scope 12 // user: %3
  return %2 : $Int, scope 11                      // id: %3
}

sil_scope 13 {  parent @_TTWO5throw7MyErrors9EquatableS_ZFS1_oi2eefTxx_Sb : $@convention(witness_method) (@in MyError, @in MyError, @thick MyError.Type) -> Bool }
sil_scope 14 {  parent 13 }
sil_scope 15 {  parent 3 inlined_at 14 }

// protocol witness for static Equatable.== infix(A, A) -> Bool in conformance MyError
sil [transparent] [thunk] @_TTWO5throw7MyErrors9EquatableS_ZFS1_oi2eefTxx_Sb : $@convention(witness_method) (@in MyError, @in MyError, @thick MyError.Type) -> Bool {
bb0(%0 : $*MyError, %1 : $*MyError, %2 : $@thick MyError.Type):
  %3 = integer_literal $Builtin.Int1, -1, scope 15 // user: %4
  %4 = struct $Bool (%3 : $Builtin.Int1), scope 15 // user: %5
  return %4 : $Bool, scope 13                     // id: %5
}

sil_scope 16 {  parent @_TTWO5throw7MyErrors8HashableS_FS1_g9hashValueSi : $@convention(witness_method) (@in_guaranteed MyError) -> Int }
sil_scope 17 {  parent 16 }
sil_scope 18 {  parent 6 inlined_at 17 }
sil_scope 19 {  parent 9 inlined_at 17 }

// protocol witness for Hashable.hashValue.getter in conformance MyError
sil [transparent] [thunk] @_TTWO5throw7MyErrors8HashableS_FS1_g9hashValueSi : $@convention(witness_method) (@in_guaranteed MyError) -> Int {
bb0(%0 : $*MyError):
  %1 = integer_literal $Builtin.Int64, 0, scope 18 // user: %2
  %2 = struct $Int (%1 : $Builtin.Int64), scope 18 // users: %4, %3
  debug_value %2 : $Int, scope 19                 // id: %3
  return %2 : $Int, scope 16                      // id: %4
}

sil_scope 20 {  parent @_TTWO5throw7MyErrors5ErrorS_FS1_g7_domainSS : $@convention(witness_method) (@in_guaranteed MyError) -> @owned String }
sil_scope 21 {  parent @_TTSg5O5throw7MyErrorS0_s5ErrorS____TFEsPs5Errorg7_domainSS : $@convention(method) (@in_guaranteed MyError) -> @owned String }
sil_scope 22 {  parent 20 }
sil_scope 23 {  parent 21 inlined_at 22 }
sil_scope 24 {  parent @_TTSg5MO5throw7MyError___TFSSCurfT10reflectingx_SS : $@convention(method) (@thick MyError.Type, @thin String.Type) -> @owned String }
sil_scope 25 {  parent 21 }
sil_scope 26 {  parent 24 inlined_at 25 }
sil_scope 27 {  parent 26 inlined_at 22 }

// protocol witness for Error._domain.getter in conformance MyError
sil [transparent] [thunk] @_TTWO5throw7MyErrors5ErrorS_FS1_g7_domainSS : $@convention(witness_method) (@in_guaranteed MyError) -> @owned String {
// %0                                             // user: %2
bb0(%0 : $*MyError):
  %1 = alloc_stack $MyError, scope 20             // users: %5, %4, %3, %23
  %2 = load %0 : $*MyError, scope 20              // user: %3
  store %2 to %1 : $*MyError, scope 20            // id: %3
  debug_value_addr %1 : $*MyError, scope 23       // id: %4
  %5 = value_metatype $@thick MyError.Type, %1 : $*MyError, scope 23 // users: %20, %8, %6
  debug_value %5 : $@thick MyError.Type, scope 27 // id: %6
  %7 = alloc_stack $String, scope 27              // users: %22, %21, %20, %18
  debug_value %5 : $@thick MyError.Type, scope 27 // id: %8
  %9 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 27 // user: %16
  %10 = global_addr @_Tvs19_emptyStringStorageVs6UInt32 : $*UInt32, scope 27 // user: %11
  %11 = address_to_pointer %10 : $*UInt32 to $Builtin.RawPointer, scope 27 // user: %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer), scope 27 // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %12 : $UnsafeMutableRawPointer, scope 27 // user: %16
  %14 = integer_literal $Builtin.Int64, 0, scope 27 // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64), scope 27 // user: %16
  %16 = struct $_StringCore (%13 : $Optional<UnsafeMutableRawPointer>, %15 : $UInt, %9 : $Optional<AnyObject>), scope 27 // user: %17
  %17 = struct $String (%16 : $_StringCore), scope 27 // user: %18
  store %17 to %7 : $*String, scope 27            // id: %18
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %19 = function_ref @_TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@thick MyError.Type, @inout String) -> (), scope 27 // user: %20
  %20 = apply %19(%5, %7) : $@convention(thin) (@thick MyError.Type, @inout String) -> (), scope 27
  %21 = load %7 : $*String, scope 27              // user: %24
  dealloc_stack %7 : $*String, scope 27           // id: %22
  dealloc_stack %1 : $*MyError, scope 20          // id: %23
  return %21 : $String, scope 20                  // id: %24
}

sil_scope 28 {  parent @_TTWO5throw7MyErrors5ErrorS_FS1_g5_codeSi : $@convention(witness_method) (@in_guaranteed MyError) -> Int }
sil_scope 29 {  parent 28 }
sil_scope 30 {  parent 12 inlined_at 29 }

// protocol witness for Error._code.getter in conformance MyError
sil [transparent] [thunk] @_TTWO5throw7MyErrors5ErrorS_FS1_g5_codeSi : $@convention(witness_method) (@in_guaranteed MyError) -> Int {
bb0(%0 : $*MyError):
  %1 = integer_literal $Builtin.Int64, 0, scope 30 // user: %2
  %2 = struct $Int (%1 : $Builtin.Int64), scope 30 // user: %3
  return %2 : $Int, scope 28                      // id: %3
}

sil_scope 31 {  parent @_TTWO5throw7MyErrors5ErrorS_FS1_g9_userInfoGSqP__ : $@convention(witness_method) (@in_guaranteed MyError) -> @out Optional<Any> }
sil_scope 32 {  parent @_TTSg5O5throw7MyErrorS0_s5ErrorS____TFEsPs5Errorg9_userInfoGSqP__ : $@convention(method) (@in_guaranteed MyError) -> @out Optional<Any> }
sil_scope 33 {  parent 31 }
sil_scope 34 {  parent 32 inlined_at 33 }

// protocol witness for Error._userInfo.getter in conformance MyError
sil [transparent] [thunk] @_TTWO5throw7MyErrors5ErrorS_FS1_g9_userInfoGSqP__ : $@convention(witness_method) (@in_guaranteed MyError) -> @out Optional<Any> {
// %0                                             // users: %17, %15, %10
// %1                                             // user: %2
bb0(%0 : $*Optional<Any>, %1 : $*MyError):
  %2 = load %1 : $*MyError, scope 31              // users: %7, %3
  debug_value %2 : $MyError, scope 34             // id: %3
  // function_ref swift_stdlib_getErrorDefaultUserInfo
  %4 = function_ref @swift_stdlib_getErrorDefaultUserInfo : $@convention(thin) (@owned Error) -> @owned Optional<AnyObject>, scope 34 // user: %8
  %5 = alloc_existential_box $Error, $MyError, scope 34 // users: %8, %6
  %6 = project_existential_box $MyError in %5 : $Error, scope 34 // user: %7
  store %2 to %6 : $*MyError, scope 34            // id: %7
  %8 = apply %4(%5) : $@convention(thin) (@owned Error) -> @owned Optional<AnyObject>, scope 34 // users: %9, %11
  switch_enum %8 : $Optional<AnyObject>, case #Optional.some!enumelt.1: bb1, case #Optional.none!enumelt: bb2, scope 34 // id: %9

bb1:                                              // Preds: bb0
  %10 = init_enum_data_addr %0 : $*Optional<Any>, #Optional.some!enumelt.1, scope 34 // user: %13
  %11 = unchecked_enum_data %8 : $Optional<AnyObject>, #Optional.some!enumelt.1, scope 34 // user: %12
  %12 = open_existential_ref %11 : $AnyObject to $@opened("156C1F30-A0C9-11E6-8491-A45E60F21093") AnyObject, scope 34 // users: %14, %13
  %13 = init_existential_addr %10 : $*Any, $@opened("156C1F30-A0C9-11E6-8491-A45E60F21093") AnyObject, scope 34 // user: %14
  store %12 to %13 : $*@opened("156C1F30-A0C9-11E6-8491-A45E60F21093") AnyObject, scope 34 // id: %14
  inject_enum_addr %0 : $*Optional<Any>, #Optional.some!enumelt.1, scope 34 // id: %15
  br bb3, scope 34                                // id: %16

bb2:                                              // Preds: bb0
  inject_enum_addr %0 : $*Optional<Any>, #Optional.none!enumelt, scope 34 // id: %17
  br bb3, scope 34                                // id: %18

bb3:                                              // Preds: bb2 bb1
  %19 = tuple (), scope 31                        // user: %20
  return %19 : $(), scope 31                      // id: %20
}

sil_scope 35 {  parent @_TTSg5O5throw7MyErrorS0_s5ErrorS____TFEsPs5Error19_getEmbeddedNSErrorfT_GSqPs9AnyObject__ : $@convention(method) (@in_guaranteed MyError) -> @owned Optional<AnyObject> }
sil_scope 36 {  parent @_TTWO5throw7MyErrors5ErrorS_FS1_19_getEmbeddedNSErrorfT_GSqPs9AnyObject__ : $@convention(witness_method) (@in_guaranteed MyError) -> @owned Optional<AnyObject> }
sil_scope 37 {  parent 36 }
sil_scope 38 {  parent 35 inlined_at 37 }

// protocol witness for Error._getEmbeddedNSError() -> AnyObject? in conformance MyError
sil [transparent] [thunk] @_TTWO5throw7MyErrors5ErrorS_FS1_19_getEmbeddedNSErrorfT_GSqPs9AnyObject__ : $@convention(witness_method) (@in_guaranteed MyError) -> @owned Optional<AnyObject> {
bb0(%0 : $*MyError):
  %1 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 38 // user: %2
  return %1 : $Optional<AnyObject>, scope 36      // id: %2
}

sil_scope 39 {  parent @_TTWO5throw7MyErrors9_HashableS_FS1_14_toAnyHashablefT_Vs11AnyHashable : $@convention(witness_method) (@in_guaranteed MyError) -> @out AnyHashable }
sil_scope 40 {  parent @_TTSg5O5throw7MyErrorS0_s8HashableS____TFEsPs8Hashable14_toAnyHashablefT_Vs11AnyHashable : $@convention(method) (@in_guaranteed MyError) -> @out AnyHashable }
sil_scope 41 {  parent 39 }
sil_scope 42 {  parent 40 inlined_at 41 }

// protocol witness for _Hashable._toAnyHashable() -> AnyHashable in conformance MyError
sil [transparent] [thunk] @_TTWO5throw7MyErrors9_HashableS_FS1_14_toAnyHashablefT_Vs11AnyHashable : $@convention(witness_method) (@in_guaranteed MyError) -> @out AnyHashable {
// %0                                             // user: %6
// %1                                             // user: %2
bb0(%0 : $*AnyHashable, %1 : $*MyError):
  %2 = load %1 : $*MyError, scope 39              // users: %6, %3
  debug_value %2 : $MyError, scope 42             // id: %3
  %4 = metatype $@thin AnyHashable.Type, scope 42 // user: %6
  // function_ref specialized AnyHashable.init<A where ...> (A) -> AnyHashable
  %5 = function_ref @_TTSg5O5throw7MyErrorS0_s8HashableS____TFVs11AnyHashableCuRxs8HashablerfxS_ : $@convention(method) (MyError, @thin AnyHashable.Type) -> @out AnyHashable, scope 42 // user: %6
  %6 = apply %5(%0, %2, %4) : $@convention(method) (MyError, @thin AnyHashable.Type) -> @out AnyHashable, scope 42
  %7 = tuple (), scope 39                         // user: %8
  return %7 : $(), scope 39                       // id: %8
}

sil_scope 43 { loc "./throw.swift":15:6 parent @_TF5throw7throwMeFzT11shouldThrowSb_Sb : $@convention(thin) (Bool) -> (Bool, @error Error) }
sil_scope 44 { loc "./throw.swift":20:1 parent 43 }
sil_scope 45 { loc "./throw.swift":18:5 parent 44 }
sil_scope 46 { loc "./throw.swift":18:5 parent 45 }

// throwMe(shouldThrow : Bool) throws -> Bool
sil hidden @_TF5throw7throwMeFzT11shouldThrowSb_Sb : $@convention(thin) (Bool) -> (Bool, @error Error) {
// %0                                             // users: %2, %1
bb0(%0 : $Bool):
  debug_value %0 : $Bool, let, name "shouldThrow", argno 1, loc "./throw.swift":15:14, scope 43 // id: %1
  %2 = struct_extract %0 : $Bool, #Bool._value, loc "./throw.swift":16:8, scope 45 // user: %3
  cond_br %2, bb1, bb2, loc "./throw.swift":16:8, scope 45 // id: %3

bb1:                                              // Preds: bb0
  %4 = alloc_existential_box $Error, $MyError, loc "./throw.swift":17:23, scope 46 // users: %8, %5
  %5 = project_existential_box $MyError in %4 : $Error, loc "./throw.swift":17:23, scope 46 // user: %7
  %6 = enum $MyError, #MyError.SampleError!enumelt, loc "./throw.swift":17:23, scope 46 // user: %7
  store %6 to %5 : $*MyError, loc "./throw.swift":17:23, scope 46 // id: %7
  throw %4 : $Error, loc "./throw.swift":17:9, scope 44 // id: %8

bb2:                                              // Preds: bb0
  %9 = integer_literal $Builtin.Int1, -1, loc "./throw.swift":19:12, scope 44 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1), loc "./throw.swift":19:12, scope 44 // user: %11
  return %10 : $Bool, loc "./throw.swift":19:5, scope 44 // id: %11
}

sil_scope 47 {  parent @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4 : $@convention(thin) () -> () }

// globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4
sil private_external [fragile] @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4 : $@convention(thin) () -> () {
bb0:
  alloc_global @_TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___, scope 47 // id: %0
  %1 = global_addr @_TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___ : $*UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>, scope 47 // user: %7
  // function_ref _swift_stdlib_getUnsafeArgvArgc
  %2 = function_ref @_swift_stdlib_getUnsafeArgvArgc : $@convention(c) (UnsafeMutablePointer<Int32>) -> UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>, scope 47 // user: %6
  %3 = global_addr @_TZvOs11CommandLine5_argcVs5Int32 : $*Int32, scope 47 // user: %4
  %4 = address_to_pointer %3 : $*Int32 to $Builtin.RawPointer, scope 47 // user: %5
  %5 = struct $UnsafeMutablePointer<Int32> (%4 : $Builtin.RawPointer), scope 47 // user: %6
  %6 = apply %2(%5) : $@convention(c) (UnsafeMutablePointer<Int32>) -> UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>, scope 47 // user: %7
  store %6 to %1 : $*UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>, scope 47 // id: %7
  %8 = tuple (), scope 47                         // user: %9
  return %8 : $(), scope 47                       // id: %9
}


// _swift_stdlib_getUnsafeArgvArgc
sil [clang _swift_stdlib_getUnsafeArgvArgc] @_swift_stdlib_getUnsafeArgvArgc : $@convention(c) (UnsafeMutablePointer<Int32>) -> UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>

sil_scope 48 {  parent @_TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@thick MyError.Type, @inout String) -> () }
sil_scope 49 {  parent @_TTSg5SSSSs16TextOutputStreams___TFSS5writeuRxs16TextOutputStreamrfT2toRx_T_ : $@convention(method) (@inout String, @guaranteed String) -> () }
sil_scope 50 {  parent 48 }
sil_scope 51 {  parent 49 inlined_at 50 }
sil_scope 52 {  parent @_TTWSSs16TextOutputStreamsFS_5writefSST_ : $@convention(witness_method) (@owned String, @inout String) -> () }
sil_scope 53 {  parent 49 }
sil_scope 54 {  parent 52 inlined_at 53 }
sil_scope 55 {  parent 54 inlined_at 50 }
sil_scope 56 {  parent 48 }
sil_scope 57 {  parent 49 inlined_at 56 }
sil_scope 58 {  parent 54 inlined_at 56 }
sil_scope 59 {  parent @_TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@thick MyError.Type, @owned Mirror, @inout String, Bool) -> () }
sil_scope 60 {  parent 48 }
sil_scope 61 {  parent 59 inlined_at 60 }

// specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
sil shared [noinline] @_TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@thick MyError.Type, @inout String) -> () {
// %0                                             // users: %157, %66, %123, %145, %7, %4, %2
// %1                                             // users: %157, %100, %89, %87, %85, %83, %41, %30, %28, %26, %24, %136, %3
bb0(%0 : $@thick MyError.Type, %1 : $*String):
  debug_value %0 : $@thick MyError.Type, scope 48 // id: %2
  debug_value_addr %1 : $*String, scope 48        // id: %3
  debug_value %0 : $@thick MyError.Type, scope 48 // id: %4
  %5 = alloc_stack $CustomDebugStringConvertible, scope 48 // users: %63, %57, %56, %18, %15
  %6 = alloc_stack $@thick MyError.Type, scope 48 // users: %7, %10, %62, %17
  store %0 to %6 : $*@thick MyError.Type, scope 48 // id: %7
  %8 = alloc_stack $Optional<CustomDebugStringConvertible>, scope 48 // users: %13, %166, %61, %16, %14, %11, %9
  %9 = init_enum_data_addr %8 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 48 // user: %10
  checked_cast_addr_br take_always MyError.Type in %6 : $*@thick MyError.Type to CustomDebugStringConvertible in %9 : $*CustomDebugStringConvertible, bb1, bb22, scope 48 // id: %10

bb1:                                              // Preds: bb0
  inject_enum_addr %8 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 48 // id: %11
  br bb2, scope 48                                // id: %12

bb2:                                              // Preds: bb22 bb1
  switch_enum_addr %8 : $*Optional<CustomDebugStringConvertible>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb8, scope 48 // id: %13

bb3:                                              // Preds: bb2
  %14 = unchecked_take_enum_data_addr %8 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 48 // user: %15
  copy_addr [take] %14 to [initialization] %5 : $*CustomDebugStringConvertible, scope 48 // id: %15
  dealloc_stack %8 : $*Optional<CustomDebugStringConvertible>, scope 48 // id: %16
  dealloc_stack %6 : $*@thick MyError.Type, scope 48 // id: %17
  %18 = open_existential_addr %5 : $*CustomDebugStringConvertible to $*@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 48 // users: %22, %21, %20, %19
  %19 = alloc_stack $@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 48 // users: %55, %23, %22, %20
  copy_addr %18 to [initialization] %19 : $*@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 48 // id: %20
  %21 = witness_method $@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, #CustomDebugStringConvertible.debugDescription!getter.1, %18 : $*@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomDebugStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 48 // user: %22
  %22 = apply %21<@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible>(%19) : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomDebugStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 48 // users: %52, %53, %50, %41, %29, %27, %44, %25
  destroy_addr %19 : $*@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 48 // id: %23
  debug_value_addr %1 : $*String, scope 51        // id: %24
  debug_value %22 : $String, scope 51             // id: %25
  debug_value_addr %1 : $*String, scope 55        // id: %26
  debug_value %22 : $String, scope 55             // id: %27
  debug_value_addr %1 : $*String, scope 55        // id: %28
  debug_value %22 : $String, scope 55             // id: %29
  %30 = struct_element_addr %1 : $*String, #String._core, scope 55 // users: %51, %39, %31
  %31 = struct_element_addr %30 : $*_StringCore, #_StringCore._countAndFlags, scope 55 // user: %32
  %32 = struct_element_addr %31 : $*UInt, #UInt._value, scope 55 // user: %33
  %33 = load %32 : $*Builtin.Int64, scope 55      // user: %35
  %34 = integer_literal $Builtin.Int64, 4611686018427387903, scope 55 // user: %35
  %35 = builtin "and_Int64"(%33 : $Builtin.Int64, %34 : $Builtin.Int64) : $Builtin.Int64, scope 55 // user: %37
  %36 = integer_literal $Builtin.Int64, 0, scope 55 // user: %37
  %37 = builtin "cmp_eq_Int64"(%35 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1, scope 55 // user: %38
  cond_br %37, bb4, bb5, scope 55                 // id: %38

bb4:                                              // Preds: bb3
  %39 = struct_element_addr %30 : $*_StringCore, #_StringCore._owner, scope 55 // user: %40
  %40 = load %39 : $*Optional<AnyObject>, scope 55 // user: %42
  store %22 to %1 : $*String, scope 55            // id: %41
  release_value %40 : $Optional<AnyObject>, scope 48 // id: %42
  br bb6, scope 55                                // id: %43

bb5:                                              // Preds: bb3
  %44 = struct_extract %22 : $String, #String._core, scope 51 // users: %48, %47, %45
  %45 = struct_extract %44 : $_StringCore, #_StringCore._owner, scope 51 // user: %51
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %46 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 55 // user: %51
  %47 = struct_extract %44 : $_StringCore, #_StringCore._countAndFlags, scope 55 // user: %49
  %48 = struct_extract %44 : $_StringCore, #_StringCore._baseAddress, scope 55 // user: %51
  %49 = struct_extract %47 : $UInt, #UInt._value, scope 55 // user: %51
  retain_value %22 : $String, scope 48            // id: %50
  %51 = apply %46(%48, %49, %45, %30) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 55
  release_value %22 : $String, scope 48           // id: %52
  release_value %22 : $String, scope 48           // id: %53
  br bb6, scope 55                                // id: %54

bb6:                                              // Preds: bb5 bb4
  dealloc_stack %19 : $*@opened("155FC780-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 48 // id: %55
  destroy_addr %5 : $*CustomDebugStringConvertible, scope 48 // id: %56
  dealloc_stack %5 : $*CustomDebugStringConvertible, scope 48 // id: %57
  br bb7, scope 48                                // id: %58

bb7:                                              // Preds: bb19 bb18 bb14 bb6
  %59 = tuple (), scope 48                        // user: %60
  return %59 : $(), scope 48                      // id: %60

bb8:                                              // Preds: bb2
  dealloc_stack %8 : $*Optional<CustomDebugStringConvertible>, scope 48 // id: %61
  dealloc_stack %6 : $*@thick MyError.Type, scope 48 // id: %62
  dealloc_stack %5 : $*CustomDebugStringConvertible, scope 48 // id: %63
  %64 = alloc_stack $CustomStringConvertible, scope 48 // users: %120, %116, %115, %77, %74
  %65 = alloc_stack $@thick MyError.Type, scope 48 // users: %66, %69, %119, %76
  store %0 to %65 : $*@thick MyError.Type, scope 48 // id: %66
  %67 = alloc_stack $Optional<CustomStringConvertible>, scope 48 // users: %72, %164, %118, %75, %73, %70, %68
  %68 = init_enum_data_addr %67 : $*Optional<CustomStringConvertible>, #Optional.some!enumelt.1, scope 48 // user: %69
  checked_cast_addr_br take_always MyError.Type in %65 : $*@thick MyError.Type to CustomStringConvertible in %68 : $*CustomStringConvertible, bb9, bb21, scope 48 // id: %69

bb9:                                              // Preds: bb8
  inject_enum_addr %67 : $*Optional<CustomStringConvertible>, #Optional.some!enumelt.1, scope 48 // id: %70
  br bb10, scope 48                               // id: %71

bb10:                                             // Preds: bb21 bb9
  switch_enum_addr %67 : $*Optional<CustomStringConvertible>, case #Optional.some!enumelt.1: bb11, case #Optional.none!enumelt: bb15, scope 48 // id: %72

bb11:                                             // Preds: bb10
  %73 = unchecked_take_enum_data_addr %67 : $*Optional<CustomStringConvertible>, #Optional.some!enumelt.1, scope 48 // user: %74
  copy_addr [take] %73 to [initialization] %64 : $*CustomStringConvertible, scope 48 // id: %74
  dealloc_stack %67 : $*Optional<CustomStringConvertible>, scope 48 // id: %75
  dealloc_stack %65 : $*@thick MyError.Type, scope 48 // id: %76
  %77 = open_existential_addr %64 : $*CustomStringConvertible to $*@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 48 // users: %81, %80, %79, %78
  %78 = alloc_stack $@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 48 // users: %114, %82, %81, %79
  copy_addr %77 to [initialization] %78 : $*@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 48 // id: %79
  %80 = witness_method $@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, #CustomStringConvertible.description!getter.1, %77 : $*@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 48 // user: %81
  %81 = apply %80<@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible>(%78) : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 48 // users: %111, %112, %109, %100, %88, %86, %103, %84
  destroy_addr %78 : $*@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 48 // id: %82
  debug_value_addr %1 : $*String, scope 57        // id: %83
  debug_value %81 : $String, scope 57             // id: %84
  debug_value_addr %1 : $*String, scope 58        // id: %85
  debug_value %81 : $String, scope 58             // id: %86
  debug_value_addr %1 : $*String, scope 58        // id: %87
  debug_value %81 : $String, scope 58             // id: %88
  %89 = struct_element_addr %1 : $*String, #String._core, scope 58 // users: %110, %98, %90
  %90 = struct_element_addr %89 : $*_StringCore, #_StringCore._countAndFlags, scope 58 // user: %91
  %91 = struct_element_addr %90 : $*UInt, #UInt._value, scope 58 // user: %92
  %92 = load %91 : $*Builtin.Int64, scope 58      // user: %94
  %93 = integer_literal $Builtin.Int64, 4611686018427387903, scope 58 // user: %94
  %94 = builtin "and_Int64"(%92 : $Builtin.Int64, %93 : $Builtin.Int64) : $Builtin.Int64, scope 58 // user: %96
  %95 = integer_literal $Builtin.Int64, 0, scope 58 // user: %96
  %96 = builtin "cmp_eq_Int64"(%94 : $Builtin.Int64, %95 : $Builtin.Int64) : $Builtin.Int1, scope 58 // user: %97
  cond_br %96, bb12, bb13, scope 58               // id: %97

bb12:                                             // Preds: bb11
  %98 = struct_element_addr %89 : $*_StringCore, #_StringCore._owner, scope 58 // user: %99
  %99 = load %98 : $*Optional<AnyObject>, scope 58 // user: %101
  store %81 to %1 : $*String, scope 58            // id: %100
  release_value %99 : $Optional<AnyObject>, scope 48 // id: %101
  br bb14, scope 58                               // id: %102

bb13:                                             // Preds: bb11
  %103 = struct_extract %81 : $String, #String._core, scope 57 // users: %107, %106, %104
  %104 = struct_extract %103 : $_StringCore, #_StringCore._owner, scope 57 // user: %110
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %105 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 58 // user: %110
  %106 = struct_extract %103 : $_StringCore, #_StringCore._countAndFlags, scope 58 // user: %108
  %107 = struct_extract %103 : $_StringCore, #_StringCore._baseAddress, scope 58 // user: %110
  %108 = struct_extract %106 : $UInt, #UInt._value, scope 58 // user: %110
  retain_value %81 : $String, scope 48            // id: %109
  %110 = apply %105(%107, %108, %104, %89) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 58
  release_value %81 : $String, scope 48           // id: %111
  release_value %81 : $String, scope 48           // id: %112
  br bb14, scope 58                               // id: %113

bb14:                                             // Preds: bb13 bb12
  dealloc_stack %78 : $*@opened("155FC848-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 48 // id: %114
  destroy_addr %64 : $*CustomStringConvertible, scope 48 // id: %115
  dealloc_stack %64 : $*CustomStringConvertible, scope 48 // id: %116
  br bb7, scope 48                                // id: %117

bb15:                                             // Preds: bb10
  dealloc_stack %67 : $*Optional<CustomStringConvertible>, scope 48 // id: %118
  dealloc_stack %65 : $*@thick MyError.Type, scope 48 // id: %119
  dealloc_stack %64 : $*CustomStringConvertible, scope 48 // id: %120
  %121 = alloc_stack $TextOutputStreamable, scope 48 // users: %142, %138, %137, %134, %131
  %122 = alloc_stack $@thick MyError.Type, scope 48 // users: %123, %126, %141, %133
  store %0 to %122 : $*@thick MyError.Type, scope 48 // id: %123
  %124 = alloc_stack $Optional<TextOutputStreamable>, scope 48 // users: %129, %162, %140, %132, %130, %127, %125
  %125 = init_enum_data_addr %124 : $*Optional<TextOutputStreamable>, #Optional.some!enumelt.1, scope 48 // user: %126
  checked_cast_addr_br take_always MyError.Type in %122 : $*@thick MyError.Type to TextOutputStreamable in %125 : $*TextOutputStreamable, bb16, bb20, scope 48 // id: %126

bb16:                                             // Preds: bb15
  inject_enum_addr %124 : $*Optional<TextOutputStreamable>, #Optional.some!enumelt.1, scope 48 // id: %127
  br bb17, scope 48                               // id: %128

bb17:                                             // Preds: bb20 bb16
  switch_enum_addr %124 : $*Optional<TextOutputStreamable>, case #Optional.some!enumelt.1: bb18, case #Optional.none!enumelt: bb19, scope 48 // id: %129

bb18:                                             // Preds: bb17
  %130 = unchecked_take_enum_data_addr %124 : $*Optional<TextOutputStreamable>, #Optional.some!enumelt.1, scope 48 // user: %131
  copy_addr [take] %130 to [initialization] %121 : $*TextOutputStreamable, scope 48 // id: %131
  dealloc_stack %124 : $*Optional<TextOutputStreamable>, scope 48 // id: %132
  dealloc_stack %122 : $*@thick MyError.Type, scope 48 // id: %133
  %134 = open_existential_addr %121 : $*TextOutputStreamable to $*@opened("155FC99C-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable, scope 48 // users: %136, %136, %135
  %135 = witness_method $@opened("155FC99C-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable, #TextOutputStreamable.write!1, %134 : $*@opened("155FC99C-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable : $@convention(witness_method) <τ_0_0 where τ_0_0 : TextOutputStreamable><τ_1_0 where τ_1_0 : TextOutputStream> (@inout τ_1_0, @in_guaranteed τ_0_0) -> (), scope 48 // user: %136
  %136 = apply %135<@opened("155FC99C-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable, String>(%1, %134) : $@convention(witness_method) <τ_0_0 where τ_0_0 : TextOutputStreamable><τ_1_0 where τ_1_0 : TextOutputStream> (@inout τ_1_0, @in_guaranteed τ_0_0) -> (), scope 48
  destroy_addr %121 : $*TextOutputStreamable, scope 48 // id: %137
  dealloc_stack %121 : $*TextOutputStreamable, scope 48 // id: %138
  br bb7, scope 48                                // id: %139

bb19:                                             // Preds: bb17
  dealloc_stack %124 : $*Optional<TextOutputStreamable>, scope 48 // id: %140
  dealloc_stack %122 : $*@thick MyError.Type, scope 48 // id: %141
  dealloc_stack %121 : $*TextOutputStreamable, scope 48 // id: %142
  %143 = alloc_stack $Any, scope 48               // users: %149, %147, %144
  %144 = init_existential_addr %143 : $*Any, $MyError.Type, scope 48 // user: %145
  store %0 to %144 : $*@thick MyError.Type, scope 48 // id: %145
  // function_ref specialized Mirror.init(reflecting : Any) -> Mirror
  %146 = function_ref @_TTSfq4n_d___TFVs6MirrorCfT10reflectingP__S_ : $@convention(thin) (@in Any) -> @owned Mirror, scope 48 // user: %147
  %147 = apply %146(%143) : $@convention(thin) (@in Any) -> @owned Mirror, scope 48 // users: %159, %155, %154, %153, %148
  debug_value %147 : $Mirror, scope 48            // id: %148
  dealloc_stack %143 : $*Any, scope 48            // id: %149
  %150 = integer_literal $Builtin.Int1, -1, scope 48 // user: %151
  %151 = struct $Bool (%150 : $Builtin.Int1), scope 48 // user: %157
  // function_ref specialized specialized _adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()
  %152 = function_ref @_TTSf4n_gs_n_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@thick MyError.Type, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> (), scope 61 // user: %157
  %153 = struct_extract %147 : $Mirror, #Mirror.displayStyle, scope 61 // user: %157
  %154 = struct_extract %147 : $Mirror, #Mirror.children, scope 61 // users: %158, %156
  %155 = struct_extract %147 : $Mirror, #Mirror.subjectType, scope 61 // user: %157
  %156 = struct_extract %154 : $AnyCollection<(label: Optional<String>, value: Any)>, #AnyCollection._box, scope 61 // user: %157
  %157 = apply %152(%0, %155, %156, %153, %1, %151) : $@convention(thin) (@thick MyError.Type, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> (), scope 61
  release_value %154 : $AnyCollection<(label: Optional<String>, value: Any)>, scope 48 // id: %158
  %159 = struct_extract %147 : $Mirror, #Mirror._makeSuperclassMirror, scope 61 // user: %160
  strong_release %159 : $@callee_owned () -> @owned Optional<Mirror>, scope 48 // id: %160
  br bb7, scope 48                                // id: %161

bb20:                                             // Preds: bb15
  inject_enum_addr %124 : $*Optional<TextOutputStreamable>, #Optional.none!enumelt, scope 48 // id: %162
  br bb17, scope 48                               // id: %163

bb21:                                             // Preds: bb8
  inject_enum_addr %67 : $*Optional<CustomStringConvertible>, #Optional.none!enumelt, scope 48 // id: %164
  br bb10, scope 48                               // id: %165

bb22:                                             // Preds: bb0
  inject_enum_addr %8 : $*Optional<CustomDebugStringConvertible>, #Optional.none!enumelt, scope 48 // id: %166
  br bb2, scope 48                                // id: %167
}

sil_scope 62 {  parent @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> () }
sil_scope 63 {  parent 62 }
sil_scope 64 {  parent 49 inlined_at 63 }
sil_scope 65 {  parent 64 }
sil_scope 66 {  parent 52 inlined_at 65 }
sil_scope 67 {  parent 62 }
sil_scope 68 {  parent 49 inlined_at 67 }
sil_scope 69 {  parent 68 }
sil_scope 70 {  parent 52 inlined_at 69 }
sil_scope 71 {  parent @_TTSg5P__SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@in Any, @owned Mirror, @inout String, Bool) -> () }
sil_scope 72 {  parent 62 }
sil_scope 73 {  parent 71 inlined_at 72 }

// specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
sil shared [noinline] @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> () {
// %0                                             // users: %13, %73, %131, %159, %147, %124, %66, %6, %3
// %1                                             // users: %159, %101, %90, %88, %86, %41, %30, %28, %26, %84, %24, %138, %2
bb0(%0 : $*Any, %1 : $*String):
  debug_value_addr %1 : $*String, scope 62        // id: %2
  debug_value_addr %0 : $*Any, scope 62           // id: %3
  %4 = alloc_stack $CustomDebugStringConvertible, scope 62 // users: %63, %57, %56, %18, %15
  %5 = alloc_stack $Any, scope 62                 // users: %9, %62, %17, %6
  copy_addr %0 to [initialization] %5 : $*Any, scope 62 // id: %6
  %7 = alloc_stack $Optional<CustomDebugStringConvertible>, scope 62 // users: %12, %168, %61, %16, %14, %10, %8
  %8 = init_enum_data_addr %7 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 62 // user: %9
  checked_cast_addr_br take_always Any in %5 : $*Any to CustomDebugStringConvertible in %8 : $*CustomDebugStringConvertible, bb1, bb22, scope 62 // id: %9

bb1:                                              // Preds: bb0
  inject_enum_addr %7 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 62 // id: %10
  br bb2, scope 62                                // id: %11

bb2:                                              // Preds: bb22 bb1
  switch_enum_addr %7 : $*Optional<CustomDebugStringConvertible>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb8, scope 62 // id: %12

bb3:                                              // Preds: bb2
  destroy_addr %0 : $*Any, scope 62               // id: %13
  %14 = unchecked_take_enum_data_addr %7 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 62 // user: %15
  copy_addr [take] %14 to [initialization] %4 : $*CustomDebugStringConvertible, scope 62 // id: %15
  dealloc_stack %7 : $*Optional<CustomDebugStringConvertible>, scope 62 // id: %16
  dealloc_stack %5 : $*Any, scope 62              // id: %17
  %18 = open_existential_addr %4 : $*CustomDebugStringConvertible to $*@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 62 // users: %22, %21, %20, %19
  %19 = alloc_stack $@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 62 // users: %55, %23, %22, %20
  copy_addr %18 to [initialization] %19 : $*@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 62 // id: %20
  %21 = witness_method $@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, #CustomDebugStringConvertible.debugDescription!getter.1, %18 : $*@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomDebugStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 62 // user: %22
  %22 = apply %21<@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible>(%19) : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomDebugStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 62 // users: %52, %53, %50, %41, %29, %27, %44, %25
  destroy_addr %19 : $*@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 62 // id: %23
  debug_value_addr %1 : $*String, scope 64        // id: %24
  debug_value %22 : $String, scope 64             // id: %25
  debug_value_addr %1 : $*String, scope 66        // id: %26
  debug_value %22 : $String, scope 66             // id: %27
  debug_value_addr %1 : $*String, scope 66        // id: %28
  debug_value %22 : $String, scope 66             // id: %29
  %30 = struct_element_addr %1 : $*String, #String._core, scope 66 // users: %51, %39, %31
  %31 = struct_element_addr %30 : $*_StringCore, #_StringCore._countAndFlags, scope 66 // user: %32
  %32 = struct_element_addr %31 : $*UInt, #UInt._value, scope 66 // user: %33
  %33 = load %32 : $*Builtin.Int64, scope 66      // user: %35
  %34 = integer_literal $Builtin.Int64, 4611686018427387903, scope 66 // user: %35
  %35 = builtin "and_Int64"(%33 : $Builtin.Int64, %34 : $Builtin.Int64) : $Builtin.Int64, scope 66 // user: %37
  %36 = integer_literal $Builtin.Int64, 0, scope 66 // user: %37
  %37 = builtin "cmp_eq_Int64"(%35 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1, scope 66 // user: %38
  cond_br %37, bb4, bb5, scope 66                 // id: %38

bb4:                                              // Preds: bb3
  %39 = struct_element_addr %30 : $*_StringCore, #_StringCore._owner, scope 66 // user: %40
  %40 = load %39 : $*Optional<AnyObject>, scope 66 // user: %42
  store %22 to %1 : $*String, scope 66            // id: %41
  release_value %40 : $Optional<AnyObject>, scope 62 // id: %42
  br bb6, scope 66                                // id: %43

bb5:                                              // Preds: bb3
  %44 = struct_extract %22 : $String, #String._core, scope 64 // users: %47, %48, %45
  %45 = struct_extract %44 : $_StringCore, #_StringCore._owner, scope 64 // user: %51
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %46 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 66 // user: %51
  %47 = struct_extract %44 : $_StringCore, #_StringCore._countAndFlags, scope 66 // user: %49
  %48 = struct_extract %44 : $_StringCore, #_StringCore._baseAddress, scope 66 // user: %51
  %49 = struct_extract %47 : $UInt, #UInt._value, scope 66 // user: %51
  retain_value %22 : $String, scope 62            // id: %50
  %51 = apply %46(%48, %49, %45, %30) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 66
  release_value %22 : $String, scope 62           // id: %52
  release_value %22 : $String, scope 62           // id: %53
  br bb6, scope 66                                // id: %54

bb6:                                              // Preds: bb5 bb4
  dealloc_stack %19 : $*@opened("1560CF68-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 62 // id: %55
  destroy_addr %4 : $*CustomDebugStringConvertible, scope 62 // id: %56
  dealloc_stack %4 : $*CustomDebugStringConvertible, scope 62 // id: %57
  br bb7, scope 62                                // id: %58

bb7:                                              // Preds: bb19 bb18 bb14 bb6
  %59 = tuple (), scope 62                        // user: %60
  return %59 : $(), scope 62                      // id: %60

bb8:                                              // Preds: bb2
  dealloc_stack %7 : $*Optional<CustomDebugStringConvertible>, scope 62 // id: %61
  dealloc_stack %5 : $*Any, scope 62              // id: %62
  dealloc_stack %4 : $*CustomDebugStringConvertible, scope 62 // id: %63
  %64 = alloc_stack $CustomStringConvertible, scope 62 // users: %121, %117, %116, %78, %75
  %65 = alloc_stack $Any, scope 62                // users: %69, %120, %77, %66
  copy_addr %0 to [initialization] %65 : $*Any, scope 62 // id: %66
  %67 = alloc_stack $Optional<CustomStringConvertible>, scope 62 // users: %72, %166, %119, %76, %74, %70, %68
  %68 = init_enum_data_addr %67 : $*Optional<CustomStringConvertible>, #Optional.some!enumelt.1, scope 62 // user: %69
  checked_cast_addr_br take_always Any in %65 : $*Any to CustomStringConvertible in %68 : $*CustomStringConvertible, bb9, bb21, scope 62 // id: %69

bb9:                                              // Preds: bb8
  inject_enum_addr %67 : $*Optional<CustomStringConvertible>, #Optional.some!enumelt.1, scope 62 // id: %70
  br bb10, scope 62                               // id: %71

bb10:                                             // Preds: bb21 bb9
  switch_enum_addr %67 : $*Optional<CustomStringConvertible>, case #Optional.some!enumelt.1: bb11, case #Optional.none!enumelt: bb15, scope 62 // id: %72

bb11:                                             // Preds: bb10
  destroy_addr %0 : $*Any, scope 62               // id: %73
  %74 = unchecked_take_enum_data_addr %67 : $*Optional<CustomStringConvertible>, #Optional.some!enumelt.1, scope 62 // user: %75
  copy_addr [take] %74 to [initialization] %64 : $*CustomStringConvertible, scope 62 // id: %75
  dealloc_stack %67 : $*Optional<CustomStringConvertible>, scope 62 // id: %76
  dealloc_stack %65 : $*Any, scope 62             // id: %77
  %78 = open_existential_addr %64 : $*CustomStringConvertible to $*@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 62 // users: %82, %81, %80, %79
  %79 = alloc_stack $@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 62 // users: %115, %83, %82, %80
  copy_addr %78 to [initialization] %79 : $*@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 62 // id: %80
  %81 = witness_method $@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, #CustomStringConvertible.description!getter.1, %78 : $*@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 62 // user: %82
  %82 = apply %81<@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible>(%79) : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 62 // users: %112, %113, %110, %101, %89, %87, %104, %85
  destroy_addr %79 : $*@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 62 // id: %83
  debug_value_addr %1 : $*String, scope 68        // id: %84
  debug_value %82 : $String, scope 68             // id: %85
  debug_value_addr %1 : $*String, scope 70        // id: %86
  debug_value %82 : $String, scope 70             // id: %87
  debug_value_addr %1 : $*String, scope 70        // id: %88
  debug_value %82 : $String, scope 70             // id: %89
  %90 = struct_element_addr %1 : $*String, #String._core, scope 70 // users: %111, %99, %91
  %91 = struct_element_addr %90 : $*_StringCore, #_StringCore._countAndFlags, scope 70 // user: %92
  %92 = struct_element_addr %91 : $*UInt, #UInt._value, scope 70 // user: %93
  %93 = load %92 : $*Builtin.Int64, scope 70      // user: %95
  %94 = integer_literal $Builtin.Int64, 4611686018427387903, scope 70 // user: %95
  %95 = builtin "and_Int64"(%93 : $Builtin.Int64, %94 : $Builtin.Int64) : $Builtin.Int64, scope 70 // user: %97
  %96 = integer_literal $Builtin.Int64, 0, scope 70 // user: %97
  %97 = builtin "cmp_eq_Int64"(%95 : $Builtin.Int64, %96 : $Builtin.Int64) : $Builtin.Int1, scope 70 // user: %98
  cond_br %97, bb12, bb13, scope 70               // id: %98

bb12:                                             // Preds: bb11
  %99 = struct_element_addr %90 : $*_StringCore, #_StringCore._owner, scope 70 // user: %100
  %100 = load %99 : $*Optional<AnyObject>, scope 70 // user: %102
  store %82 to %1 : $*String, scope 70            // id: %101
  release_value %100 : $Optional<AnyObject>, scope 62 // id: %102
  br bb14, scope 70                               // id: %103

bb13:                                             // Preds: bb11
  %104 = struct_extract %82 : $String, #String._core, scope 68 // users: %107, %108, %105
  %105 = struct_extract %104 : $_StringCore, #_StringCore._owner, scope 68 // user: %111
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %106 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 70 // user: %111
  %107 = struct_extract %104 : $_StringCore, #_StringCore._countAndFlags, scope 70 // user: %109
  %108 = struct_extract %104 : $_StringCore, #_StringCore._baseAddress, scope 70 // user: %111
  %109 = struct_extract %107 : $UInt, #UInt._value, scope 70 // user: %111
  retain_value %82 : $String, scope 62            // id: %110
  %111 = apply %106(%108, %109, %105, %90) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 70
  release_value %82 : $String, scope 62           // id: %112
  release_value %82 : $String, scope 62           // id: %113
  br bb14, scope 70                               // id: %114

bb14:                                             // Preds: bb13 bb12
  dealloc_stack %79 : $*@opened("1560D03A-A0C9-11E6-8491-A45E60F21093") CustomStringConvertible, scope 62 // id: %115
  destroy_addr %64 : $*CustomStringConvertible, scope 62 // id: %116
  dealloc_stack %64 : $*CustomStringConvertible, scope 62 // id: %117
  br bb7, scope 62                                // id: %118

bb15:                                             // Preds: bb10
  dealloc_stack %67 : $*Optional<CustomStringConvertible>, scope 62 // id: %119
  dealloc_stack %65 : $*Any, scope 62             // id: %120
  dealloc_stack %64 : $*CustomStringConvertible, scope 62 // id: %121
  %122 = alloc_stack $TextOutputStreamable, scope 62 // users: %144, %140, %139, %136, %133
  %123 = alloc_stack $Any, scope 62               // users: %127, %143, %135, %124
  copy_addr %0 to [initialization] %123 : $*Any, scope 62 // id: %124
  %125 = alloc_stack $Optional<TextOutputStreamable>, scope 62 // users: %130, %164, %142, %134, %132, %128, %126
  %126 = init_enum_data_addr %125 : $*Optional<TextOutputStreamable>, #Optional.some!enumelt.1, scope 62 // user: %127
  checked_cast_addr_br take_always Any in %123 : $*Any to TextOutputStreamable in %126 : $*TextOutputStreamable, bb16, bb20, scope 62 // id: %127

bb16:                                             // Preds: bb15
  inject_enum_addr %125 : $*Optional<TextOutputStreamable>, #Optional.some!enumelt.1, scope 62 // id: %128
  br bb17, scope 62                               // id: %129

bb17:                                             // Preds: bb20 bb16
  switch_enum_addr %125 : $*Optional<TextOutputStreamable>, case #Optional.some!enumelt.1: bb18, case #Optional.none!enumelt: bb19, scope 62 // id: %130

bb18:                                             // Preds: bb17
  destroy_addr %0 : $*Any, scope 62               // id: %131
  %132 = unchecked_take_enum_data_addr %125 : $*Optional<TextOutputStreamable>, #Optional.some!enumelt.1, scope 62 // user: %133
  copy_addr [take] %132 to [initialization] %122 : $*TextOutputStreamable, scope 62 // id: %133
  dealloc_stack %125 : $*Optional<TextOutputStreamable>, scope 62 // id: %134
  dealloc_stack %123 : $*Any, scope 62            // id: %135
  %136 = open_existential_addr %122 : $*TextOutputStreamable to $*@opened("1560D0BC-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable, scope 62 // users: %138, %138, %137
  %137 = witness_method $@opened("1560D0BC-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable, #TextOutputStreamable.write!1, %136 : $*@opened("1560D0BC-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable : $@convention(witness_method) <τ_0_0 where τ_0_0 : TextOutputStreamable><τ_1_0 where τ_1_0 : TextOutputStream> (@inout τ_1_0, @in_guaranteed τ_0_0) -> (), scope 62 // user: %138
  %138 = apply %137<@opened("1560D0BC-A0C9-11E6-8491-A45E60F21093") TextOutputStreamable, String>(%1, %136) : $@convention(witness_method) <τ_0_0 where τ_0_0 : TextOutputStreamable><τ_1_0 where τ_1_0 : TextOutputStream> (@inout τ_1_0, @in_guaranteed τ_0_0) -> (), scope 62
  destroy_addr %122 : $*TextOutputStreamable, scope 62 // id: %139
  dealloc_stack %122 : $*TextOutputStreamable, scope 62 // id: %140
  br bb7, scope 62                                // id: %141

bb19:                                             // Preds: bb17
  dealloc_stack %125 : $*Optional<TextOutputStreamable>, scope 62 // id: %142
  dealloc_stack %123 : $*Any, scope 62            // id: %143
  dealloc_stack %122 : $*TextOutputStreamable, scope 62 // id: %144
  %145 = alloc_stack $Any, scope 62               // users: %151, %149, %146
  %146 = init_existential_addr %145 : $*Any, $Any, scope 62 // user: %147
  copy_addr %0 to [initialization] %146 : $*Any, scope 62 // id: %147
  // function_ref specialized Mirror.init(reflecting : Any) -> Mirror
  %148 = function_ref @_TTSfq4n_d___TFVs6MirrorCfT10reflectingP__S_ : $@convention(thin) (@in Any) -> @owned Mirror, scope 62 // user: %149
  %149 = apply %148(%145) : $@convention(thin) (@in Any) -> @owned Mirror, scope 62 // users: %161, %157, %156, %155, %150
  debug_value %149 : $Mirror, scope 62            // id: %150
  dealloc_stack %145 : $*Any, scope 62            // id: %151
  %152 = integer_literal $Builtin.Int1, -1, scope 62 // user: %153
  %153 = struct $Bool (%152 : $Builtin.Int1), scope 62 // user: %159
  // function_ref specialized specialized _adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()
  %154 = function_ref @_TTSf4n_gs_n_n___TTSg5P__SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@in Any, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> (), scope 73 // user: %159
  %155 = struct_extract %149 : $Mirror, #Mirror.displayStyle, scope 73 // user: %159
  %156 = struct_extract %149 : $Mirror, #Mirror.children, scope 73 // users: %160, %158
  %157 = struct_extract %149 : $Mirror, #Mirror.subjectType, scope 73 // user: %159
  %158 = struct_extract %156 : $AnyCollection<(label: Optional<String>, value: Any)>, #AnyCollection._box, scope 73 // user: %159
  %159 = apply %154(%0, %157, %158, %155, %1, %153) : $@convention(thin) (@in Any, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> (), scope 73
  release_value %156 : $AnyCollection<(label: Optional<String>, value: Any)>, scope 62 // id: %160
  %161 = struct_extract %149 : $Mirror, #Mirror._makeSuperclassMirror, scope 73 // user: %162
  strong_release %161 : $@callee_owned () -> @owned Optional<Mirror>, scope 62 // id: %162
  br bb7, scope 62                                // id: %163

bb20:                                             // Preds: bb15
  inject_enum_addr %125 : $*Optional<TextOutputStreamable>, #Optional.none!enumelt, scope 62 // id: %164
  br bb17, scope 62                               // id: %165

bb21:                                             // Preds: bb8
  inject_enum_addr %67 : $*Optional<CustomStringConvertible>, #Optional.none!enumelt, scope 62 // id: %166
  br bb10, scope 62                               // id: %167

bb22:                                             // Preds: bb0
  inject_enum_addr %7 : $*Optional<CustomDebugStringConvertible>, #Optional.none!enumelt, scope 62 // id: %168
  br bb2, scope 62                                // id: %169
}

sil_scope 74 {  parent @_TTSg5SS_SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@owned String, @inout String) -> () }
sil_scope 75 {  parent 74 }
sil_scope 76 {  parent 49 inlined_at 75 }
sil_scope 77 {  parent 76 }
sil_scope 78 {  parent 52 inlined_at 77 }

// specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
sil shared [noinline] @_TTSg5SS_SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@owned String, @inout String) -> () {
// %0                                             // users: %12, %9, %6, %2
// %1                                             // users: %40, %29, %27, %25, %23, %3
bb0(%0 : $String, %1 : $*String):
  debug_value %0 : $String, scope 74              // id: %2
  debug_value_addr %1 : $*String, scope 74        // id: %3
  %4 = alloc_stack $CustomDebugStringConvertible, scope 74 // users: %56, %55, %17, %14
  %5 = alloc_stack $String, scope 74              // users: %10, %6, %16
  store %0 to %5 : $*String, scope 74             // id: %6
  %7 = alloc_stack $Optional<CustomDebugStringConvertible>, scope 74 // users: %15, %13, %11, %8
  %8 = init_enum_data_addr %7 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 74 // user: %10
  retain_value %0 : $String, scope 74             // id: %9
  unconditional_checked_cast_addr take_always String in %5 : $*String to CustomDebugStringConvertible in %8 : $*CustomDebugStringConvertible, scope 74 // id: %10
  inject_enum_addr %7 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 74 // id: %11
  release_value %0 : $String, scope 74            // id: %12
  %13 = unchecked_take_enum_data_addr %7 : $*Optional<CustomDebugStringConvertible>, #Optional.some!enumelt.1, scope 74 // user: %14
  copy_addr [take] %13 to [initialization] %4 : $*CustomDebugStringConvertible, scope 74 // id: %14
  dealloc_stack %7 : $*Optional<CustomDebugStringConvertible>, scope 74 // id: %15
  dealloc_stack %5 : $*String, scope 74           // id: %16
  %17 = open_existential_addr %4 : $*CustomDebugStringConvertible to $*@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 74 // users: %21, %20, %19, %18
  %18 = alloc_stack $@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 74 // users: %54, %22, %21, %19
  copy_addr %17 to [initialization] %18 : $*@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 74 // id: %19
  %20 = witness_method $@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, #CustomDebugStringConvertible.debugDescription!getter.1, %17 : $*@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomDebugStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 74 // user: %21
  %21 = apply %20<@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible>(%18) : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomDebugStringConvertible> (@in_guaranteed τ_0_0) -> @owned String, scope 74 // users: %51, %52, %49, %40, %28, %26, %43, %24
  destroy_addr %18 : $*@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 74 // id: %22
  debug_value_addr %1 : $*String, scope 76        // id: %23
  debug_value %21 : $String, scope 76             // id: %24
  debug_value_addr %1 : $*String, scope 78        // id: %25
  debug_value %21 : $String, scope 78             // id: %26
  debug_value_addr %1 : $*String, scope 78        // id: %27
  debug_value %21 : $String, scope 78             // id: %28
  %29 = struct_element_addr %1 : $*String, #String._core, scope 78 // users: %50, %38, %30
  %30 = struct_element_addr %29 : $*_StringCore, #_StringCore._countAndFlags, scope 78 // user: %31
  %31 = struct_element_addr %30 : $*UInt, #UInt._value, scope 78 // user: %32
  %32 = load %31 : $*Builtin.Int64, scope 78      // user: %34
  %33 = integer_literal $Builtin.Int64, 4611686018427387903, scope 78 // user: %34
  %34 = builtin "and_Int64"(%32 : $Builtin.Int64, %33 : $Builtin.Int64) : $Builtin.Int64, scope 78 // user: %36
  %35 = integer_literal $Builtin.Int64, 0, scope 78 // user: %36
  %36 = builtin "cmp_eq_Int64"(%34 : $Builtin.Int64, %35 : $Builtin.Int64) : $Builtin.Int1, scope 78 // user: %37
  cond_br %36, bb1, bb2, scope 78                 // id: %37

bb1:                                              // Preds: bb0
  %38 = struct_element_addr %29 : $*_StringCore, #_StringCore._owner, scope 78 // user: %39
  %39 = load %38 : $*Optional<AnyObject>, scope 78 // user: %41
  store %21 to %1 : $*String, scope 78            // id: %40
  release_value %39 : $Optional<AnyObject>, scope 74 // id: %41
  br bb3, scope 78                                // id: %42

bb2:                                              // Preds: bb0
  %43 = struct_extract %21 : $String, #String._core, scope 76 // users: %46, %47, %44
  %44 = struct_extract %43 : $_StringCore, #_StringCore._owner, scope 76 // user: %50
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %45 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 78 // user: %50
  %46 = struct_extract %43 : $_StringCore, #_StringCore._countAndFlags, scope 78 // user: %48
  %47 = struct_extract %43 : $_StringCore, #_StringCore._baseAddress, scope 78 // user: %50
  %48 = struct_extract %46 : $UInt, #UInt._value, scope 78 // user: %50
  retain_value %21 : $String, scope 74            // id: %49
  %50 = apply %45(%47, %48, %44, %29) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 78
  release_value %21 : $String, scope 74           // id: %51
  release_value %21 : $String, scope 74           // id: %52
  br bb3, scope 78                                // id: %53

bb3:                                              // Preds: bb2 bb1
  dealloc_stack %18 : $*@opened("1560D72E-A0C9-11E6-8491-A45E60F21093") CustomDebugStringConvertible, scope 74 // id: %54
  destroy_addr %4 : $*CustomDebugStringConvertible, scope 74 // id: %55
  dealloc_stack %4 : $*CustomDebugStringConvertible, scope 74 // id: %56
  %57 = tuple (), scope 74                        // user: %58
  return %57 : $(), scope 74                      // id: %58
}

sil_scope 79 {  parent @_TTSfq4n_d___TFVs6MirrorCfT10reflectingP__S_ : $@convention(thin) (@in Any) -> @owned Mirror }

// specialized Mirror.init(reflecting : Any) -> Mirror
sil public_external [fragile] @_TTSfq4n_d___TFVs6MirrorCfT10reflectingP__S_ : $@convention(thin) (@in Any) -> @owned Mirror {
// %0                                             // users: %35, %22, %21, %18, %4, %1
bb0(%0 : $*Any):
  debug_value_addr %0 : $*Any, scope 79           // id: %1
  %2 = alloc_stack $CustomReflectable, scope 79   // users: %54, %53, %40, %37, %15
  %3 = alloc_stack $Any, scope 79                 // users: %39, %14, %7, %4
  copy_addr %0 to [initialization] %3 : $*Any, scope 79 // id: %4
  %5 = alloc_stack $Optional<CustomReflectable>, scope 79 // users: %38, %36, %13, %12, %10, %8, %6
  %6 = init_enum_data_addr %5 : $*Optional<CustomReflectable>, #Optional.some!enumelt.1, scope 79 // user: %7
  checked_cast_addr_br take_always Any in %3 : $*Any to CustomReflectable in %6 : $*CustomReflectable, bb2, bb1, scope 79 // id: %7

bb1:                                              // Preds: bb0
  inject_enum_addr %5 : $*Optional<CustomReflectable>, #Optional.none!enumelt, scope 79 // id: %8
  br bb3, scope 79                                // id: %9

bb2:                                              // Preds: bb0
  inject_enum_addr %5 : $*Optional<CustomReflectable>, #Optional.some!enumelt.1, scope 79 // id: %10
  br bb3, scope 79                                // id: %11

bb3:                                              // Preds: bb2 bb1
  switch_enum_addr %5 : $*Optional<CustomReflectable>, case #Optional.some!enumelt.1: bb5, case #Optional.none!enumelt: bb4, scope 79 // id: %12

bb4:                                              // Preds: bb3
  dealloc_stack %5 : $*Optional<CustomReflectable>, scope 79 // id: %13
  dealloc_stack %3 : $*Any, scope 79              // id: %14
  dealloc_stack %2 : $*CustomReflectable, scope 79 // id: %15
  // function_ref swift_reflectAny
  %16 = function_ref @swift_reflectAny : $@convention(thin) <τ_0_0> (@in τ_0_0) -> @out _Mirror, scope 79 // user: %20
  %17 = alloc_stack $Any, scope 79                // users: %33, %20, %18
  copy_addr %0 to [initialization] %17 : $*Any, scope 79 // id: %18
  %19 = alloc_stack $_Mirror, scope 79            // users: %32, %25, %20
  %20 = apply %16<Any>(%19, %17) : $@convention(thin) <τ_0_0> (@in τ_0_0) -> @out _Mirror, scope 79
  %21 = existential_metatype $@thick Any.Type, %0 : $*Any, scope 79 // user: %25
  destroy_addr %0 : $*Any, scope 79               // id: %22
  %23 = enum $Optional<() -> Optional<Mirror>>, #Optional.none!enumelt, scope 79 // user: %25
  // function_ref specialized Mirror.init(legacy : _Mirror, subjectType : Any.Type, makeSuperclassMirror : () -> Mirror??) -> Mirror
  %24 = function_ref @_TTSfq4n_n_n_d___TFVs6MirrorCfT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_ : $@convention(thin) (@in _Mirror, @thick Any.Type, @owned Optional<() -> Optional<Mirror>>) -> @owned Mirror, scope 79 // user: %25
  %25 = apply %24(%19, %21, %23) : $@convention(thin) (@in _Mirror, @thick Any.Type, @owned Optional<() -> Optional<Mirror>>) -> @owned Mirror, scope 79 // users: %31, %30, %29, %27, %26
  %26 = struct_extract %25 : $Mirror, #Mirror.subjectType, scope 79 // user: %34
  %27 = struct_extract %25 : $Mirror, #Mirror.children, scope 79 // user: %28
  %28 = struct_extract %27 : $AnyCollection<(label: Optional<String>, value: Any)>, #AnyCollection._box, scope 79 // user: %34
  %29 = struct_extract %25 : $Mirror, #Mirror.displayStyle, scope 79 // user: %34
  %30 = struct_extract %25 : $Mirror, #Mirror._makeSuperclassMirror, scope 79 // user: %34
  %31 = struct_extract %25 : $Mirror, #Mirror._defaultDescendantRepresentation, scope 79 // user: %34
  dealloc_stack %19 : $*_Mirror, scope 79         // id: %32
  dealloc_stack %17 : $*Any, scope 79             // id: %33
  br bb6(%26 : $@thick Any.Type, %28 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, %29 : $Optional<Mirror.DisplayStyle>, %30 : $@callee_owned () -> @owned Optional<Mirror>, %31 : $Mirror._DefaultDescendantRepresentation), scope 79 // id: %34

bb5:                                              // Preds: bb3
  destroy_addr %0 : $*Any, scope 79               // id: %35
  %36 = unchecked_take_enum_data_addr %5 : $*Optional<CustomReflectable>, #Optional.some!enumelt.1, scope 79 // user: %37
  copy_addr [take] %36 to [initialization] %2 : $*CustomReflectable, scope 79 // id: %37
  dealloc_stack %5 : $*Optional<CustomReflectable>, scope 79 // id: %38
  dealloc_stack %3 : $*Any, scope 79              // id: %39
  %40 = open_existential_addr %2 : $*CustomReflectable to $*@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable, scope 79 // users: %44, %43, %42, %41
  %41 = alloc_stack $@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable, scope 79 // users: %52, %45, %44, %42
  copy_addr %40 to [initialization] %41 : $*@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable, scope 79 // id: %42
  %43 = witness_method $@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable, #CustomReflectable.customMirror!getter.1, %40 : $*@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomReflectable> (@in_guaranteed τ_0_0) -> @owned Mirror, scope 79 // user: %44
  %44 = apply %43<@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable>(%41) : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomReflectable> (@in_guaranteed τ_0_0) -> @owned Mirror, scope 79 // users: %51, %50, %49, %47, %46
  destroy_addr %41 : $*@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable, scope 79 // id: %45
  %46 = struct_extract %44 : $Mirror, #Mirror.subjectType, scope 79 // user: %55
  %47 = struct_extract %44 : $Mirror, #Mirror.children, scope 79 // user: %48
  %48 = struct_extract %47 : $AnyCollection<(label: Optional<String>, value: Any)>, #AnyCollection._box, scope 79 // user: %55
  %49 = struct_extract %44 : $Mirror, #Mirror.displayStyle, scope 79 // user: %55
  %50 = struct_extract %44 : $Mirror, #Mirror._makeSuperclassMirror, scope 79 // user: %55
  %51 = struct_extract %44 : $Mirror, #Mirror._defaultDescendantRepresentation, scope 79 // user: %55
  dealloc_stack %41 : $*@opened("154E0842-A0C9-11E6-8491-A45E60F21093") CustomReflectable, scope 79 // id: %52
  destroy_addr %2 : $*CustomReflectable, scope 79 // id: %53
  dealloc_stack %2 : $*CustomReflectable, scope 79 // id: %54
  br bb6(%46 : $@thick Any.Type, %48 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, %49 : $Optional<Mirror.DisplayStyle>, %50 : $@callee_owned () -> @owned Optional<Mirror>, %51 : $Mirror._DefaultDescendantRepresentation), scope 79 // id: %55

// %56                                            // user: %62
// %57                                            // user: %61
// %58                                            // user: %62
// %59                                            // user: %62
// %60                                            // user: %62
bb6(%56 : $@thick Any.Type, %57 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, %58 : $Optional<Mirror.DisplayStyle>, %59 : $@callee_owned () -> @owned Optional<Mirror>, %60 : $Mirror._DefaultDescendantRepresentation): // Preds: bb5 bb4
  %61 = struct $AnyCollection<(label: Optional<String>, value: Any)> (%57 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>), scope 79 // user: %62
  %62 = struct $Mirror (%56 : $@thick Any.Type, %61 : $AnyCollection<(label: Optional<String>, value: Any)>, %58 : $Optional<Mirror.DisplayStyle>, %59 : $@callee_owned () -> @owned Optional<Mirror>, %60 : $Mirror._DefaultDescendantRepresentation), scope 79 // user: %63
  return %62 : $Mirror, scope 79                  // id: %63
}


// swift_reflectAny
sil hidden_external [fragile] @swift_reflectAny : $@convention(thin) <τ_0_0> (@in τ_0_0) -> @out _Mirror

sil_scope 80 {  parent @_TTSfq4n_n_n_d___TFVs6MirrorCfT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_ : $@convention(thin) (@in _Mirror, @thick Any.Type, @owned Optional<() -> Optional<Mirror>>) -> @owned Mirror }

// specialized Mirror.init(legacy : _Mirror, subjectType : Any.Type, makeSuperclassMirror : () -> Mirror??) -> Mirror
sil hidden_external [fragile] @_TTSfq4n_n_n_d___TFVs6MirrorCfT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_ : $@convention(thin) (@in _Mirror, @thick Any.Type, @owned Optional<() -> Optional<Mirror>>) -> @owned Mirror {
// %0                                             // users: %68, %54, %36, %26, %3
// %1                                             // users: %64, %8, %7, %4
// %2                                             // users: %67, %43, %6, %5
bb0(%0 : $*_Mirror, %1 : $@thick Any.Type, %2 : $Optional<() -> Optional<Mirror>>):
  debug_value_addr %0 : $*_Mirror, scope 80       // id: %3
  debug_value %1 : $@thick Any.Type, scope 80     // id: %4
  debug_value %2 : $Optional<() -> Optional<Mirror>>, scope 80 // id: %5
  switch_enum %2 : $Optional<() -> Optional<Mirror>>, case #Optional.some!enumelt.1: bb7, case #Optional.none!enumelt: bb1, scope 80 // id: %6

bb1:                                              // Preds: bb0
  debug_value %1 : $@thick Any.Type, scope 80     // id: %7
  checked_cast_br %1 : $@thick Any.Type to $@thick AnyObject.Type, bb3, bb2, scope 80 // id: %8

bb2:                                              // Preds: bb1
  br bb5, scope 80                                // id: %9

// %10                                            // users: %14, %12, %11
bb3(%10 : $@thick AnyObject.Type):                // Preds: bb1
  debug_value %10 : $@thick AnyObject.Type, scope 80 // id: %11
  debug_value %10 : $@thick AnyObject.Type, scope 80 // id: %12
  // function_ref _swift_class_getSuperclass
  %13 = function_ref @_swift_class_getSuperclass : $@convention(thin) (@thick AnyObject.Type) -> Optional<AnyObject.Type>, scope 80 // user: %14
  %14 = apply %13(%10) : $@convention(thin) (@thick AnyObject.Type) -> Optional<AnyObject.Type>, scope 80 // user: %15
  switch_enum %14 : $Optional<AnyObject.Type>, case #Optional.some!enumelt.1: bb6, case #Optional.none!enumelt: bb4, scope 80 // id: %15

bb4:                                              // Preds: bb3
  br bb5, scope 80                                // id: %16

bb5:                                              // Preds: bb4 bb2
  %17 = metatype $@thin Mirror.Type, scope 80     // user: %19
  // function_ref static Mirror._noSuperclassMirror() -> Mirror?
  %18 = function_ref @_TZFVs6Mirror19_noSuperclassMirrorfT_GSqS__ : $@convention(method) (@thin Mirror.Type) -> @owned Optional<Mirror>, scope 80 // user: %19
  %19 = partial_apply %18(%17) : $@convention(method) (@thin Mirror.Type) -> @owned Optional<Mirror>, scope 80 // user: %20
  br bb8(%19 : $@callee_owned () -> @owned Optional<Mirror>), scope 80 // id: %20

// %21                                            // users: %27, %22
bb6(%21 : $@thick AnyObject.Type):                // Preds: bb3
  debug_value %21 : $@thick AnyObject.Type, scope 80 // id: %22
  // function_ref Mirror.(init(legacy : _Mirror, subjectType : Any.Type, makeSuperclassMirror : () -> Mirror??) -> Mirror).(closure #1)
  %23 = function_ref @_TFFVs6MirrorcFT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_U_FT_GSqS__ : $@convention(thin) (@owned @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror>, scope 80 // user: %27
  %24 = alloc_box $_Mirror, scope 80              // users: %27, %25
  %25 = project_box %24 : $@box _Mirror, scope 80 // user: %26
  copy_addr %0 to [initialization] %25 : $*_Mirror, scope 80 // id: %26
  %27 = partial_apply %23(%24, %21) : $@convention(thin) (@owned @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror>, scope 80 // user: %28
  br bb8(%27 : $@callee_owned () -> @owned Optional<Mirror>), scope 80 // id: %28

// %29                                            // user: %31
bb7(%29 : $@callee_owned (@in ()) -> @out Optional<Mirror>): // Preds: bb0
  // function_ref thunk
  %30 = function_ref @_TTRXFo_iT__iGSqVs6Mirror__XFo__oGSqS___ : $@convention(thin) (@owned @callee_owned (@in ()) -> @out Optional<Mirror>) -> @owned Optional<Mirror>, scope 80 // user: %31
  %31 = partial_apply %30(%29) : $@convention(thin) (@owned @callee_owned (@in ()) -> @out Optional<Mirror>) -> @owned Optional<Mirror>, scope 80 // users: %33, %32
  debug_value %31 : $@callee_owned () -> @owned Optional<Mirror>, scope 80 // id: %32
  br bb8(%31 : $@callee_owned () -> @owned Optional<Mirror>), scope 80 // id: %33

// %34                                            // users: %70, %66, %64
bb8(%34 : $@callee_owned () -> @owned Optional<Mirror>): // Preds: bb7 bb6 bb5
  %35 = alloc_stack $_Mirror, scope 80            // users: %53, %41, %39, %36
  copy_addr %0 to [initialization] %35 : $*_Mirror, scope 80 // id: %36
  %37 = alloc_stack $Mirror.LegacyChildren, scope 80 // users: %52, %49, %46, %42
  %38 = alloc_stack $Mirror.LegacyChildren, scope 80 // users: %45, %44, %42, %40
  debug_value_addr %35 : $*_Mirror, scope 80      // id: %39
  %40 = struct_element_addr %38 : $*Mirror.LegacyChildren, #Mirror.LegacyChildren._oldMirror, scope 80 // user: %41
  copy_addr [take] %35 to [initialization] %40 : $*_Mirror, scope 80 // id: %41
  copy_addr %38 to [initialization] %37 : $*Mirror.LegacyChildren, scope 80 // id: %42
  retain_value %2 : $Optional<() -> Optional<Mirror>>, scope 80 // id: %43
  destroy_addr %38 : $*Mirror.LegacyChildren, scope 80 // id: %44
  dealloc_stack %38 : $*Mirror.LegacyChildren, scope 80 // id: %45
  debug_value_addr %37 : $*Mirror.LegacyChildren, scope 80 // id: %46
  %47 = alloc_ref $_RandomAccessCollectionBox<Mirror.LegacyChildren>, scope 80 // user: %49
  // function_ref specialized _RandomAccessCollectionBox.init(_base : A) -> _RandomAccessCollectionBox<A>
  %48 = function_ref @_TTSgq5VVs6Mirror14LegacyChildrenS0_s22RandomAccessCollections___TFCs26_RandomAccessCollectionBoxcfT5_basex_GS_x_ : $@convention(method) (@in Mirror.LegacyChildren, @owned _RandomAccessCollectionBox<Mirror.LegacyChildren>) -> @owned _RandomAccessCollectionBox<Mirror.LegacyChildren>, scope 80 // user: %49
  %49 = apply %48(%37, %47) : $@convention(method) (@in Mirror.LegacyChildren, @owned _RandomAccessCollectionBox<Mirror.LegacyChildren>) -> @owned _RandomAccessCollectionBox<Mirror.LegacyChildren>, scope 80 // users: %69, %65, %50
  %50 = upcast %49 : $_RandomAccessCollectionBox<Mirror.LegacyChildren> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 80 // user: %51
  %51 = struct $AnyCollection<(label: Optional<String>, value: Any)> (%50 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>), scope 80 // user: %64
  dealloc_stack %37 : $*Mirror.LegacyChildren, scope 80 // id: %52
  dealloc_stack %35 : $*_Mirror, scope 80         // id: %53
  %54 = open_existential_addr %0 : $*_Mirror to $*@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 80 // users: %58, %57, %56, %55
  %55 = alloc_stack $@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 80 // users: %62, %59, %58, %56
  copy_addr %54 to [initialization] %55 : $*@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 80 // id: %56
  %57 = witness_method $@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror, #_Mirror.disposition!getter.1, %54 : $*@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> _MirrorDisposition, scope 80 // user: %58
  %58 = apply %57<@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror>(%55) : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> _MirrorDisposition, scope 80 // user: %61
  destroy_addr %55 : $*@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 80 // id: %59
  // function_ref specialized Mirror.DisplayStyle.init(legacy : _MirrorDisposition) -> Mirror.DisplayStyle?
  %60 = function_ref @_TTSfq4n_d___TFOVs6Mirror12DisplayStyleCfT6legacyOs18_MirrorDisposition_GSqS0__ : $@convention(thin) (_MirrorDisposition) -> Optional<Mirror.DisplayStyle>, scope 80 // user: %61
  %61 = apply %60(%58) : $@convention(thin) (_MirrorDisposition) -> Optional<Mirror.DisplayStyle>, scope 80 // user: %64
  dealloc_stack %55 : $*@opened("15509FB2-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 80 // id: %62
  %63 = enum $Mirror._DefaultDescendantRepresentation, #Mirror._DefaultDescendantRepresentation.generated!enumelt, scope 80 // user: %64
  %64 = struct $Mirror (%1 : $@thick Any.Type, %51 : $AnyCollection<(label: Optional<String>, value: Any)>, %61 : $Optional<Mirror.DisplayStyle>, %34 : $@callee_owned () -> @owned Optional<Mirror>, %63 : $Mirror._DefaultDescendantRepresentation), scope 80 // user: %71
  strong_retain %49 : $_RandomAccessCollectionBox<Mirror.LegacyChildren>, scope 80 // id: %65
  strong_retain %34 : $@callee_owned () -> @owned Optional<Mirror>, scope 80 // id: %66
  release_value %2 : $Optional<() -> Optional<Mirror>>, scope 80 // id: %67
  destroy_addr %0 : $*_Mirror, scope 80           // id: %68
  strong_release %49 : $_RandomAccessCollectionBox<Mirror.LegacyChildren>, scope 80 // id: %69
  strong_release %34 : $@callee_owned () -> @owned Optional<Mirror>, scope 80 // id: %70
  return %64 : $Mirror, scope 80                  // id: %71
}


// swift_OpaqueSummary
sil hidden_external [fragile] @swift_OpaqueSummary : $@convention(thin) (@thick Any.Type) -> Optional<UnsafePointer<Int8>>


// _swift_stdlib_strlen
sil [readonly] [clang _swift_stdlib_strlen] @_swift_stdlib_strlen : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int

sil_scope 81 {  parent @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult }
sil_scope 82 {  parent @_TTSgq5GSRVs5UInt8_GSRS__s13IndexableBases___TFVs16IndexingIterator4nextfT_GSqwx8_Element_ : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>) -> Optional<UInt8> }
sil_scope 83 {  parent 81 }
sil_scope 84 {  parent 82 inlined_at 83 }
sil_scope 85 {  parent @_TTSfq4n_s___TTSgq5Vs5UInt8___TFSRg9subscriptFSix : $@convention(thin) (Int, Optional<UnsafePointer<UInt8>>, Optional<UnsafePointer<UInt8>>) -> UInt8 }
sil_scope 86 {  parent 82 }
sil_scope 87 {  parent 85 inlined_at 86 }
sil_scope 88 {  parent 87 inlined_at 83 }

// specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
sil shared_external [fragile] @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult {
// %0                                             // users: %44, %41, %40, %120, %117, %116, %2
// %1                                             // users: %224, %184, %108, %12, %4, %3
bb0(%0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, %1 : $*UTF8):
  debug_value_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 81 // id: %2
  debug_value_addr %1 : $*UTF8, scope 81          // id: %3
  %4 = struct_element_addr %1 : $*UTF8, #UTF8._bitsInBuffer, scope 81 // users: %234, %195, %112, %35, %5
  %5 = struct_element_addr %4 : $*UInt8, #UInt8._value, scope 81 // users: %174, %6
  %6 = load %5 : $*Builtin.Int8, scope 81         // users: %21, %32, %8
  %7 = integer_literal $Builtin.Int8, 0, scope 81 // users: %201, %99, %8
  %8 = builtin "cmp_eq_Int8"(%6 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int1, scope 81 // user: %10
  %9 = integer_literal $Builtin.Int1, -1, scope 81 // users: %128, %249, %103, %91, %53, %222, %180, %168, %10
  %10 = builtin "int_expect_Int1"(%8 : $Builtin.Int1, %9 : $Builtin.Int1) : $Builtin.Int1, scope 81 // user: %11
  cond_br %10, bb4, bb1, scope 81                 // id: %11

bb1:                                              // Preds: bb0
  %12 = struct_element_addr %1 : $*UTF8, #UTF8._decodeBuffer, scope 81 // users: %29, %13
  %13 = struct_element_addr %12 : $*UInt32, #UInt32._value, scope 81 // user: %14
  %14 = load %13 : $*Builtin.Int32, scope 81      // users: %27, %23, %20, %16
  %15 = integer_literal $Builtin.Int32, 128, scope 81 // user: %16
  %16 = builtin "and_Int32"(%14 : $Builtin.Int32, %15 : $Builtin.Int32) : $Builtin.Int32, scope 81 // user: %18
  %17 = integer_literal $Builtin.Int32, 0, scope 81 // user: %18
  %18 = builtin "cmp_eq_Int32"(%16 : $Builtin.Int32, %17 : $Builtin.Int32) : $Builtin.Int1, scope 81 // user: %19
  cond_br %18, bb3, bb2, scope 81                 // id: %19

bb2:                                              // Preds: bb1
  %20 = struct $UInt32 (%14 : $Builtin.Int32), scope 81 // user: %21
  br bb16(%6 : $Builtin.Int8, %20 : $UInt32), scope 81 // id: %21

bb3:                                              // Preds: bb1
  %22 = integer_literal $Builtin.Int32, 255, scope 81 // user: %23
  %23 = builtin "and_Int32"(%14 : $Builtin.Int32, %22 : $Builtin.Int32) : $Builtin.Int32, scope 81 // user: %24
  %24 = struct $UInt32 (%23 : $Builtin.Int32), scope 81 // users: %37, %36, %25
  debug_value %24 : $UInt32, scope 81             // id: %25
  %26 = integer_literal $Builtin.Int32, 8, scope 81 // user: %27
  %27 = builtin "lshr_Int32"(%14 : $Builtin.Int32, %26 : $Builtin.Int32) : $Builtin.Int32, scope 81 // user: %28
  %28 = struct $UInt32 (%27 : $Builtin.Int32), scope 81 // user: %29
  store %28 to %12 : $*UInt32, scope 81           // id: %29
  %30 = integer_literal $Builtin.Int8, 8, scope 81 // user: %32
  %31 = integer_literal $Builtin.Int1, 0, scope 81 // user: %32
  %32 = builtin "usub_with_overflow_Int8"(%6 : $Builtin.Int8, %30 : $Builtin.Int8, %31 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1), scope 81 // user: %33
  %33 = tuple_extract %32 : $(Builtin.Int8, Builtin.Int1), 0, scope 81 // user: %34
  %34 = struct $UInt8 (%33 : $Builtin.Int8), scope 81 // user: %35
  store %34 to %4 : $*UInt8, scope 81             // id: %35
  debug_value %24 : $UInt32, scope 81             // id: %36
  %37 = struct $UnicodeScalar (%24 : $UInt32), scope 81 // user: %38
  %38 = enum $UnicodeDecodingResult, #UnicodeDecodingResult.scalarValue!enumelt.1, %37 : $UnicodeScalar, scope 81 // user: %39
  br bb35(%38 : $UnicodeDecodingResult), scope 81 // id: %39

bb4:                                              // Preds: bb0
  debug_value_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 84 // id: %40
  %41 = struct_element_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, #IndexingIterator._position, scope 84 // users: %96, %89, %42
  %42 = struct_element_addr %41 : $*Int, #Int._value, scope 84 // user: %43
  %43 = load %42 : $*Builtin.Int64, scope 84      // users: %102, %91, %85, %77
  %44 = struct_element_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, #IndexingIterator._elements, scope 84 // users: %47, %45
  %45 = struct_element_addr %44 : $*UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._position, scope 84 // user: %46
  %46 = load %45 : $*Optional<UnsafePointer<UInt8>>, scope 84 // users: %49, %82
  %47 = struct_element_addr %44 : $*UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._end, scope 84 // user: %48
  %48 = load %47 : $*Optional<UnsafePointer<UInt8>>, scope 84 // users: %52, %55
  switch_enum %46 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb5, case #Optional.none!enumelt: bb14, scope 84 // id: %49

// %50                                            // users: %58, %51
bb5(%50 : $UnsafePointer<UInt8>):                 // Preds: bb4
  debug_value %50 : $UnsafePointer<UInt8>, scope 84 // id: %51
  switch_enum %48 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb6, case #Optional.some!enumelt.1: bb7, scope 84 // id: %52

bb6:                                              // Preds: bb5
  cond_fail %9 : $Builtin.Int1, scope 84          // id: %53
  unreachable, scope 84                           // id: %54

bb7:                                              // Preds: bb5
  %55 = unchecked_enum_data %48 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, scope 84 // user: %56
  %56 = struct_extract %55 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 84 // user: %57
  %57 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word, scope 84 // user: %60
  %58 = struct_extract %50 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 84 // user: %59
  %59 = builtin "ptrtoint_Word"(%58 : $Builtin.RawPointer) : $Builtin.Word, scope 84 // user: %60
  %60 = builtin "sub_Word"(%57 : $Builtin.Word, %59 : $Builtin.Word) : $Builtin.Word, scope 84 // user: %61
  %61 = builtin "zextOrBitCast_Word_Int64"(%60 : $Builtin.Word) : $Builtin.Int64, scope 84 // users: %76, %69
  %62 = metatype $@thick UInt8.Type, scope 84     // user: %63
  %63 = builtin "strideof_nonzero"<UInt8>(%62 : $@thick UInt8.Type) : $Builtin.Word, scope 84 // user: %64
  %64 = builtin "zextOrBitCast_Word_Int64"(%63 : $Builtin.Word) : $Builtin.Int64, scope 84 // users: %76, %73, %66
  %65 = integer_literal $Builtin.Int64, 0, scope 84 // user: %66
  %66 = builtin "cmp_eq_Int64"(%64 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1, scope 84 // user: %67
  cond_fail %66 : $Builtin.Int1, scope 84         // id: %67
  %68 = integer_literal $Builtin.Int64, -9223372036854775808, scope 84 // user: %69
  %69 = builtin "cmp_eq_Int64"(%61 : $Builtin.Int64, %68 : $Builtin.Int64) : $Builtin.Int1, scope 84 // user: %70
  cond_br %69, bb9, bb8, scope 84                 // id: %70

bb8:                                              // Preds: bb7
  br bb10, scope 81                               // id: %71

bb9:                                              // Preds: bb7
  %72 = integer_literal $Builtin.Int64, -1, scope 84 // user: %73
  %73 = builtin "cmp_eq_Int64"(%64 : $Builtin.Int64, %72 : $Builtin.Int64) : $Builtin.Int1, scope 84 // user: %74
  cond_fail %73 : $Builtin.Int1, scope 84         // id: %74
  br bb10, scope 84                               // id: %75

bb10:                                             // Preds: bb8 bb9
  %76 = builtin "sdiv_Int64"(%61 : $Builtin.Int64, %64 : $Builtin.Int64) : $Builtin.Int64, scope 84 // user: %77
  %77 = builtin "cmp_eq_Int64"(%43 : $Builtin.Int64, %76 : $Builtin.Int64) : $Builtin.Int1, scope 84 // user: %78
  cond_br %77, bb11, bb13, scope 84               // id: %78

bb11:                                             // Preds: bb10
  br bb12, scope 81                               // id: %79

bb12:                                             // Preds: bb11 bb14
  %80 = enum $UnicodeDecodingResult, #UnicodeDecodingResult.emptyInput!enumelt, scope 81 // user: %81
  br bb35(%80 : $UnicodeDecodingResult), scope 81 // id: %81

bb13:                                             // Preds: bb10
  %82 = unchecked_enum_data %46 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, scope 88 // user: %83
  %83 = struct_extract %82 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 88 // user: %84
  %84 = pointer_to_address %83 : $Builtin.RawPointer to [strict] $*UInt8, scope 88 // user: %86
  %85 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word, scope 88 // user: %86
  %86 = index_addr %84 : $*UInt8, %85 : $Builtin.Word, scope 88 // user: %87
  %87 = struct_element_addr %86 : $*UInt8, #UInt8._value, scope 88 // user: %88
  %88 = load %87 : $*Builtin.Int8, scope 88       // users: %98, %106, %251
  debug_value_addr %41 : $*Int, scope 84          // id: %89
  %90 = integer_literal $Builtin.Int64, 1, scope 84 // user: %91
  %91 = builtin "sadd_with_overflow_Int64"(%43 : $Builtin.Int64, %90 : $Builtin.Int64, %9 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 84 // users: %93, %92
  %92 = tuple_extract %91 : $(Builtin.Int64, Builtin.Int1), 0, scope 84 // user: %95
  %93 = tuple_extract %91 : $(Builtin.Int64, Builtin.Int1), 1, scope 84 // user: %94
  cond_fail %93 : $Builtin.Int1, scope 84         // id: %94
  %95 = struct $Int (%92 : $Builtin.Int64), scope 84 // user: %96
  store %95 to %41 : $*Int, scope 84              // id: %96
  %97 = integer_literal $Builtin.Int8, -128, scope 81 // user: %98
  %98 = builtin "and_Int8"(%88 : $Builtin.Int8, %97 : $Builtin.Int8) : $Builtin.Int8, scope 81 // user: %99
  %99 = builtin "cmp_eq_Int8"(%98 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int1, scope 81 // user: %100
  cond_br %99, bb34, bb15, scope 81               // id: %100

bb14:                                             // Preds: bb4
  %101 = integer_literal $Builtin.Int64, 0, scope 84 // user: %102
  %102 = builtin "cmp_eq_Int64"(%43 : $Builtin.Int64, %101 : $Builtin.Int64) : $Builtin.Int1, scope 84 // user: %103
  %103 = builtin "xor_Int1"(%102 : $Builtin.Int1, %9 : $Builtin.Int1) : $Builtin.Int1, scope 84 // user: %104
  cond_fail %103 : $Builtin.Int1, scope 84        // id: %104
  br bb12, scope 84                               // id: %105

bb15:                                             // Preds: bb13
  %106 = builtin "zext_Int8_Int32"(%88 : $Builtin.Int8) : $Builtin.Int32, scope 81 // user: %107
  %107 = struct $UInt32 (%106 : $Builtin.Int32), scope 81 // users: %113, %109
  %108 = struct_element_addr %1 : $*UTF8, #UTF8._decodeBuffer, scope 81 // user: %109
  store %107 to %108 : $*UInt32, scope 81         // id: %109
  %110 = integer_literal $Builtin.Int8, 8, scope 81 // users: %113, %111
  %111 = struct $UInt8 (%110 : $Builtin.Int8), scope 81 // user: %112
  store %111 to %4 : $*UInt8, scope 81            // id: %112
  br bb16(%110 : $Builtin.Int8, %107 : $UInt32), scope 81 // id: %113

// %114                                           // users: %203, %201
// %115                                           // user: %203
bb16(%114 : $Builtin.Int8, %115 : $UInt32):       // Preds: bb15 bb2 bb26
  debug_value_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 81 // id: %116
  %117 = struct_element_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, #IndexingIterator._position, scope 81 // users: %173, %166, %118
  %118 = struct_element_addr %117 : $*Int, #Int._value, scope 81 // user: %119
  %119 = load %118 : $*Builtin.Int64, scope 81    // users: %168, %162, %156, %127
  %120 = struct_element_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, #IndexingIterator._elements, scope 81 // users: %123, %121
  %121 = struct_element_addr %120 : $*UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._position, scope 81 // user: %122
  %122 = load %121 : $*Optional<UnsafePointer<UInt8>>, scope 81 // users: %159, %125
  %123 = struct_element_addr %120 : $*UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._end, scope 81 // user: %124
  %124 = load %123 : $*Optional<UnsafePointer<UInt8>>, scope 81 // users: %134, %133
  switch_enum %122 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb18, case #Optional.none!enumelt: bb17, scope 81 // id: %125

bb17:                                             // Preds: bb16
  %126 = integer_literal $Builtin.Int64, 0, scope 81 // user: %127
  %127 = builtin "cmp_eq_Int64"(%119 : $Builtin.Int64, %126 : $Builtin.Int64) : $Builtin.Int1, scope 81 // user: %128
  %128 = builtin "xor_Int1"(%127 : $Builtin.Int1, %9 : $Builtin.Int1) : $Builtin.Int1, scope 81 // user: %129
  cond_fail %128 : $Builtin.Int1, scope 81        // id: %129
  br bb27, scope 81                               // id: %130

// %131                                           // users: %137, %132
bb18(%131 : $UnsafePointer<UInt8>):               // Preds: bb16
  debug_value %131 : $UnsafePointer<UInt8>, scope 81 // id: %132
  switch_enum %124 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb33, case #Optional.some!enumelt.1: bb19, scope 81 // id: %133

bb19:                                             // Preds: bb18
  %134 = unchecked_enum_data %124 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, scope 81 // user: %135
  %135 = struct_extract %134 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 81 // user: %136
  %136 = builtin "ptrtoint_Word"(%135 : $Builtin.RawPointer) : $Builtin.Word, scope 81 // user: %139
  %137 = struct_extract %131 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 81 // user: %138
  %138 = builtin "ptrtoint_Word"(%137 : $Builtin.RawPointer) : $Builtin.Word, scope 81 // user: %139
  %139 = builtin "sub_Word"(%136 : $Builtin.Word, %138 : $Builtin.Word) : $Builtin.Word, scope 81 // user: %140
  %140 = builtin "zextOrBitCast_Word_Int64"(%139 : $Builtin.Word) : $Builtin.Int64, scope 81 // users: %155, %148
  %141 = metatype $@thick UInt8.Type, scope 81    // user: %142
  %142 = builtin "strideof_nonzero"<UInt8>(%141 : $@thick UInt8.Type) : $Builtin.Word, scope 81 // user: %143
  %143 = builtin "zextOrBitCast_Word_Int64"(%142 : $Builtin.Word) : $Builtin.Int64, scope 81 // users: %155, %152, %145
  %144 = integer_literal $Builtin.Int64, 0, scope 81 // user: %145
  %145 = builtin "cmp_eq_Int64"(%143 : $Builtin.Int64, %144 : $Builtin.Int64) : $Builtin.Int1, scope 81 // user: %146
  cond_fail %145 : $Builtin.Int1, scope 81        // id: %146
  %147 = integer_literal $Builtin.Int64, -9223372036854775808, scope 81 // user: %148
  %148 = builtin "cmp_eq_Int64"(%140 : $Builtin.Int64, %147 : $Builtin.Int64) : $Builtin.Int1, scope 81 // user: %149
  cond_br %148, bb21, bb20, scope 81              // id: %149

bb20:                                             // Preds: bb19
  br bb22, scope 81                               // id: %150

bb21:                                             // Preds: bb19
  %151 = integer_literal $Builtin.Int64, -1, scope 81 // user: %152
  %152 = builtin "cmp_eq_Int64"(%143 : $Builtin.Int64, %151 : $Builtin.Int64) : $Builtin.Int1, scope 81 // user: %153
  cond_fail %152 : $Builtin.Int1, scope 81        // id: %153
  br bb22, scope 81                               // id: %154

bb22:                                             // Preds: bb20 bb21
  %155 = builtin "sdiv_Int64"(%140 : $Builtin.Int64, %143 : $Builtin.Int64) : $Builtin.Int64, scope 81 // user: %156
  %156 = builtin "cmp_eq_Int64"(%119 : $Builtin.Int64, %155 : $Builtin.Int64) : $Builtin.Int1, scope 81 // user: %157
  cond_br %156, bb23, bb24, scope 81              // id: %157

bb23:                                             // Preds: bb22
  br bb27, scope 81                               // id: %158

bb24:                                             // Preds: bb22
  %159 = unchecked_enum_data %122 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, scope 81 // user: %160
  %160 = struct_extract %159 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 81 // user: %161
  %161 = pointer_to_address %160 : $Builtin.RawPointer to [strict] $*UInt8, scope 81 // user: %163
  %162 = builtin "truncOrBitCast_Int64_Word"(%119 : $Builtin.Int64) : $Builtin.Word, scope 81 // user: %163
  %163 = index_addr %161 : $*UInt8, %162 : $Builtin.Word, scope 81 // user: %164
  %164 = struct_element_addr %163 : $*UInt8, #UInt8._value, scope 81 // user: %165
  %165 = load %164 : $*Builtin.Int8, scope 81     // user: %182
  debug_value_addr %117 : $*Int, scope 81         // id: %166
  %167 = integer_literal $Builtin.Int64, 1, scope 81 // user: %168
  %168 = builtin "sadd_with_overflow_Int64"(%119 : $Builtin.Int64, %167 : $Builtin.Int64, %9 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 81 // users: %170, %169
  %169 = tuple_extract %168 : $(Builtin.Int64, Builtin.Int1), 0, scope 81 // user: %172
  %170 = tuple_extract %168 : $(Builtin.Int64, Builtin.Int1), 1, scope 81 // user: %171
  cond_fail %170 : $Builtin.Int1, scope 81        // id: %171
  %172 = struct $Int (%169 : $Builtin.Int64), scope 81 // user: %173
  store %172 to %117 : $*Int, scope 81            // id: %173
  %174 = load %5 : $*Builtin.Int8, scope 81       // users: %192, %176
  %175 = integer_literal $Builtin.Int8, 31, scope 81 // user: %176
  %176 = builtin "and_Int8"(%174 : $Builtin.Int8, %175 : $Builtin.Int8) : $Builtin.Int8, scope 81 // user: %177
  %177 = builtin "zext_Int8_Int32"(%176 : $Builtin.Int8) : $Builtin.Int32, scope 81 // users: %183, %179
  %178 = integer_literal $Builtin.Int32, 32, scope 81 // user: %179
  %179 = builtin "cmp_ult_Int32"(%177 : $Builtin.Int32, %178 : $Builtin.Int32) : $Builtin.Int1, scope 81 // user: %180
  %180 = builtin "xor_Int1"(%179 : $Builtin.Int1, %9 : $Builtin.Int1) : $Builtin.Int1, scope 81 // user: %181
  cond_fail %180 : $Builtin.Int1, scope 81        // id: %181
  %182 = builtin "zext_Int8_Int32"(%165 : $Builtin.Int8) : $Builtin.Int32, scope 81 // user: %183
  %183 = builtin "shl_Int32"(%182 : $Builtin.Int32, %177 : $Builtin.Int32) : $Builtin.Int32, scope 81 // user: %187
  %184 = struct_element_addr %1 : $*UTF8, #UTF8._decodeBuffer, scope 81 // users: %189, %185
  %185 = struct_element_addr %184 : $*UInt32, #UInt32._value, scope 81 // user: %186
  %186 = load %185 : $*Builtin.Int32, scope 81    // user: %187
  %187 = builtin "or_Int32"(%186 : $Builtin.Int32, %183 : $Builtin.Int32) : $Builtin.Int32, scope 81 // user: %188
  %188 = struct $UInt32 (%187 : $Builtin.Int32), scope 81 // users: %200, %199, %189
  store %188 to %184 : $*UInt32, scope 81         // id: %189
  %190 = integer_literal $Builtin.Int8, 8, scope 81 // user: %192
  %191 = integer_literal $Builtin.Int1, 0, scope 81 // user: %192
  %192 = builtin "uadd_with_overflow_Int8"(%174 : $Builtin.Int8, %190 : $Builtin.Int8, %191 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1), scope 81 // user: %193
  %193 = tuple_extract %192 : $(Builtin.Int8, Builtin.Int1), 0, scope 81 // users: %200, %199, %197, %194
  %194 = struct $UInt8 (%193 : $Builtin.Int8), scope 81 // user: %195
  store %194 to %4 : $*UInt8, scope 81            // id: %195
  %196 = integer_literal $Builtin.Int8, 32, scope 81 // user: %197
  %197 = builtin "cmp_ult_Int8"(%193 : $Builtin.Int8, %196 : $Builtin.Int8) : $Builtin.Int1, scope 81 // user: %198
  cond_br %197, bb26, bb25, scope 81              // id: %198

bb25:                                             // Preds: bb24
  br bb29(%193 : $Builtin.Int8, %188 : $UInt32), scope 81 // id: %199

bb26:                                             // Preds: bb24
  br bb16(%193 : $Builtin.Int8, %188 : $UInt32), scope 81 // id: %200

bb27:                                             // Preds: bb23 bb17
  %201 = builtin "cmp_eq_Int8"(%114 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int1, scope 81 // user: %202
  cond_br %201, bb32, bb28, scope 81              // id: %202

bb28:                                             // Preds: bb27
  br bb29(%114 : $Builtin.Int8, %115 : $UInt32), scope 81 // id: %203

// %204                                           // user: %231
// %205                                           // users: %225, %207
bb29(%204 : $Builtin.Int8, %205 : $UInt32):       // Preds: bb28 bb25
  // function_ref specialized static UTF8._decodeOne(UInt32) -> (result : UInt32?, length : UInt8)
  %206 = function_ref @_TTSfq4n_d___TZFVs4UTF810_decodeOnefVs6UInt32T6resultGSqS0__6lengthVs5UInt8_ : $@convention(thin) (UInt32) -> (Optional<UInt32>, UInt8), scope 81 // user: %207
  %207 = apply %206(%205) : $@convention(thin) (UInt32) -> (Optional<UInt32>, UInt8), scope 81 // users: %209, %208
  %208 = tuple_extract %207 : $(Optional<UInt32>, UInt8), 0, scope 81 // users: %240, %239, %238, %237, %236, %235, %210
  %209 = tuple_extract %207 : $(Optional<UInt32>, UInt8), 1, scope 81 // users: %213, %211
  debug_value %208 : $Optional<UInt32>, scope 81  // id: %210
  debug_value %209 : $UInt8, scope 81             // id: %211
  %212 = integer_literal $Builtin.Int8, 8, scope 81 // user: %215
  %213 = struct_extract %209 : $UInt8, #UInt8._value, scope 81 // user: %215
  %214 = integer_literal $Builtin.Int1, 0, scope 81 // users: %231, %215
  %215 = builtin "umul_with_overflow_Int8"(%212 : $Builtin.Int8, %213 : $Builtin.Int8, %214 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1), scope 81 // user: %216
  %216 = tuple_extract %215 : $(Builtin.Int8, Builtin.Int1), 0, scope 81 // users: %231, %217
  %217 = builtin "zext_Int8_Int64"(%216 : $Builtin.Int8) : $Builtin.Int64, scope 81 // user: %219
  %218 = integer_literal $Builtin.Int64, 63, scope 81 // user: %219
  %219 = builtin "and_Int64"(%217 : $Builtin.Int64, %218 : $Builtin.Int64) : $Builtin.Int64, scope 81 // users: %227, %221
  %220 = integer_literal $Builtin.Int64, 64, scope 81 // user: %221
  %221 = builtin "cmp_ult_Int64"(%219 : $Builtin.Int64, %220 : $Builtin.Int64) : $Builtin.Int1, scope 81 // user: %222
  %222 = builtin "xor_Int1"(%221 : $Builtin.Int1, %9 : $Builtin.Int1) : $Builtin.Int1, scope 81 // user: %223
  cond_fail %222 : $Builtin.Int1, scope 81        // id: %223
  %224 = struct_element_addr %1 : $*UTF8, #UTF8._decodeBuffer, scope 81 // user: %230
  %225 = struct_extract %205 : $UInt32, #UInt32._value, scope 81 // user: %226
  %226 = builtin "zext_Int32_Int64"(%225 : $Builtin.Int32) : $Builtin.Int64, scope 81 // user: %227
  %227 = builtin "lshr_Int64"(%226 : $Builtin.Int64, %219 : $Builtin.Int64) : $Builtin.Int64, scope 81 // user: %228
  %228 = builtin "trunc_Int64_Int32"(%227 : $Builtin.Int64) : $Builtin.Int32, scope 81 // user: %229
  %229 = struct $UInt32 (%228 : $Builtin.Int32), scope 81 // user: %230
  store %229 to %224 : $*UInt32, scope 81         // id: %230
  %231 = builtin "usub_with_overflow_Int8"(%204 : $Builtin.Int8, %216 : $Builtin.Int8, %214 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1), scope 81 // user: %232
  %232 = tuple_extract %231 : $(Builtin.Int8, Builtin.Int1), 0, scope 81 // user: %233
  %233 = struct $UInt8 (%232 : $Builtin.Int8), scope 81 // user: %234
  store %233 to %4 : $*UInt8, scope 81            // id: %234
  debug_value %208 : $Optional<UInt32>, scope 81  // id: %235
  debug_value %208 : $Optional<UInt32>, scope 81  // id: %236
  debug_value %208 : $Optional<UInt32>, scope 81  // id: %237
  debug_value %208 : $Optional<UInt32>, scope 81  // id: %238
  switch_enum %208 : $Optional<UInt32>, case #Optional.none!enumelt: bb31, case #Optional.some!enumelt.1: bb30, scope 81 // id: %239

bb30:                                             // Preds: bb29
  %240 = unchecked_enum_data %208 : $Optional<UInt32>, #Optional.some!enumelt.1, scope 81 // users: %242, %241
  debug_value %240 : $UInt32, scope 81            // id: %241
  %242 = struct $UnicodeScalar (%240 : $UInt32), scope 81 // user: %243
  %243 = enum $UnicodeDecodingResult, #UnicodeDecodingResult.scalarValue!enumelt.1, %242 : $UnicodeScalar, scope 81 // user: %244
  br bb35(%243 : $UnicodeDecodingResult), scope 81 // id: %244

bb31:                                             // Preds: bb29
  %245 = enum $UnicodeDecodingResult, #UnicodeDecodingResult.error!enumelt, scope 81 // user: %246
  br bb35(%245 : $UnicodeDecodingResult), scope 81 // id: %246

bb32:                                             // Preds: bb27
  %247 = enum $UnicodeDecodingResult, #UnicodeDecodingResult.emptyInput!enumelt, scope 81 // user: %248
  br bb35(%247 : $UnicodeDecodingResult), scope 81 // id: %248

bb33:                                             // Preds: bb18
  cond_fail %9 : $Builtin.Int1, scope 81          // id: %249
  unreachable, scope 81                           // id: %250

bb34:                                             // Preds: bb13
  %251 = builtin "zext_Int8_Int32"(%88 : $Builtin.Int8) : $Builtin.Int32, scope 81 // user: %252
  %252 = struct $UInt32 (%251 : $Builtin.Int32), scope 81 // users: %254, %253
  debug_value %252 : $UInt32, scope 81            // id: %253
  %254 = struct $UnicodeScalar (%252 : $UInt32), scope 81 // user: %255
  %255 = enum $UnicodeDecodingResult, #UnicodeDecodingResult.scalarValue!enumelt.1, %254 : $UnicodeScalar, scope 81 // user: %256
  br bb35(%255 : $UnicodeDecodingResult), scope 81 // id: %256

// %257                                           // user: %258
bb35(%257 : $UnicodeDecodingResult):              // Preds: bb34 bb32 bb31 bb30 bb12 bb3
  return %257 : $UnicodeDecodingResult, scope 81  // id: %258
}


// swift_getTypeName
sil @swift_getTypeName : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int)

sil_scope 89 {  parent @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer }
sil_scope 90 {  parent @_TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferau5valuex : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> UnsafeMutablePointer<_StringBufferIVars> }
sil_scope 91 {  parent 89 }
sil_scope 92 {  parent 90 inlined_at 91 }
sil_scope 93 {  parent @_TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBuffer9_capacityfT_Si : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> Int }
sil_scope 94 {  parent 89 }
sil_scope 95 {  parent 93 inlined_at 94 }

// specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
sil public_external [fragile] @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer {
// %0                                             // users: %18, %3
// %1                                             // users: %103, %80, %61, %4
// %2                                             // users: %13, %7, %5
bb0(%0 : $Int, %1 : $Int, %2 : $Int):
  debug_value %0 : $Int, scope 89                 // id: %3
  debug_value %1 : $Int, scope 89                 // id: %4
  debug_value %2 : $Int, scope 89                 // id: %5
  %6 = integer_literal $Builtin.Int64, 1, scope 89 // users: %122, %124, %171, %15, %11, %9
  %7 = struct_extract %2 : $Int, #Int._value, scope 89 // users: %15, %9
  %8 = integer_literal $Builtin.Int1, 0, scope 89 // users: %122, %124, %11, %9
  %9 = builtin "ssub_with_overflow_Int64"(%7 : $Builtin.Int64, %6 : $Builtin.Int64, %8 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 89 // user: %10
  %10 = tuple_extract %9 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // users: %172, %104, %92, %46, %11
  %11 = builtin "ssub_with_overflow_Int64"(%6 : $Builtin.Int64, %10 : $Builtin.Int64, %8 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 89 // user: %12
  %12 = tuple_extract %11 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // users: %167, %39, %26, %23, %19
  debug_value %2 : $Int, scope 89                 // id: %13
  %14 = integer_literal $Builtin.Int1, -1, scope 89 // users: %65, %149, %118, %181, %183, %172, %167, %97, %32, %23, %19, %15
  %15 = builtin "ssub_with_overflow_Int64"(%7 : $Builtin.Int64, %6 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 89 // users: %37, %16
  %16 = tuple_extract %15 : $(Builtin.Int64, Builtin.Int1), 1, scope 89 // user: %17
  cond_fail %16 : $Builtin.Int1, scope 89         // id: %17
  %18 = struct_extract %0 : $Int, #Int._value, scope 89 // user: %19
  %19 = builtin "sadd_with_overflow_Int64"(%18 : $Builtin.Int64, %12 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 89 // users: %21, %20
  %20 = tuple_extract %19 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // user: %23
  %21 = tuple_extract %19 : $(Builtin.Int64, Builtin.Int1), 1, scope 89 // user: %22
  cond_fail %21 : $Builtin.Int1, scope 89         // id: %22
  %23 = builtin "sadd_with_overflow_Int64"(%20 : $Builtin.Int64, %12 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 89 // users: %38, %24
  %24 = tuple_extract %23 : $(Builtin.Int64, Builtin.Int1), 1, scope 89 // user: %25
  cond_fail %24 : $Builtin.Int1, scope 89         // id: %25
  %26 = builtin "s_to_u_checked_conversion_Int64"(%12 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 89 // users: %28, %27
  %27 = tuple_extract %26 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // user: %31
  %28 = tuple_extract %26 : $(Builtin.Int64, Builtin.Int1), 1, scope 89 // user: %29
  cond_fail %28 : $Builtin.Int1, scope 89         // id: %29
  %30 = integer_literal $Builtin.Int64, 64, scope 89 // users: %96, %31
  %31 = builtin "cmp_ult_Int64"(%27 : $Builtin.Int64, %30 : $Builtin.Int64) : $Builtin.Int1, scope 89 // user: %32
  %32 = builtin "xor_Int1"(%31 : $Builtin.Int1, %14 : $Builtin.Int1) : $Builtin.Int1, scope 89 // user: %33
  cond_fail %32 : $Builtin.Int1, scope 89         // id: %33
  %34 = metatype $@thick _HeapBufferStorage<_StringBufferIVars, UInt16>.Type, scope 89 // user: %35
  %35 = init_existential_metatype %34 : $@thick _HeapBufferStorage<_StringBufferIVars, UInt16>.Type, $@thick AnyObject.Type, scope 89 // user: %44
  %36 = enum $Optional<UnsafeMutableRawPointer>, #Optional.none!enumelt, scope 89 // user: %42
  %37 = tuple_extract %15 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // user: %41
  %38 = tuple_extract %23 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // user: %39
  %39 = builtin "ashr_Int64"(%38 : $Builtin.Int64, %12 : $Builtin.Int64) : $Builtin.Int64, scope 89 // user: %40
  %40 = struct $Int (%39 : $Builtin.Int64), scope 89 // user: %44
  %41 = struct $Int (%37 : $Builtin.Int64), scope 89 // user: %42
  %42 = struct $_StringBufferIVars (%36 : $Optional<UnsafeMutableRawPointer>, %41 : $Int), scope 89 // user: %44
  // function_ref specialized specialized _HeapBuffer.init(AnyObject.Type, A, Int) -> _HeapBuffer<A, B>
  %43 = function_ref @_TTSfq4n_n_n_d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferCfTPMPs9AnyObject_xSi_GS_xq__ : $@convention(thin) (@thick AnyObject.Type, _StringBufferIVars, Int) -> @owned _HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // user: %44
  %44 = apply %43(%35, %42, %40) : $@convention(thin) (@thick AnyObject.Type, _StringBufferIVars, Int) -> @owned _HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // users: %143, %142, %141, %140, %133, %132, %111, %110, %179, %89, %88, %85, %84, %72, %71, %68, %67, %53, %52, %49, %48
  %45 = integer_literal $Builtin.Int64, 0, scope 89 // users: %156, %46
  %46 = builtin "cmp_eq_Int64"(%10 : $Builtin.Int64, %45 : $Builtin.Int64) : $Builtin.Int1, scope 89 // user: %47
  cond_br %46, bb4, bb1, scope 89                 // id: %47

bb1:                                              // Preds: bb0
  %48 = struct_extract %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 89 // users: %55, %54
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %49
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %50 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 89 // user: %51
  %51 = apply %50() : $@convention(thin) () -> Int, scope 89 // users: %58, %57
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %52
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %53
  switch_enum %48 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb3, case #Optional.some!enumelt.1: bb2, scope 89 // id: %54

bb2:                                              // Preds: bb1
  %55 = unchecked_enum_data %48 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 89 // user: %56
  %56 = ref_to_raw_pointer %55 : $Builtin.NativeObject to $Builtin.RawPointer, scope 89 // user: %60
  %57 = struct_extract %51 : $Int, #Int._value, scope 89 // user: %59
  debug_value %51 : $Int, scope 89                // id: %58
  %59 = builtin "truncOrBitCast_Int64_Word"(%57 : $Builtin.Int64) : $Builtin.Word, scope 89 // user: %60
  %60 = index_raw_pointer %56 : $Builtin.RawPointer, %59 : $Builtin.Word, scope 89 // user: %63
  %61 = struct_extract %1 : $Int, #Int._value, scope 89 // user: %62
  %62 = builtin "truncOrBitCast_Int64_Word"(%61 : $Builtin.Int64) : $Builtin.Word, scope 89 // user: %63
  bind_memory %60 : $Builtin.RawPointer, %62 : $Builtin.Word to $*UInt16, scope 89 // id: %63
  br bb6, scope 89                                // id: %64

bb3:                                              // Preds: bb1
  cond_fail %14 : $Builtin.Int1, scope 89         // id: %65
  unreachable, scope 89                           // id: %66

bb4:                                              // Preds: bb0
  %67 = struct_extract %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 89 // users: %74, %73
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %68
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %69 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 89 // user: %70
  %70 = apply %69() : $@convention(thin) () -> Int, scope 89 // users: %77, %76
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %71
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %72
  switch_enum %67 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb12, case #Optional.some!enumelt.1: bb5, scope 89 // id: %73

bb5:                                              // Preds: bb4
  %74 = unchecked_enum_data %67 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 89 // user: %75
  %75 = ref_to_raw_pointer %74 : $Builtin.NativeObject to $Builtin.RawPointer, scope 89 // user: %79
  %76 = struct_extract %70 : $Int, #Int._value, scope 89 // user: %78
  debug_value %70 : $Int, scope 89                // id: %77
  %78 = builtin "truncOrBitCast_Int64_Word"(%76 : $Builtin.Int64) : $Builtin.Word, scope 89 // user: %79
  %79 = index_raw_pointer %75 : $Builtin.RawPointer, %78 : $Builtin.Word, scope 89 // user: %82
  %80 = struct_extract %1 : $Int, #Int._value, scope 89 // user: %81
  %81 = builtin "truncOrBitCast_Int64_Word"(%80 : $Builtin.Int64) : $Builtin.Word, scope 89 // user: %82
  bind_memory %79 : $Builtin.RawPointer, %81 : $Builtin.Word to $*UInt8, scope 89 // id: %82
  br bb6, scope 89                                // id: %83

bb6:                                              // Preds: bb5 bb2
  %84 = struct_extract %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 89 // users: %98, %90
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %85
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %86 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 89 // user: %87
  %87 = apply %86() : $@convention(thin) () -> Int, scope 89 // users: %100, %91
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %88
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 89 // id: %89
  switch_enum %84 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb11, case #Optional.some!enumelt.1: bb7, scope 89 // id: %90

bb7:                                              // Preds: bb6
  debug_value %87 : $Int, scope 89                // id: %91
  %92 = builtin "s_to_u_checked_conversion_Int64"(%10 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 89 // users: %94, %93
  %93 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // user: %96
  %94 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 1, scope 89 // user: %95
  cond_fail %94 : $Builtin.Int1, scope 89         // id: %95
  %96 = builtin "cmp_ult_Int64"(%93 : $Builtin.Int64, %30 : $Builtin.Int64) : $Builtin.Int1, scope 89 // user: %97
  %97 = builtin "xor_Int1"(%96 : $Builtin.Int1, %14 : $Builtin.Int1) : $Builtin.Int1, scope 89 // user: %157
  %98 = unchecked_enum_data %84 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 89 // user: %99
  %99 = ref_to_raw_pointer %98 : $Builtin.NativeObject to $Builtin.RawPointer, scope 89 // users: %145, %136, %102
  %100 = struct_extract %87 : $Int, #Int._value, scope 89 // users: %149, %101
  %101 = builtin "truncOrBitCast_Int64_Word"(%100 : $Builtin.Int64) : $Builtin.Word, scope 89 // user: %102
  %102 = index_raw_pointer %99 : $Builtin.RawPointer, %101 : $Builtin.Word, scope 89 // user: %106
  %103 = struct_extract %1 : $Int, #Int._value, scope 89 // user: %104
  %104 = builtin "shl_Int64"(%103 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64, scope 89 // user: %105
  %105 = builtin "truncOrBitCast_Int64_Word"(%104 : $Builtin.Int64) : $Builtin.Word, scope 89 // user: %106
  %106 = index_raw_pointer %102 : $Builtin.RawPointer, %105 : $Builtin.Word, scope 89 // user: %107
  %107 = struct $UnsafeMutableRawPointer (%106 : $Builtin.RawPointer), scope 89 // users: %109, %108
  debug_value %107 : $UnsafeMutableRawPointer, scope 89 // id: %108
  %109 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %107 : $UnsafeMutableRawPointer, scope 89 // user: %139
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 92 // id: %110
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 92 // id: %111
  %112 = metatype $@thick HeapObject.Type, scope 92 // user: %113
  %113 = builtin "sizeof"<HeapObject>(%112 : $@thick HeapObject.Type) : $Builtin.Word, scope 92 // user: %114
  %114 = builtin "zextOrBitCast_Word_Int64"(%113 : $Builtin.Word) : $Builtin.Int64, scope 92 // user: %118
  %115 = metatype $@thick _StringBufferIVars.Type, scope 92 // user: %116
  %116 = builtin "alignof"<_StringBufferIVars>(%115 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 92 // user: %117
  %117 = builtin "zextOrBitCast_Word_Int64"(%116 : $Builtin.Word) : $Builtin.Int64, scope 92 // users: %124, %118
  %118 = builtin "uadd_with_overflow_Int64"(%114 : $Builtin.Int64, %117 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 92 // users: %120, %119
  %119 = tuple_extract %118 : $(Builtin.Int64, Builtin.Int1), 0, scope 92 // user: %122
  %120 = tuple_extract %118 : $(Builtin.Int64, Builtin.Int1), 1, scope 92 // user: %121
  cond_fail %120 : $Builtin.Int1, scope 92        // id: %121
  %122 = builtin "usub_with_overflow_Int64"(%119 : $Builtin.Int64, %6 : $Builtin.Int64, %8 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 92 // user: %123
  %123 = tuple_extract %122 : $(Builtin.Int64, Builtin.Int1), 0, scope 92 // user: %128
  %124 = builtin "usub_with_overflow_Int64"(%117 : $Builtin.Int64, %6 : $Builtin.Int64, %8 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 92 // user: %125
  %125 = tuple_extract %124 : $(Builtin.Int64, Builtin.Int1), 0, scope 92 // user: %127
  %126 = integer_literal $Builtin.Int64, -1, scope 92 // users: %163, %127
  %127 = builtin "xor_Int64"(%125 : $Builtin.Int64, %126 : $Builtin.Int64) : $Builtin.Int64, scope 92 // user: %128
  %128 = builtin "and_Int64"(%123 : $Builtin.Int64, %127 : $Builtin.Int64) : $Builtin.Int64, scope 92 // user: %129
  %129 = builtin "u_to_s_checked_conversion_Int64"(%128 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 92 // users: %134, %130
  %130 = tuple_extract %129 : $(Builtin.Int64, Builtin.Int1), 1, scope 92 // user: %131
  cond_fail %130 : $Builtin.Int1, scope 92        // id: %131
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 92 // id: %132
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 92 // id: %133
  %134 = tuple_extract %129 : $(Builtin.Int64, Builtin.Int1), 0, scope 92 // user: %135
  %135 = builtin "truncOrBitCast_Int64_Word"(%134 : $Builtin.Int64) : $Builtin.Word, scope 92 // user: %136
  %136 = index_raw_pointer %99 : $Builtin.RawPointer, %135 : $Builtin.Word, scope 92 // user: %137
  %137 = pointer_to_address %136 : $Builtin.RawPointer to [strict] $*_StringBufferIVars, scope 89 // users: %177, %138
  %138 = struct_element_addr %137 : $*_StringBufferIVars, #_StringBufferIVars.usedEnd, scope 89 // user: %139
  store %109 to %138 : $*Optional<UnsafeMutableRawPointer>, scope 89 // id: %139
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 95 // id: %140
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 95 // id: %141
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 95 // id: %142
  debug_value %44 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 95 // id: %143
  // function_ref _swift_stdlib_malloc_size
  %144 = function_ref @_swift_stdlib_malloc_size : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafeRawPointer>) -> Int, scope 95 // user: %147
  %145 = struct $UnsafeRawPointer (%99 : $Builtin.RawPointer), scope 95 // user: %146
  %146 = enum $ImplicitlyUnwrappedOptional<UnsafeRawPointer>, #ImplicitlyUnwrappedOptional.some!enumelt.1, %145 : $UnsafeRawPointer, scope 95 // user: %147
  %147 = apply %144(%146) : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafeRawPointer>) -> Int, scope 95 // user: %148
  %148 = struct_extract %147 : $Int, #Int._value, scope 95 // user: %149
  %149 = builtin "ssub_with_overflow_Int64"(%148 : $Builtin.Int64, %100 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 95 // users: %151, %150
  %150 = tuple_extract %149 : $(Builtin.Int64, Builtin.Int1), 0, scope 95 // users: %166, %160
  %151 = tuple_extract %149 : $(Builtin.Int64, Builtin.Int1), 1, scope 95 // user: %152
  cond_fail %151 : $Builtin.Int1, scope 95        // id: %152
  %153 = metatype $@thick UInt16.Type, scope 95   // user: %154
  %154 = builtin "strideof_nonzero"<UInt16>(%153 : $@thick UInt16.Type) : $Builtin.Word, scope 95 // user: %155
  %155 = builtin "zextOrBitCast_Word_Int64"(%154 : $Builtin.Word) : $Builtin.Int64, scope 95 // users: %166, %163, %156
  %156 = builtin "cmp_eq_Int64"(%155 : $Builtin.Int64, %45 : $Builtin.Int64) : $Builtin.Int1, scope 95 // user: %157
  %157 = builtin "or_Int1"(%97 : $Builtin.Int1, %156 : $Builtin.Int1) : $Builtin.Int1, scope 95 // user: %158
  cond_fail %157 : $Builtin.Int1, scope 95        // id: %158
  %159 = integer_literal $Builtin.Int64, -9223372036854775808, scope 95 // user: %160
  %160 = builtin "cmp_eq_Int64"(%150 : $Builtin.Int64, %159 : $Builtin.Int64) : $Builtin.Int1, scope 95 // user: %161
  cond_br %160, bb9, bb8, scope 95                // id: %161

bb8:                                              // Preds: bb7
  br bb10, scope 89                               // id: %162

bb9:                                              // Preds: bb7
  %163 = builtin "cmp_eq_Int64"(%155 : $Builtin.Int64, %126 : $Builtin.Int64) : $Builtin.Int1, scope 95 // user: %164
  cond_fail %163 : $Builtin.Int1, scope 95        // id: %164
  br bb10, scope 95                               // id: %165

bb10:                                             // Preds: bb8 bb9
  %166 = builtin "sdiv_Int64"(%150 : $Builtin.Int64, %155 : $Builtin.Int64) : $Builtin.Int64, scope 95 // user: %167
  %167 = builtin "ssub_with_overflow_Int64"(%166 : $Builtin.Int64, %12 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 89 // users: %169, %168
  %168 = tuple_extract %167 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // user: %171
  %169 = tuple_extract %167 : $(Builtin.Int64, Builtin.Int1), 1, scope 89 // user: %170
  cond_fail %169 : $Builtin.Int1, scope 89        // id: %170
  %171 = builtin "shl_Int64"(%168 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int64, scope 89 // user: %172
  %172 = builtin "sadd_with_overflow_Int64"(%171 : $Builtin.Int64, %10 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 89 // users: %174, %173
  %173 = tuple_extract %172 : $(Builtin.Int64, Builtin.Int1), 0, scope 89 // user: %176
  %174 = tuple_extract %172 : $(Builtin.Int64, Builtin.Int1), 1, scope 89 // user: %175
  cond_fail %174 : $Builtin.Int1, scope 89        // id: %175
  %176 = struct $Int (%173 : $Builtin.Int64), scope 89 // user: %178
  %177 = struct_element_addr %137 : $*_StringBufferIVars, #_StringBufferIVars.capacityAndElementShift, scope 89 // user: %178
  store %176 to %177 : $*Int, scope 89            // id: %178
  %179 = struct $_StringBuffer (%44 : $_HeapBuffer<_StringBufferIVars, UInt16>), scope 89 // user: %180
  return %179 : $_StringBuffer, scope 89          // id: %180

bb11:                                             // Preds: bb6
  cond_fail %14 : $Builtin.Int1, scope 89         // id: %181
  unreachable, scope 89                           // id: %182

bb12:                                             // Preds: bb4
  cond_fail %14 : $Builtin.Int1, scope 89         // id: %183
  unreachable, scope 89                           // id: %184
}

sil_scope 96 {  parent @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int }

// specialized specialized static _HeapBuffer._elementOffset() -> Int
sil shared_external [fragile] @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int {
bb0:
  %0 = metatype $@thick HeapObject.Type, scope 96 // user: %1
  %1 = builtin "sizeof"<HeapObject>(%0 : $@thick HeapObject.Type) : $Builtin.Word, scope 96 // user: %2
  %2 = builtin "zextOrBitCast_Word_Int64"(%1 : $Builtin.Word) : $Builtin.Int64, scope 96 // user: %7
  %3 = metatype $@thick _StringBufferIVars.Type, scope 96 // users: %24, %4
  %4 = builtin "alignof"<_StringBufferIVars>(%3 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 96 // user: %5
  %5 = builtin "zextOrBitCast_Word_Int64"(%4 : $Builtin.Word) : $Builtin.Int64, scope 96 // users: %15, %7
  %6 = integer_literal $Builtin.Int1, -1, scope 96 // users: %33, %26, %7
  %7 = builtin "uadd_with_overflow_Int64"(%2 : $Builtin.Int64, %5 : $Builtin.Int64, %6 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 96 // users: %9, %8
  %8 = tuple_extract %7 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %13
  %9 = tuple_extract %7 : $(Builtin.Int64, Builtin.Int1), 1, scope 96 // user: %10
  cond_fail %9 : $Builtin.Int1, scope 96          // id: %10
  %11 = integer_literal $Builtin.Int64, 1, scope 96 // users: %39, %37, %15, %13
  %12 = integer_literal $Builtin.Int1, 0, scope 96 // users: %39, %37, %15, %13
  %13 = builtin "usub_with_overflow_Int64"(%8 : $Builtin.Int64, %11 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 96 // user: %14
  %14 = tuple_extract %13 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %19
  %15 = builtin "usub_with_overflow_Int64"(%5 : $Builtin.Int64, %11 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 96 // user: %16
  %16 = tuple_extract %15 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %18
  %17 = integer_literal $Builtin.Int64, -1, scope 96 // users: %41, %18
  %18 = builtin "xor_Int64"(%16 : $Builtin.Int64, %17 : $Builtin.Int64) : $Builtin.Int64, scope 96 // user: %19
  %19 = builtin "and_Int64"(%14 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int64, scope 96 // user: %20
  %20 = builtin "u_to_s_checked_conversion_Int64"(%19 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 96 // users: %22, %21
  %21 = tuple_extract %20 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %26
  %22 = tuple_extract %20 : $(Builtin.Int64, Builtin.Int1), 1, scope 96 // user: %23
  cond_fail %22 : $Builtin.Int1, scope 96         // id: %23
  %24 = builtin "sizeof"<_StringBufferIVars>(%3 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 96 // user: %25
  %25 = builtin "zextOrBitCast_Word_Int64"(%24 : $Builtin.Word) : $Builtin.Int64, scope 96 // user: %26
  %26 = builtin "sadd_with_overflow_Int64"(%21 : $Builtin.Int64, %25 : $Builtin.Int64, %6 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 96 // users: %28, %27
  %27 = tuple_extract %26 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %33
  %28 = tuple_extract %26 : $(Builtin.Int64, Builtin.Int1), 1, scope 96 // user: %29
  cond_fail %28 : $Builtin.Int1, scope 96         // id: %29
  %30 = metatype $@thick UInt16.Type, scope 96    // user: %31
  %31 = builtin "alignof"<UInt16>(%30 : $@thick UInt16.Type) : $Builtin.Word, scope 96 // user: %32
  %32 = builtin "zextOrBitCast_Word_Int64"(%31 : $Builtin.Word) : $Builtin.Int64, scope 96 // users: %39, %33
  %33 = builtin "uadd_with_overflow_Int64"(%27 : $Builtin.Int64, %32 : $Builtin.Int64, %6 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 96 // users: %35, %34
  %34 = tuple_extract %33 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %37
  %35 = tuple_extract %33 : $(Builtin.Int64, Builtin.Int1), 1, scope 96 // user: %36
  cond_fail %35 : $Builtin.Int1, scope 96         // id: %36
  %37 = builtin "usub_with_overflow_Int64"(%34 : $Builtin.Int64, %11 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 96 // user: %38
  %38 = tuple_extract %37 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %42
  %39 = builtin "usub_with_overflow_Int64"(%32 : $Builtin.Int64, %11 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 96 // user: %40
  %40 = tuple_extract %39 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %41
  %41 = builtin "xor_Int64"(%40 : $Builtin.Int64, %17 : $Builtin.Int64) : $Builtin.Int64, scope 96 // user: %42
  %42 = builtin "and_Int64"(%38 : $Builtin.Int64, %41 : $Builtin.Int64) : $Builtin.Int64, scope 96 // user: %43
  %43 = builtin "u_to_s_checked_conversion_Int64"(%42 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 96 // users: %45, %44
  %44 = tuple_extract %43 : $(Builtin.Int64, Builtin.Int1), 0, scope 96 // user: %47
  %45 = tuple_extract %43 : $(Builtin.Int64, Builtin.Int1), 1, scope 96 // user: %46
  cond_fail %45 : $Builtin.Int1, scope 96         // id: %46
  %47 = struct $Int (%44 : $Builtin.Int64), scope 96 // user: %48
  return %47 : $Int, scope 96                     // id: %48
}

sil_scope 97 {  parent @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore }
sil_scope 98 {  parent @_TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferlu5valuex : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> UnsafePointer<_StringBufferIVars> }
sil_scope 99 {  parent 97 }
sil_scope 100 {  parent 98 inlined_at 99 }

// specialized _StringCore.init(_StringBuffer) -> _StringCore
sil hidden_external [fragile] @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore {
// %0                                             // users: %57, %21, %20, %3, %2, %1
bb0(%0 : $_StringBuffer):
  debug_value %0 : $_StringBuffer, scope 97       // id: %1
  debug_value %0 : $_StringBuffer, scope 97       // id: %2
  %3 = struct_extract %0 : $_StringBuffer, #_StringBuffer._storage, scope 97 // users: %48, %47, %23, %22, %62, %58, %9, %8, %5, %4
  %4 = struct_extract %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 97 // users: %63, %59, %11, %10
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 97 // id: %5
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %6 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 97 // user: %7
  %7 = apply %6() : $@convention(thin) () -> Int, scope 97 // users: %14, %13
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 97 // id: %8
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 97 // id: %9
  switch_enum %4 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb2, case #Optional.some!enumelt.1: bb1, scope 97 // id: %10

bb1:                                              // Preds: bb0
  %11 = unchecked_enum_data %4 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 97 // users: %64, %61, %60, %12
  %12 = ref_to_raw_pointer %11 : $Builtin.NativeObject to $Builtin.RawPointer, scope 97 // users: %51, %16
  %13 = struct_extract %7 : $Int, #Int._value, scope 97 // user: %15
  debug_value %7 : $Int, scope 97                 // id: %14
  %15 = builtin "truncOrBitCast_Int64_Word"(%13 : $Builtin.Int64) : $Builtin.Word, scope 97 // user: %16
  %16 = index_raw_pointer %12 : $Builtin.RawPointer, %15 : $Builtin.Word, scope 97 // user: %17
  %17 = struct $UnsafeMutableRawPointer (%16 : $Builtin.RawPointer), scope 97 // user: %18
  %18 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %17 : $UnsafeMutableRawPointer, scope 97 // users: %78, %66
  // function_ref _StringBuffer.usedCount.getter
  %19 = function_ref @_TFVs13_StringBufferg9usedCountSi : $@convention(method) (@guaranteed _StringBuffer) -> Int, scope 97 // user: %20
  %20 = apply %19(%0) : $@convention(method) (@guaranteed _StringBuffer) -> Int, scope 97 // users: %71, %67
  debug_value %0 : $_StringBuffer, scope 97       // id: %21
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 100 // id: %22
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 100 // id: %23
  %24 = metatype $@thick HeapObject.Type, scope 100 // user: %25
  %25 = builtin "sizeof"<HeapObject>(%24 : $@thick HeapObject.Type) : $Builtin.Word, scope 100 // user: %26
  %26 = builtin "zextOrBitCast_Word_Int64"(%25 : $Builtin.Word) : $Builtin.Int64, scope 100 // user: %31
  %27 = metatype $@thick _StringBufferIVars.Type, scope 100 // user: %28
  %28 = builtin "alignof"<_StringBufferIVars>(%27 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 100 // user: %29
  %29 = builtin "zextOrBitCast_Word_Int64"(%28 : $Builtin.Word) : $Builtin.Int64, scope 100 // users: %39, %31
  %30 = integer_literal $Builtin.Int1, -1, scope 100 // user: %31
  %31 = builtin "uadd_with_overflow_Int64"(%26 : $Builtin.Int64, %29 : $Builtin.Int64, %30 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 100 // users: %33, %32
  %32 = tuple_extract %31 : $(Builtin.Int64, Builtin.Int1), 0, scope 100 // user: %37
  %33 = tuple_extract %31 : $(Builtin.Int64, Builtin.Int1), 1, scope 100 // user: %34
  cond_fail %33 : $Builtin.Int1, scope 100        // id: %34
  %35 = integer_literal $Builtin.Int64, 1, scope 100 // users: %56, %39, %37
  %36 = integer_literal $Builtin.Int1, 0, scope 100 // users: %39, %37
  %37 = builtin "usub_with_overflow_Int64"(%32 : $Builtin.Int64, %35 : $Builtin.Int64, %36 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 100 // user: %38
  %38 = tuple_extract %37 : $(Builtin.Int64, Builtin.Int1), 0, scope 100 // user: %43
  %39 = builtin "usub_with_overflow_Int64"(%29 : $Builtin.Int64, %35 : $Builtin.Int64, %36 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 100 // user: %40
  %40 = tuple_extract %39 : $(Builtin.Int64, Builtin.Int1), 0, scope 100 // user: %42
  %41 = integer_literal $Builtin.Int64, -1, scope 100 // user: %42
  %42 = builtin "xor_Int64"(%40 : $Builtin.Int64, %41 : $Builtin.Int64) : $Builtin.Int64, scope 100 // user: %43
  %43 = builtin "and_Int64"(%38 : $Builtin.Int64, %42 : $Builtin.Int64) : $Builtin.Int64, scope 100 // user: %44
  %44 = builtin "u_to_s_checked_conversion_Int64"(%43 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 100 // users: %49, %45
  %45 = tuple_extract %44 : $(Builtin.Int64, Builtin.Int1), 1, scope 100 // user: %46
  cond_fail %45 : $Builtin.Int1, scope 100        // id: %46
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 100 // id: %47
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 100 // id: %48
  %49 = tuple_extract %44 : $(Builtin.Int64, Builtin.Int1), 0, scope 100 // user: %50
  %50 = builtin "truncOrBitCast_Int64_Word"(%49 : $Builtin.Int64) : $Builtin.Word, scope 100 // user: %51
  %51 = index_raw_pointer %12 : $Builtin.RawPointer, %50 : $Builtin.Word, scope 100 // user: %52
  %52 = pointer_to_address %51 : $Builtin.RawPointer to [strict] $*_StringBufferIVars, scope 97 // user: %53
  %53 = struct_element_addr %52 : $*_StringBufferIVars, #_StringBufferIVars.capacityAndElementShift, scope 97 // user: %54
  %54 = struct_element_addr %53 : $*Int, #Int._value, scope 97 // user: %55
  %55 = load %54 : $*Builtin.Int64, scope 97      // user: %56
  %56 = builtin "and_Int64"(%55 : $Builtin.Int64, %35 : $Builtin.Int64) : $Builtin.Int64, scope 97 // user: %70
  debug_value %0 : $_StringBuffer, scope 97       // id: %57
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 97 // id: %58
  debug_value %4 : $Optional<Builtin.NativeObject>, scope 97 // id: %59
  debug_value %11 : $Builtin.NativeObject, scope 97 // id: %60
  %61 = unchecked_ref_cast %11 : $Builtin.NativeObject to $AnyObject, scope 97 // user: %65
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 97 // id: %62
  debug_value %4 : $Optional<Builtin.NativeObject>, scope 97 // id: %63
  debug_value %11 : $Builtin.NativeObject, scope 97 // id: %64
  %65 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %61 : $AnyObject, scope 97 // users: %78, %68
  debug_value %18 : $Optional<UnsafeMutableRawPointer>, scope 97 // id: %66
  debug_value %20 : $Int, scope 97                // id: %67
  debug_value %65 : $Optional<AnyObject>, scope 97 // id: %68
  %69 = integer_literal $Builtin.Int64, 63, scope 97 // user: %70
  %70 = builtin "shl_Int64"(%56 : $Builtin.Int64, %69 : $Builtin.Int64) : $Builtin.Int64, scope 97 // user: %76
  %71 = struct_extract %20 : $Int, #Int._value, scope 97 // user: %72
  %72 = builtin "s_to_u_checked_conversion_Int64"(%71 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 97 // users: %74, %73
  %73 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 0, scope 97 // user: %76
  %74 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 1, scope 97 // user: %75
  cond_fail %74 : $Builtin.Int1, scope 97         // id: %75
  %76 = builtin "or_Int64"(%70 : $Builtin.Int64, %73 : $Builtin.Int64) : $Builtin.Int64, scope 97 // user: %77
  %77 = struct $UInt (%76 : $Builtin.Int64), scope 97 // user: %78
  %78 = struct $_StringCore (%18 : $Optional<UnsafeMutableRawPointer>, %77 : $UInt, %65 : $Optional<AnyObject>), scope 97 // user: %79
  return %78 : $_StringCore, scope 97             // id: %79

bb2:                                              // Preds: bb0
  %80 = integer_literal $Builtin.Int1, -1, scope 97 // user: %81
  cond_fail %80 : $Builtin.Int1, scope 97         // id: %81
  unreachable, scope 97                           // id: %82
}


// swift_EnumCaseName
sil hidden_external [fragile] @swift_EnumCaseName : $@convention(thin) <τ_0_0> (@in τ_0_0) -> Optional<UnsafePointer<Int8>>

sil_scope 101 {  parent @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never }

// _abstract(file : StaticString, line : UInt) -> Never
sil hidden_external [fragile] [noinline] @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never {
// %0                                             // users: %23, %2
// %1                                             // users: %23, %3
bb0(%0 : $StaticString, %1 : $UInt):
  debug_value %0 : $StaticString, scope 101       // id: %2
  debug_value %1 : $UInt, scope 101               // id: %3
  %4 = string_literal utf8 "Method must be overridden", scope 101 // users: %6, %5
  debug_value %4 : $Builtin.RawPointer, scope 101 // id: %5
  %6 = struct $UnsafeMutableRawPointer (%4 : $Builtin.RawPointer), scope 101 // user: %7
  %7 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %6 : $UnsafeMutableRawPointer, scope 101 // users: %20, %9
  %8 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 101 // users: %20, %10
  debug_value %7 : $Optional<UnsafeMutableRawPointer>, scope 101 // id: %9
  debug_value %8 : $Optional<AnyObject>, scope 101 // id: %10
  %11 = integer_literal $Builtin.Int32, 0, scope 101 // user: %22
  // function_ref _assertionFailed(StaticString, String, StaticString, UInt, flags : UInt32) -> Never
  %12 = function_ref @_TFs16_assertionFailedFTVs12StaticStringSSS_Su5flagsVs6UInt32_Os5Never : $@convention(thin) (StaticString, @owned String, StaticString, UInt, UInt32) -> Never, scope 101 // user: %23
  %13 = string_literal utf8 "fatal error", scope 101 // user: %15
  %14 = integer_literal $Builtin.Word, 11, scope 101 // user: %17
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word, scope 101 // user: %17
  %16 = integer_literal $Builtin.Int8, 2, scope 101 // user: %17
  %17 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8), scope 101 // user: %23
  %18 = integer_literal $Builtin.Int64, 25, scope 101 // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64), scope 101 // user: %20
  %20 = struct $_StringCore (%7 : $Optional<UnsafeMutableRawPointer>, %19 : $UInt, %8 : $Optional<AnyObject>), scope 101 // user: %21
  %21 = struct $String (%20 : $_StringCore), scope 101 // user: %23
  %22 = struct $UInt32 (%11 : $Builtin.Int32), scope 101 // user: %23
  %23 = apply %12(%17, %21, %0, %1, %22) : $@convention(thin) (StaticString, @owned String, StaticString, UInt, UInt32) -> Never, scope 101
  unreachable, scope 101                          // id: %24
}

sil_scope 102 {  parent @_TTSfq4n_d___TZFVs4UTF810_decodeOnefVs6UInt32T6resultGSqS0__6lengthVs5UInt8_ : $@convention(thin) (UInt32) -> (Optional<UInt32>, UInt8) }

// specialized static UTF8._decodeOne(UInt32) -> (result : UInt32?, length : UInt8)
sil public_external [fragile] @_TTSfq4n_d___TZFVs4UTF810_decodeOnefVs6UInt32T6resultGSqS0__6lengthVs5UInt8_ : $@convention(thin) (UInt32) -> (Optional<UInt32>, UInt8) {
// %0                                             // users: %3, %1
bb0(%0 : $UInt32):
  debug_value %0 : $UInt32, scope 102             // id: %1
  %2 = integer_literal $Builtin.Int32, 128, scope 102 // user: %4
  %3 = struct_extract %0 : $UInt32, #UInt32._value, scope 102 // users: %194, %179, %176, %171, %164, %148, %138, %133, %129, %123, %113, %94, %89, %79, %75, %70, %66, %60, %54, %49, %43, %10, %4
  %4 = builtin "and_Int32"(%3 : $Builtin.Int32, %2 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %6
  %5 = integer_literal $Builtin.Int32, 0, scope 102 // users: %172, %114, %55, %44, %36, %28, %25, %6
  %6 = builtin "cmp_eq_Int32"(%4 : $Builtin.Int32, %5 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %7
  cond_br %6, bb39, bb1, scope 102                // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int32, -1325400065, scope 102 // user: %20
  %9 = integer_literal $Builtin.Int32, 3, scope 102 // user: %10
  %10 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %9 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %12
  %11 = integer_literal $Builtin.Int32, 31, scope 102 // users: %179, %12
  %12 = builtin "and_Int32"(%10 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int32, scope 102 // users: %23, %20, %16
  %13 = integer_literal $Builtin.Int8, 2, scope 102 // users: %186, %153, %102
  %14 = integer_literal $Builtin.Int32, 1, scope 102 // users: %24, %30, %33, %21
  %15 = integer_literal $Builtin.Int32, 32, scope 102 // user: %16
  %16 = builtin "cmp_ult_Int32"(%12 : $Builtin.Int32, %15 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %18
  %17 = integer_literal $Builtin.Int1, -1, scope 102 // user: %18
  %18 = builtin "xor_Int1"(%16 : $Builtin.Int1, %17 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %19
  cond_fail %18 : $Builtin.Int1, scope 102        // id: %19
  %20 = builtin "lshr_Int32"(%8 : $Builtin.Int32, %12 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %21
  %21 = builtin "and_Int32"(%20 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32, scope 102 // users: %28, %30, %36
  %22 = integer_literal $Builtin.Int32, -1056964609, scope 102 // user: %23
  %23 = builtin "lshr_Int32"(%22 : $Builtin.Int32, %12 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %24
  %24 = builtin "and_Int32"(%23 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32, scope 102 // users: %33, %25
  %25 = builtin "cmp_eq_Int32"(%5 : $Builtin.Int32, %24 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %26
  cond_br %25, bb3, bb2, scope 102                // id: %26

bb2:                                              // Preds: bb1
  br bb6, scope 102                               // id: %27

bb3:                                              // Preds: bb1
  %28 = builtin "cmp_eq_Int32"(%5 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %29
  cond_br %28, bb34, bb4, scope 102               // id: %29

bb4:                                              // Preds: bb3
  %30 = builtin "cmp_eq_Int32"(%14 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %31
  cond_br %30, bb25, bb5, scope 102               // id: %31

bb5:                                              // Preds: bb4
  br bb6, scope 102                               // id: %32

bb6:                                              // Preds: bb5 bb2
  %33 = builtin "cmp_eq_Int32"(%14 : $Builtin.Int32, %24 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %34
  cond_br %33, bb8, bb7, scope 102                // id: %34

bb7:                                              // Preds: bb6
  br bb10, scope 102                              // id: %35

bb8:                                              // Preds: bb6
  %36 = builtin "cmp_eq_Int32"(%5 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %37
  cond_br %36, bb11, bb9, scope 102               // id: %37

bb9:                                              // Preds: bb8
  br bb10, scope 102                              // id: %38

bb10:                                             // Preds: bb9 bb7
  %39 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %41
  %40 = integer_literal $Builtin.Int8, 1, scope 102 // user: %41
  br bb40(%39 : $Optional<UInt32>, %40 : $Builtin.Int8), scope 102 // id: %41

bb11:                                             // Preds: bb8
  %42 = integer_literal $Builtin.Int32, 12295, scope 102 // user: %43
  %43 = builtin "and_Int32"(%3 : $Builtin.Int32, %42 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %44
  %44 = builtin "cmp_eq_Int32"(%43 : $Builtin.Int32, %5 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %46
  %45 = integer_literal $Builtin.Int1, 0, scope 102 // users: %63, %56, %46
  %46 = builtin "int_expect_Int1"(%44 : $Builtin.Int1, %45 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %47
  cond_br %46, bb24, bb12, scope 102              // id: %47

bb12:                                             // Preds: bb11
  %48 = integer_literal $Builtin.Int32, 4, scope 102 // users: %76, %50, %49
  %49 = builtin "and_Int32"(%3 : $Builtin.Int32, %48 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %50
  %50 = builtin "cmp_eq_Int32"(%49 : $Builtin.Int32, %48 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %51
  cond_br %50, bb14, bb13, scope 102              // id: %51

bb13:                                             // Preds: bb12
  br bb16, scope 102                              // id: %52

bb14:                                             // Preds: bb12
  %53 = integer_literal $Builtin.Int32, 12291, scope 102 // user: %54
  %54 = builtin "and_Int32"(%3 : $Builtin.Int32, %53 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %55
  %55 = builtin "cmp_ne_Int32"(%54 : $Builtin.Int32, %5 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %56
  %56 = builtin "int_expect_Int1"(%55 : $Builtin.Int1, %45 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %57
  cond_br %56, bb23, bb15, scope 102              // id: %57

bb15:                                             // Preds: bb14
  br bb16, scope 102                              // id: %58

bb16:                                             // Preds: bb15 bb13
  %59 = integer_literal $Builtin.Int32, -1061109512, scope 102 // user: %60
  %60 = builtin "and_Int32"(%3 : $Builtin.Int32, %59 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %62
  %61 = integer_literal $Builtin.Int32, -2139062032, scope 102 // user: %62
  %62 = builtin "cmp_ne_Int32"(%60 : $Builtin.Int32, %61 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %63
  %63 = builtin "int_expect_Int1"(%62 : $Builtin.Int1, %45 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %64
  cond_br %63, bb18, bb17, scope 102              // id: %64

bb17:                                             // Preds: bb16
  %65 = integer_literal $Builtin.Int32, 1056964608, scope 102 // user: %66
  %66 = builtin "and_Int32"(%3 : $Builtin.Int32, %65 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %68
  %67 = integer_literal $Builtin.Int32, 24, scope 102 // user: %68
  %68 = builtin "lshr_Int32"(%66 : $Builtin.Int32, %67 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %73
  %69 = integer_literal $Builtin.Int32, 4128768, scope 102 // user: %70
  %70 = builtin "and_Int32"(%3 : $Builtin.Int32, %69 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %72
  %71 = integer_literal $Builtin.Int32, 10, scope 102 // user: %72
  %72 = builtin "lshr_Int32"(%70 : $Builtin.Int32, %71 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %73
  %73 = builtin "or_Int32"(%68 : $Builtin.Int32, %72 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %77
  %74 = integer_literal $Builtin.Int32, 16128, scope 102 // user: %75
  %75 = builtin "and_Int32"(%3 : $Builtin.Int32, %74 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %76
  %76 = builtin "shl_Int32"(%75 : $Builtin.Int32, %48 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %77
  %77 = builtin "or_Int32"(%73 : $Builtin.Int32, %76 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %82
  %78 = integer_literal $Builtin.Int32, 7, scope 102 // user: %79
  %79 = builtin "and_Int32"(%3 : $Builtin.Int32, %78 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %81
  %80 = integer_literal $Builtin.Int32, 18, scope 102 // user: %81
  %81 = builtin "shl_Int32"(%79 : $Builtin.Int32, %80 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %82
  %82 = builtin "or_Int32"(%77 : $Builtin.Int32, %81 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %83
  %83 = struct $UInt32 (%82 : $Builtin.Int32), scope 102 // users: %85, %84
  debug_value %83 : $UInt32, scope 102            // id: %84
  %85 = enum $Optional<UInt32>, #Optional.some!enumelt.1, %83 : $UInt32, scope 102 // user: %87
  %86 = integer_literal $Builtin.Int8, 4, scope 102 // user: %87
  br bb40(%85 : $Optional<UInt32>, %86 : $Builtin.Int8), scope 102 // id: %87

bb18:                                             // Preds: bb16
  %88 = integer_literal $Builtin.Int32, 49152, scope 102 // user: %89
  %89 = builtin "and_Int32"(%3 : $Builtin.Int32, %88 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %91
  %90 = integer_literal $Builtin.Int32, 32768, scope 102 // user: %91
  %91 = builtin "cmp_ne_Int32"(%89 : $Builtin.Int32, %90 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %92
  cond_br %91, bb22, bb19, scope 102              // id: %92

bb19:                                             // Preds: bb18
  %93 = integer_literal $Builtin.Int32, 12582912, scope 102 // user: %94
  %94 = builtin "and_Int32"(%3 : $Builtin.Int32, %93 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %96
  %95 = integer_literal $Builtin.Int32, 8388608, scope 102 // user: %96
  %96 = builtin "cmp_ne_Int32"(%94 : $Builtin.Int32, %95 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %97
  cond_br %96, bb21, bb20, scope 102              // id: %97

bb20:                                             // Preds: bb19
  %98 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %100
  %99 = integer_literal $Builtin.Int8, 3, scope 102 // user: %100
  br bb40(%98 : $Optional<UInt32>, %99 : $Builtin.Int8), scope 102 // id: %100

bb21:                                             // Preds: bb19
  %101 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %102
  br bb40(%101 : $Optional<UInt32>, %13 : $Builtin.Int8), scope 102 // id: %102

bb22:                                             // Preds: bb18
  %103 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %105
  %104 = integer_literal $Builtin.Int8, 1, scope 102 // user: %105
  br bb40(%103 : $Optional<UInt32>, %104 : $Builtin.Int8), scope 102 // id: %105

bb23:                                             // Preds: bb14
  %106 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %108
  %107 = integer_literal $Builtin.Int8, 1, scope 102 // user: %108
  br bb40(%106 : $Optional<UInt32>, %107 : $Builtin.Int8), scope 102 // id: %108

bb24:                                             // Preds: bb11
  %109 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %111
  %110 = integer_literal $Builtin.Int8, 1, scope 102 // user: %111
  br bb40(%109 : $Optional<UInt32>, %110 : $Builtin.Int8), scope 102 // id: %111

bb25:                                             // Preds: bb4
  %112 = integer_literal $Builtin.Int32, 8207, scope 102 // user: %113
  %113 = builtin "and_Int32"(%3 : $Builtin.Int32, %112 : $Builtin.Int32) : $Builtin.Int32, scope 102 // users: %119, %114
  %114 = builtin "cmp_eq_Int32"(%113 : $Builtin.Int32, %5 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %116
  %115 = integer_literal $Builtin.Int1, 0, scope 102 // users: %126, %120, %116
  %116 = builtin "int_expect_Int1"(%114 : $Builtin.Int1, %115 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %117
  cond_br %116, bb33, bb26, scope 102             // id: %117

bb26:                                             // Preds: bb25
  %118 = integer_literal $Builtin.Int32, 8205, scope 102 // user: %119
  %119 = builtin "cmp_eq_Int32"(%113 : $Builtin.Int32, %118 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %120
  %120 = builtin "int_expect_Int1"(%119 : $Builtin.Int1, %115 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %121
  cond_br %120, bb32, bb27, scope 102             // id: %121

bb27:                                             // Preds: bb26
  %122 = integer_literal $Builtin.Int32, 12632304, scope 102 // user: %123
  %123 = builtin "and_Int32"(%3 : $Builtin.Int32, %122 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %125
  %124 = integer_literal $Builtin.Int32, 8421600, scope 102 // user: %125
  %125 = builtin "cmp_ne_Int32"(%123 : $Builtin.Int32, %124 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %126
  %126 = builtin "int_expect_Int1"(%125 : $Builtin.Int1, %115 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %127
  cond_br %126, bb29, bb28, scope 102             // id: %127

bb28:                                             // Preds: bb27
  %128 = integer_literal $Builtin.Int32, 4128768, scope 102 // user: %129
  %129 = builtin "and_Int32"(%3 : $Builtin.Int32, %128 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %131
  %130 = integer_literal $Builtin.Int32, 16, scope 102 // user: %131
  %131 = builtin "lshr_Int32"(%129 : $Builtin.Int32, %130 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %136
  %132 = integer_literal $Builtin.Int32, 16128, scope 102 // user: %133
  %133 = builtin "and_Int32"(%3 : $Builtin.Int32, %132 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %135
  %134 = integer_literal $Builtin.Int32, 2, scope 102 // user: %135
  %135 = builtin "lshr_Int32"(%133 : $Builtin.Int32, %134 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %136
  %136 = builtin "or_Int32"(%131 : $Builtin.Int32, %135 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %141
  %137 = integer_literal $Builtin.Int32, 15, scope 102 // user: %138
  %138 = builtin "and_Int32"(%3 : $Builtin.Int32, %137 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %140
  %139 = integer_literal $Builtin.Int32, 12, scope 102 // user: %140
  %140 = builtin "shl_Int32"(%138 : $Builtin.Int32, %139 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %141
  %141 = builtin "or_Int32"(%136 : $Builtin.Int32, %140 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %142
  %142 = struct $UInt32 (%141 : $Builtin.Int32), scope 102 // users: %144, %143
  debug_value %142 : $UInt32, scope 102           // id: %143
  %144 = enum $Optional<UInt32>, #Optional.some!enumelt.1, %142 : $UInt32, scope 102 // user: %146
  %145 = integer_literal $Builtin.Int8, 3, scope 102 // user: %146
  br bb40(%144 : $Optional<UInt32>, %145 : $Builtin.Int8), scope 102 // id: %146

bb29:                                             // Preds: bb27
  %147 = integer_literal $Builtin.Int32, 49152, scope 102 // user: %148
  %148 = builtin "and_Int32"(%3 : $Builtin.Int32, %147 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %150
  %149 = integer_literal $Builtin.Int32, 32768, scope 102 // user: %150
  %150 = builtin "cmp_ne_Int32"(%148 : $Builtin.Int32, %149 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %151
  cond_br %150, bb31, bb30, scope 102             // id: %151

bb30:                                             // Preds: bb29
  %152 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %153
  br bb40(%152 : $Optional<UInt32>, %13 : $Builtin.Int8), scope 102 // id: %153

bb31:                                             // Preds: bb29
  %154 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %156
  %155 = integer_literal $Builtin.Int8, 1, scope 102 // user: %156
  br bb40(%154 : $Optional<UInt32>, %155 : $Builtin.Int8), scope 102 // id: %156

bb32:                                             // Preds: bb26
  %157 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %159
  %158 = integer_literal $Builtin.Int8, 1, scope 102 // user: %159
  br bb40(%157 : $Optional<UInt32>, %158 : $Builtin.Int8), scope 102 // id: %159

bb33:                                             // Preds: bb25
  %160 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %162
  %161 = integer_literal $Builtin.Int8, 1, scope 102 // user: %162
  br bb40(%160 : $Optional<UInt32>, %161 : $Builtin.Int8), scope 102 // id: %162

bb34:                                             // Preds: bb3
  %163 = integer_literal $Builtin.Int32, 49376, scope 102 // user: %164
  %164 = builtin "and_Int32"(%3 : $Builtin.Int32, %163 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %166
  %165 = integer_literal $Builtin.Int32, 32960, scope 102 // user: %166
  %166 = builtin "cmp_ne_Int32"(%164 : $Builtin.Int32, %165 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %168
  %167 = integer_literal $Builtin.Int1, 0, scope 102 // users: %173, %168
  %168 = builtin "int_expect_Int1"(%166 : $Builtin.Int1, %167 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %169
  cond_br %168, bb38, bb35, scope 102             // id: %169

bb35:                                             // Preds: bb34
  %170 = integer_literal $Builtin.Int32, 30, scope 102 // user: %171
  %171 = builtin "and_Int32"(%3 : $Builtin.Int32, %170 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %172
  %172 = builtin "cmp_eq_Int32"(%171 : $Builtin.Int32, %5 : $Builtin.Int32) : $Builtin.Int1, scope 102 // user: %173
  %173 = builtin "int_expect_Int1"(%172 : $Builtin.Int1, %167 : $Builtin.Int1) : $Builtin.Int1, scope 102 // user: %174
  cond_br %173, bb37, bb36, scope 102             // id: %174

bb36:                                             // Preds: bb35
  %175 = integer_literal $Builtin.Int32, 16128, scope 102 // user: %176
  %176 = builtin "and_Int32"(%3 : $Builtin.Int32, %175 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %178
  %177 = integer_literal $Builtin.Int32, 8, scope 102 // user: %178
  %178 = builtin "lshr_Int32"(%176 : $Builtin.Int32, %177 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %182
  %179 = builtin "and_Int32"(%3 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %181
  %180 = integer_literal $Builtin.Int32, 6, scope 102 // user: %181
  %181 = builtin "shl_Int32"(%179 : $Builtin.Int32, %180 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %182
  %182 = builtin "or_Int32"(%178 : $Builtin.Int32, %181 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %183
  %183 = struct $UInt32 (%182 : $Builtin.Int32), scope 102 // users: %185, %184
  debug_value %183 : $UInt32, scope 102           // id: %184
  %185 = enum $Optional<UInt32>, #Optional.some!enumelt.1, %183 : $UInt32, scope 102 // user: %186
  br bb40(%185 : $Optional<UInt32>, %13 : $Builtin.Int8), scope 102 // id: %186

bb37:                                             // Preds: bb35
  %187 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %189
  %188 = integer_literal $Builtin.Int8, 1, scope 102 // user: %189
  br bb40(%187 : $Optional<UInt32>, %188 : $Builtin.Int8), scope 102 // id: %189

bb38:                                             // Preds: bb34
  %190 = enum $Optional<UInt32>, #Optional.none!enumelt, scope 102 // user: %192
  %191 = integer_literal $Builtin.Int8, 1, scope 102 // user: %192
  br bb40(%190 : $Optional<UInt32>, %191 : $Builtin.Int8), scope 102 // id: %192

bb39:                                             // Preds: bb0
  %193 = integer_literal $Builtin.Int32, 255, scope 102 // user: %194
  %194 = builtin "and_Int32"(%3 : $Builtin.Int32, %193 : $Builtin.Int32) : $Builtin.Int32, scope 102 // user: %195
  %195 = struct $UInt32 (%194 : $Builtin.Int32), scope 102 // users: %197, %196
  debug_value %195 : $UInt32, scope 102           // id: %196
  %197 = enum $Optional<UInt32>, #Optional.some!enumelt.1, %195 : $UInt32, scope 102 // user: %199
  %198 = integer_literal $Builtin.Int8, 1, scope 102 // user: %199
  br bb40(%197 : $Optional<UInt32>, %198 : $Builtin.Int8), scope 102 // id: %199

// %200                                           // user: %203
// %201                                           // user: %202
bb40(%200 : $Optional<UInt32>, %201 : $Builtin.Int8): // Preds: bb39 bb38 bb37 bb36 bb33 bb32 bb31 bb30 bb28 bb24 bb23 bb22 bb21 bb20 bb17 bb10
  %202 = struct $UInt8 (%201 : $Builtin.Int8), scope 102 // user: %203
  %203 = tuple (%200 : $Optional<UInt32>, %202 : $UInt8), scope 102 // user: %204
  return %203 : $(Optional<UInt32>, UInt8), scope 102 // id: %204
}

sil_scope 103 {  parent @_TTSfq4n_n_n_d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferCfTPMPs9AnyObject_xSi_GS_xq__ : $@convention(thin) (@thick AnyObject.Type, _StringBufferIVars, Int) -> @owned _HeapBuffer<_StringBufferIVars, UInt16> }
sil_scope 104 {  parent @_TTSgq5Vs18_StringBufferIVars___TFSp10initializefT2tox5countSi_T_ : $@convention(method) (_StringBufferIVars, Int, UnsafeMutablePointer<_StringBufferIVars>) -> () }
sil_scope 105 {  parent 103 }
sil_scope 106 {  parent 104 inlined_at 105 }

// specialized specialized _HeapBuffer.init(AnyObject.Type, A, Int) -> _HeapBuffer<A, B>
sil shared_external [fragile] @_TTSfq4n_n_n_d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferCfTPMPs9AnyObject_xSi_GS_xq__ : $@convention(thin) (@thick AnyObject.Type, _StringBufferIVars, Int) -> @owned _HeapBuffer<_StringBufferIVars, UInt16> {
// %0                                             // users: %28, %4
// %1                                             // users: %61, %59, %3
// %2                                             // users: %11, %5
bb0(%0 : $@thick AnyObject.Type, %1 : $_StringBufferIVars, %2 : $Int):
  debug_value %1 : $_StringBufferIVars, scope 103 // id: %3
  debug_value %0 : $@thick AnyObject.Type, scope 103 // id: %4
  debug_value %2 : $Int, scope 103                // id: %5
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %6 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 103 // user: %7
  %7 = apply %6() : $@convention(thin) () -> Int, scope 103 // user: %17
  %8 = metatype $@thick UInt16.Type, scope 103    // user: %9
  %9 = builtin "strideof_nonzero"<UInt16>(%8 : $@thick UInt16.Type) : $Builtin.Word, scope 103 // user: %10
  %10 = builtin "zextOrBitCast_Word_Int64"(%9 : $Builtin.Word) : $Builtin.Int64, scope 103 // user: %13
  %11 = struct_extract %2 : $Int, #Int._value, scope 103 // user: %13
  %12 = integer_literal $Builtin.Int1, -1, scope 103 // users: %39, %18, %13
  %13 = builtin "smul_with_overflow_Int64"(%11 : $Builtin.Int64, %10 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 103 // users: %15, %14
  %14 = tuple_extract %13 : $(Builtin.Int64, Builtin.Int1), 0, scope 103 // user: %18
  %15 = tuple_extract %13 : $(Builtin.Int64, Builtin.Int1), 1, scope 103 // user: %16
  cond_fail %15 : $Builtin.Int1, scope 103        // id: %16
  %17 = struct_extract %7 : $Int, #Int._value, scope 103 // user: %18
  %18 = builtin "sadd_with_overflow_Int64"(%17 : $Builtin.Int64, %14 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 103 // users: %20, %19
  %19 = tuple_extract %18 : $(Builtin.Int64, Builtin.Int1), 0, scope 103 // user: %22
  %20 = tuple_extract %18 : $(Builtin.Int64, Builtin.Int1), 1, scope 103 // user: %21
  cond_fail %20 : $Builtin.Int1, scope 103        // id: %21
  %22 = struct $Int (%19 : $Builtin.Int64), scope 103 // users: %28, %23
  debug_value %22 : $Int, scope 103               // id: %23
  // function_ref specialized specialized static _HeapBuffer._requiredAlignMask() -> Int
  %24 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer18_requiredAlignMaskfT_Si : $@convention(thin) () -> Int, scope 103 // user: %25
  %25 = apply %24() : $@convention(thin) () -> Int, scope 103 // users: %28, %26
  debug_value %25 : $Int, scope 103               // id: %26
  // function_ref swift_bufferAllocate
  %27 = function_ref @swift_bufferAllocate : $@convention(thin) (@thick AnyObject.Type, Int, Int) -> @owned AnyObject, scope 103 // user: %28
  %28 = apply %27(%0, %22, %25) : $@convention(thin) (@thick AnyObject.Type, Int, Int) -> @owned AnyObject, scope 103 // users: %30, %29
  debug_value %28 : $AnyObject, scope 103         // id: %29
  %30 = open_existential_ref %28 : $AnyObject to $@opened("154F8488-A0C9-11E6-8491-A45E60F21093") AnyObject, scope 103 // users: %56, %31
  %31 = unchecked_ref_cast %30 : $@opened("154F8488-A0C9-11E6-8491-A45E60F21093") AnyObject to $Builtin.NativeObject, scope 103 // user: %32
  %32 = enum $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, %31 : $Builtin.NativeObject, scope 103 // user: %62
  %33 = metatype $@thick HeapObject.Type, scope 103 // user: %34
  %34 = builtin "sizeof"<HeapObject>(%33 : $@thick HeapObject.Type) : $Builtin.Word, scope 103 // user: %35
  %35 = builtin "zextOrBitCast_Word_Int64"(%34 : $Builtin.Word) : $Builtin.Int64, scope 103 // user: %39
  %36 = metatype $@thick _StringBufferIVars.Type, scope 103 // user: %37
  %37 = builtin "alignof"<_StringBufferIVars>(%36 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 103 // user: %38
  %38 = builtin "zextOrBitCast_Word_Int64"(%37 : $Builtin.Word) : $Builtin.Int64, scope 103 // users: %47, %39
  %39 = builtin "uadd_with_overflow_Int64"(%35 : $Builtin.Int64, %38 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 103 // users: %41, %40
  %40 = tuple_extract %39 : $(Builtin.Int64, Builtin.Int1), 0, scope 103 // user: %45
  %41 = tuple_extract %39 : $(Builtin.Int64, Builtin.Int1), 1, scope 103 // user: %42
  cond_fail %41 : $Builtin.Int1, scope 103        // id: %42
  %43 = integer_literal $Builtin.Int64, 1, scope 103 // users: %47, %45
  %44 = integer_literal $Builtin.Int1, 0, scope 103 // users: %47, %45
  %45 = builtin "usub_with_overflow_Int64"(%40 : $Builtin.Int64, %43 : $Builtin.Int64, %44 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 103 // user: %46
  %46 = tuple_extract %45 : $(Builtin.Int64, Builtin.Int1), 0, scope 103 // user: %51
  %47 = builtin "usub_with_overflow_Int64"(%38 : $Builtin.Int64, %43 : $Builtin.Int64, %44 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 103 // user: %48
  %48 = tuple_extract %47 : $(Builtin.Int64, Builtin.Int1), 0, scope 103 // user: %50
  %49 = integer_literal $Builtin.Int64, -1, scope 103 // user: %50
  %50 = builtin "xor_Int64"(%48 : $Builtin.Int64, %49 : $Builtin.Int64) : $Builtin.Int64, scope 103 // user: %51
  %51 = builtin "and_Int64"(%46 : $Builtin.Int64, %50 : $Builtin.Int64) : $Builtin.Int64, scope 103 // user: %52
  %52 = builtin "u_to_s_checked_conversion_Int64"(%51 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 103 // users: %54, %53
  %53 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 0, scope 103 // user: %57
  %54 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 1, scope 103 // user: %55
  cond_fail %54 : $Builtin.Int1, scope 103        // id: %55
  %56 = ref_to_raw_pointer %30 : $@opened("154F8488-A0C9-11E6-8491-A45E60F21093") AnyObject to $Builtin.RawPointer, scope 103 // user: %58
  %57 = builtin "truncOrBitCast_Int64_Word"(%53 : $Builtin.Int64) : $Builtin.Word, scope 103 // user: %58
  %58 = index_raw_pointer %56 : $Builtin.RawPointer, %57 : $Builtin.Word, scope 103 // user: %60
  debug_value %1 : $_StringBufferIVars, scope 106 // id: %59
  %60 = pointer_to_address %58 : $Builtin.RawPointer to [strict] $*_StringBufferIVars, scope 106 // user: %61
  store %1 to %60 : $*_StringBufferIVars, scope 106 // id: %61
  %62 = struct $_HeapBuffer<_StringBufferIVars, UInt16> (%32 : $Optional<Builtin.NativeObject>), scope 103 // user: %63
  return %62 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 103 // id: %63
}

sil_scope 107 {  parent @_TFVs13_StringBufferg9usedCountSi : $@convention(method) (@guaranteed _StringBuffer) -> Int }
sil_scope 108 {  parent 107 }
sil_scope 109 {  parent 98 inlined_at 108 }

// _StringBuffer.usedCount.getter
sil hidden_external [fragile] @_TFVs13_StringBufferg9usedCountSi : $@convention(method) (@guaranteed _StringBuffer) -> Int {
// %0                                             // users: %53, %44, %3, %2, %1
bb0(%0 : $_StringBuffer):
  debug_value %0 : $_StringBuffer, scope 107      // id: %1
  debug_value %0 : $_StringBuffer, scope 107      // id: %2
  %3 = struct_extract %0 : $_StringBuffer, #_StringBuffer._storage, scope 107 // users: %31, %30, %29, %5, %4, %49, %48, %45
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 109 // id: %4
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 109 // id: %5
  %6 = metatype $@thick HeapObject.Type, scope 109 // user: %7
  %7 = builtin "sizeof"<HeapObject>(%6 : $@thick HeapObject.Type) : $Builtin.Word, scope 109 // user: %8
  %8 = builtin "zextOrBitCast_Word_Int64"(%7 : $Builtin.Word) : $Builtin.Int64, scope 109 // user: %13
  %9 = metatype $@thick _StringBufferIVars.Type, scope 109 // user: %10
  %10 = builtin "alignof"<_StringBufferIVars>(%9 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 109 // user: %11
  %11 = builtin "zextOrBitCast_Word_Int64"(%10 : $Builtin.Word) : $Builtin.Int64, scope 109 // users: %21, %13
  %12 = integer_literal $Builtin.Int1, -1, scope 109 // users: %60, %73, %33, %13
  %13 = builtin "uadd_with_overflow_Int64"(%8 : $Builtin.Int64, %11 : $Builtin.Int64, %12 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 109 // users: %15, %14
  %14 = tuple_extract %13 : $(Builtin.Int64, Builtin.Int1), 0, scope 109 // user: %19
  %15 = tuple_extract %13 : $(Builtin.Int64, Builtin.Int1), 1, scope 109 // user: %16
  cond_fail %15 : $Builtin.Int1, scope 109        // id: %16
  %17 = integer_literal $Builtin.Int64, 1, scope 109 // users: %57, %21, %19
  %18 = integer_literal $Builtin.Int1, 0, scope 109 // users: %21, %19
  %19 = builtin "usub_with_overflow_Int64"(%14 : $Builtin.Int64, %17 : $Builtin.Int64, %18 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 109 // user: %20
  %20 = tuple_extract %19 : $(Builtin.Int64, Builtin.Int1), 0, scope 109 // user: %25
  %21 = builtin "usub_with_overflow_Int64"(%11 : $Builtin.Int64, %17 : $Builtin.Int64, %18 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 109 // user: %22
  %22 = tuple_extract %21 : $(Builtin.Int64, Builtin.Int1), 0, scope 109 // user: %24
  %23 = integer_literal $Builtin.Int64, -1, scope 109 // user: %24
  %24 = builtin "xor_Int64"(%22 : $Builtin.Int64, %23 : $Builtin.Int64) : $Builtin.Int64, scope 109 // user: %25
  %25 = builtin "and_Int64"(%20 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int64, scope 109 // user: %26
  %26 = builtin "u_to_s_checked_conversion_Int64"(%25 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 109 // users: %35, %27
  %27 = tuple_extract %26 : $(Builtin.Int64, Builtin.Int1), 1, scope 109 // user: %28
  cond_fail %27 : $Builtin.Int1, scope 109        // id: %28
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 109 // id: %29
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 109 // id: %30
  %31 = struct_extract %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 109 // users: %32, %36
  switch_enum %31 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb1, case #Optional.some!enumelt.1: bb2, scope 109 // id: %32

bb1:                                              // Preds: bb0
  cond_fail %12 : $Builtin.Int1, scope 109        // id: %33
  unreachable, scope 109                          // id: %34

bb2:                                              // Preds: bb0
  %35 = tuple_extract %26 : $(Builtin.Int64, Builtin.Int1), 0, scope 109 // user: %38
  %36 = unchecked_enum_data %31 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 109 // user: %37
  %37 = ref_to_raw_pointer %36 : $Builtin.NativeObject to $Builtin.RawPointer, scope 109 // users: %64, %39
  %38 = builtin "truncOrBitCast_Int64_Word"(%35 : $Builtin.Int64) : $Builtin.Word, scope 109 // user: %39
  %39 = index_raw_pointer %37 : $Builtin.RawPointer, %38 : $Builtin.Word, scope 109 // user: %40
  %40 = pointer_to_address %39 : $Builtin.RawPointer to [strict] $*_StringBufferIVars, scope 107 // users: %54, %41
  %41 = struct_element_addr %40 : $*_StringBufferIVars, #_StringBufferIVars.usedEnd, scope 107 // user: %42
  %42 = load %41 : $*Optional<UnsafeMutableRawPointer>, scope 107 // users: %50, %43
  switch_enum %42 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb3, scope 107 // id: %43

bb3:                                              // Preds: bb2
  debug_value %0 : $_StringBuffer, scope 107      // id: %44
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 107 // id: %45
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %46 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 107 // user: %47
  %47 = apply %46() : $@convention(thin) () -> Int, scope 107 // users: %62, %51
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 107 // id: %48
  debug_value %3 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 107 // id: %49
  %50 = unchecked_enum_data %42 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 107 // users: %65, %52
  debug_value %47 : $Int, scope 107               // id: %51
  debug_value %50 : $UnsafeMutableRawPointer, scope 107 // id: %52
  debug_value %0 : $_StringBuffer, scope 107      // id: %53
  %54 = struct_element_addr %40 : $*_StringBufferIVars, #_StringBufferIVars.capacityAndElementShift, scope 107 // user: %55
  %55 = struct_element_addr %54 : $*Int, #Int._value, scope 107 // user: %56
  %56 = load %55 : $*Builtin.Int64, scope 107     // user: %57
  %57 = builtin "and_Int64"(%56 : $Builtin.Int64, %17 : $Builtin.Int64) : $Builtin.Int64, scope 107 // users: %70, %59
  %58 = integer_literal $Builtin.Int64, 64, scope 107 // user: %59
  %59 = builtin "cmp_ult_Int64"(%57 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %60
  %60 = builtin "xor_Int1"(%59 : $Builtin.Int1, %12 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %61
  cond_fail %60 : $Builtin.Int1, scope 107        // id: %61
  %62 = struct_extract %47 : $Int, #Int._value, scope 107 // user: %63
  %63 = builtin "truncOrBitCast_Int64_Word"(%62 : $Builtin.Int64) : $Builtin.Word, scope 107 // user: %64
  %64 = index_raw_pointer %37 : $Builtin.RawPointer, %63 : $Builtin.Word, scope 107 // user: %67
  %65 = struct_extract %50 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 107 // user: %66
  %66 = builtin "ptrtoint_Word"(%65 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %68
  %67 = builtin "ptrtoint_Word"(%64 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %68
  %68 = builtin "sub_Word"(%66 : $Builtin.Word, %67 : $Builtin.Word) : $Builtin.Word, scope 107 // user: %69
  %69 = builtin "zextOrBitCast_Word_Int64"(%68 : $Builtin.Word) : $Builtin.Int64, scope 107 // user: %70
  %70 = builtin "ashr_Int64"(%69 : $Builtin.Int64, %57 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %71
  %71 = struct $Int (%70 : $Builtin.Int64), scope 107 // user: %72
  return %71 : $Int, scope 107                    // id: %72

bb4:                                              // Preds: bb2
  cond_fail %12 : $Builtin.Int1, scope 107        // id: %73
  unreachable, scope 107                          // id: %74
}


// _assertionFailed(StaticString, String, StaticString, UInt, flags : UInt32) -> Never
sil [fragile] [noinline] [_semantics "stdlib_binary_only"] @_TFs16_assertionFailedFTVs12StaticStringSSS_Su5flagsVs6UInt32_Os5Never : $@convention(thin) (StaticString, @owned String, StaticString, UInt, UInt32) -> Never


// _HeapBufferStorage.init() -> _HeapBufferStorage<A, B>
sil [fragile] @_TFCs18_HeapBufferStoragecfT_GS_xq__ : $@convention(method) <Value, Element> (@owned _HeapBufferStorage<Value, Element>) -> @owned _HeapBufferStorage<Value, Element>


// _HeapBufferStorage.__deallocating_deinit
sil [fragile] @_TFCs18_HeapBufferStorageD : $@convention(method) <Value, Element> (@owned _HeapBufferStorage<Value, Element>) -> ()

sil_scope 110 {  parent @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer18_requiredAlignMaskfT_Si : $@convention(thin) () -> Int }

// specialized specialized static _HeapBuffer._requiredAlignMask() -> Int
sil shared_external [fragile] @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer18_requiredAlignMaskfT_Si : $@convention(thin) () -> Int {
bb0:
  %0 = metatype $@thick HeapObject.Type, scope 110 // user: %1
  %1 = builtin "alignof"<HeapObject>(%0 : $@thick HeapObject.Type) : $Builtin.Word, scope 110 // user: %2
  %2 = builtin "zextOrBitCast_Word_Int64"(%1 : $Builtin.Word) : $Builtin.Int64, scope 110 // user: %5
  %3 = integer_literal $Builtin.Int64, 1, scope 110 // users: %19, %12, %5
  %4 = integer_literal $Builtin.Int1, 0, scope 110 // users: %19, %12, %5
  %5 = builtin "ssub_with_overflow_Int64"(%2 : $Builtin.Int64, %3 : $Builtin.Int64, %4 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 110 // user: %6
  %6 = tuple_extract %5 : $(Builtin.Int64, Builtin.Int1), 0, scope 110 // users: %25, %23, %7
  %7 = struct $Int (%6 : $Builtin.Int64), scope 110 // users: %27, %8
  debug_value %7 : $Int, scope 110                // id: %8
  %9 = metatype $@thick _StringBufferIVars.Type, scope 110 // user: %10
  %10 = builtin "alignof"<_StringBufferIVars>(%9 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 110 // user: %11
  %11 = builtin "zextOrBitCast_Word_Int64"(%10 : $Builtin.Word) : $Builtin.Int64, scope 110 // user: %12
  %12 = builtin "ssub_with_overflow_Int64"(%11 : $Builtin.Int64, %3 : $Builtin.Int64, %4 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 110 // user: %13
  %13 = tuple_extract %12 : $(Builtin.Int64, Builtin.Int1), 0, scope 110 // users: %29, %23, %14
  %14 = struct $Int (%13 : $Builtin.Int64), scope 110 // users: %31, %15
  debug_value %14 : $Int, scope 110               // id: %15
  %16 = metatype $@thick UInt16.Type, scope 110   // user: %17
  %17 = builtin "alignof"<UInt16>(%16 : $@thick UInt16.Type) : $Builtin.Word, scope 110 // user: %18
  %18 = builtin "zextOrBitCast_Word_Int64"(%17 : $Builtin.Word) : $Builtin.Int64, scope 110 // user: %19
  %19 = builtin "ssub_with_overflow_Int64"(%18 : $Builtin.Int64, %3 : $Builtin.Int64, %4 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 110 // user: %20
  %20 = tuple_extract %19 : $(Builtin.Int64, Builtin.Int1), 0, scope 110 // users: %29, %25, %21
  %21 = struct $Int (%20 : $Builtin.Int64), scope 110 // users: %32, %28, %22
  debug_value %21 : $Int, scope 110               // id: %22
  %23 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1, scope 110 // user: %24
  cond_br %23, bb4, bb1, scope 110                // id: %24

bb1:                                              // Preds: bb0
  %25 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1, scope 110 // user: %26
  cond_br %25, bb3, bb2, scope 110                // id: %26

bb2:                                              // Preds: bb1
  br bb7(%7 : $Int), scope 110                    // id: %27

bb3:                                              // Preds: bb1
  br bb7(%21 : $Int), scope 110                   // id: %28

bb4:                                              // Preds: bb0
  %29 = builtin "cmp_slt_Int64"(%13 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1, scope 110 // user: %30
  cond_br %29, bb6, bb5, scope 110                // id: %30

bb5:                                              // Preds: bb4
  br bb7(%14 : $Int), scope 110                   // id: %31

bb6:                                              // Preds: bb4
  br bb7(%21 : $Int), scope 110                   // id: %32

// %33                                            // user: %34
bb7(%33 : $Int):                                  // Preds: bb6 bb5 bb3 bb2
  return %33 : $Int, scope 110                    // id: %34
}


// swift_bufferAllocate
sil hidden_external [fragile] @swift_bufferAllocate : $@convention(thin) (@thick AnyObject.Type, Int, Int) -> @owned AnyObject


// _swift_stdlib_malloc_size
sil [readnone] [clang _swift_stdlib_malloc_size] @_swift_stdlib_malloc_size : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafeRawPointer>) -> Int


// _swift_class_getSuperclass
sil hidden_external [fragile] @_swift_class_getSuperclass : $@convention(thin) (@thick AnyObject.Type) -> Optional<AnyObject.Type>

sil_scope 111 {  parent @_TZFVs6Mirror19_noSuperclassMirrorfT_GSqS__ : $@convention(method) (@thin Mirror.Type) -> @owned Optional<Mirror> }

// static Mirror._noSuperclassMirror() -> Mirror?
sil hidden_external [fragile] @_TZFVs6Mirror19_noSuperclassMirrorfT_GSqS__ : $@convention(method) (@thin Mirror.Type) -> @owned Optional<Mirror> {
bb0(%0 : $@thin Mirror.Type):
  %1 = enum $Optional<Mirror>, #Optional.none!enumelt, scope 111 // user: %2
  return %1 : $Optional<Mirror>, scope 111        // id: %2
}

sil_scope 112 {  parent @_TFFVs6MirrorcFT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_U_FT_GSqS__ : $@convention(thin) (@owned @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror> }

// Mirror.(init(legacy : _Mirror, subjectType : Any.Type, makeSuperclassMirror : () -> Mirror??) -> Mirror).(closure #1)
sil shared_external [fragile] [thunk] [always_inline] @_TFFVs6MirrorcFT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_U_FT_GSqS__ : $@convention(thin) (@owned @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror> {
// %0                                             // users: %4, %3
// %1                                             // user: %3
bb0(%0 : $@box _Mirror, %1 : $@thick AnyObject.Type):
  // function_ref specialized Mirror.(init(legacy : _Mirror, subjectType : Any.Type, makeSuperclassMirror : () -> Mirror??) -> Mirror).(closure #1)
  %2 = function_ref @_TTSfq4g_n___TFFVs6MirrorcFT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_U_FT_GSqS__ : $@convention(thin) (@guaranteed @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror>, scope 112 // user: %3
  %3 = apply %2(%0, %1) : $@convention(thin) (@guaranteed @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror>, scope 112 // user: %5
  strong_release %0 : $@box _Mirror, scope 112    // id: %4
  return %3 : $Optional<Mirror>, scope 112        // id: %5
}

sil_scope 113 {  parent @_TTRXFo_iT__iGSqVs6Mirror__XFo__oGSqS___ : $@convention(thin) (@owned @callee_owned (@in ()) -> @out Optional<Mirror>) -> @owned Optional<Mirror> }

// thunk
sil shared_external [transparent] [fragile] [reabstraction_thunk] @_TTRXFo_iT__iGSqVs6Mirror__XFo__oGSqS___ : $@convention(thin) (@owned @callee_owned (@in ()) -> @out Optional<Mirror>) -> @owned Optional<Mirror> {
// %0                                             // user: %3
bb0(%0 : $@callee_owned (@in ()) -> @out Optional<Mirror>):
  %1 = alloc_stack $(), scope 113                 // users: %6, %3
  %2 = alloc_stack $Optional<Mirror>, scope 113   // users: %5, %4, %3
  %3 = apply %0(%2, %1) : $@callee_owned (@in ()) -> @out Optional<Mirror>, scope 113
  %4 = load %2 : $*Optional<Mirror>, scope 113    // user: %7
  dealloc_stack %2 : $*Optional<Mirror>, scope 113 // id: %5
  dealloc_stack %1 : $*(), scope 113              // id: %6
  return %4 : $Optional<Mirror>, scope 113        // id: %7
}

sil_scope 114 {  parent @_TTSgq5VVs6Mirror14LegacyChildrenS0_s22RandomAccessCollections___TFCs26_RandomAccessCollectionBoxcfT5_basex_GS_x_ : $@convention(method) (@in Mirror.LegacyChildren, @owned _RandomAccessCollectionBox<Mirror.LegacyChildren>) -> @owned _RandomAccessCollectionBox<Mirror.LegacyChildren> }

// specialized _RandomAccessCollectionBox.init(_base : A) -> _RandomAccessCollectionBox<A>
sil shared_external [fragile] @_TTSgq5VVs6Mirror14LegacyChildrenS0_s22RandomAccessCollections___TFCs26_RandomAccessCollectionBoxcfT5_basex_GS_x_ : $@convention(method) (@in Mirror.LegacyChildren, @owned _RandomAccessCollectionBox<Mirror.LegacyChildren>) -> @owned _RandomAccessCollectionBox<Mirror.LegacyChildren> {
// %0                                             // users: %29, %20, %19, %9, %4, %2
// %1                                             // users: %48, %40, %5
bb0(%0 : $*Mirror.LegacyChildren, %1 : $_RandomAccessCollectionBox<Mirror.LegacyChildren>):
  debug_value_addr %0 : $*Mirror.LegacyChildren, scope 114 // id: %2
  %3 = alloc_stack $Mirror.LegacyChildren, scope 114 // users: %7, %6, %4
  copy_addr %0 to [initialization] %3 : $*Mirror.LegacyChildren, scope 114 // id: %4
  %5 = ref_element_addr %1 : $_RandomAccessCollectionBox<Mirror.LegacyChildren>, #_RandomAccessCollectionBox._base, scope 114 // user: %6
  copy_addr [take] %3 to [initialization] %5 : $*Mirror.LegacyChildren, scope 114 // id: %6
  dealloc_stack %3 : $*Mirror.LegacyChildren, scope 114 // id: %7
  %8 = alloc_stack $Mirror.LegacyChildren, scope 114 // users: %47, %12, %11, %9
  copy_addr %0 to [initialization] %8 : $*Mirror.LegacyChildren, scope 114 // id: %9
  // function_ref Mirror.LegacyChildren.startIndex.getter
  %10 = function_ref @_TFVVs6Mirror14LegacyChildreng10startIndexSi : $@convention(method) (@in_guaranteed Mirror.LegacyChildren) -> Int, scope 114 // user: %11
  %11 = apply %10(%8) : $@convention(method) (@in_guaranteed Mirror.LegacyChildren) -> Int, scope 114 // users: %17, %14
  destroy_addr %8 : $*Mirror.LegacyChildren, scope 114 // id: %12
  %13 = alloc_ref $_IndexBox<Int>, scope 114      // users: %18, %16, %15
  debug_value %11 : $Int, scope 114               // id: %14
  debug_value %13 : $_IndexBox<Int>, scope 114    // id: %15
  %16 = ref_element_addr %13 : $_IndexBox<Int>, #_IndexBox._base, scope 114 // user: %17
  store %11 to %16 : $*Int, scope 114             // id: %17
  %18 = init_existential_ref %13 : $_IndexBox<Int> : $_IndexBox<Int>, $_AnyIndexBox, scope 114 // users: %44, %41, %38, %36
  debug_value_addr %0 : $*Mirror.LegacyChildren, scope 114 // id: %19
  %20 = struct_element_addr %0 : $*Mirror.LegacyChildren, #Mirror.LegacyChildren._oldMirror, scope 114 // user: %22
  %21 = alloc_stack $_Mirror, scope 114           // users: %28, %27, %23, %22
  copy_addr %20 to [initialization] %21 : $*_Mirror, scope 114 // id: %22
  %23 = open_existential_addr %21 : $*_Mirror to $*@opened("155340C8-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 114 // users: %26, %25, %25, %24
  %24 = witness_method $@opened("155340C8-A0C9-11E6-8491-A45E60F21093") _Mirror, #_Mirror.count!getter.1, %23 : $*@opened("155340C8-A0C9-11E6-8491-A45E60F21093") _Mirror : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> Int, scope 114 // user: %25
  %25 = apply %24<@opened("155340C8-A0C9-11E6-8491-A45E60F21093") _Mirror>(%23) : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> Int, scope 114 // users: %34, %31
  destroy_addr %23 : $*@opened("155340C8-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 114 // id: %26
  deinit_existential_addr %21 : $*_Mirror, scope 114 // id: %27
  dealloc_stack %21 : $*_Mirror, scope 114        // id: %28
  destroy_addr %0 : $*Mirror.LegacyChildren, scope 114 // id: %29
  %30 = alloc_ref $_IndexBox<Int>, scope 114      // users: %35, %33, %32
  debug_value %25 : $Int, scope 114               // id: %31
  debug_value %30 : $_IndexBox<Int>, scope 114    // id: %32
  %33 = ref_element_addr %30 : $_IndexBox<Int>, #_IndexBox._base, scope 114 // user: %34
  store %25 to %33 : $*Int, scope 114             // id: %34
  %35 = init_existential_ref %30 : $_IndexBox<Int> : $_IndexBox<Int>, $_AnyIndexBox, scope 114 // users: %46, %42, %39, %37
  debug_value %18 : $_AnyIndexBox, scope 114      // id: %36
  debug_value %35 : $_AnyIndexBox, scope 114      // id: %37
  debug_value %18 : $_AnyIndexBox, scope 114      // id: %38
  debug_value %35 : $_AnyIndexBox, scope 114      // id: %39
  %40 = upcast %1 : $_RandomAccessCollectionBox<Mirror.LegacyChildren> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 114 // users: %45, %43
  debug_value %18 : $_AnyIndexBox, scope 114      // id: %41
  debug_value %35 : $_AnyIndexBox, scope 114      // id: %42
  %43 = ref_element_addr %40 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, #_AnyCollectionBox._startIndex, scope 114 // user: %44
  store %18 to %43 : $*_AnyIndexBox, scope 114    // id: %44
  %45 = ref_element_addr %40 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, #_AnyCollectionBox._endIndex, scope 114 // user: %46
  store %35 to %45 : $*_AnyIndexBox, scope 114    // id: %46
  dealloc_stack %8 : $*Mirror.LegacyChildren, scope 114 // id: %47
  return %1 : $_RandomAccessCollectionBox<Mirror.LegacyChildren>, scope 114 // id: %48
}

sil_scope 115 {  parent @_TTSfq4n_d___TFOVs6Mirror12DisplayStyleCfT6legacyOs18_MirrorDisposition_GSqS0__ : $@convention(thin) (_MirrorDisposition) -> Optional<Mirror.DisplayStyle> }

// specialized Mirror.DisplayStyle.init(legacy : _MirrorDisposition) -> Mirror.DisplayStyle?
sil hidden_external [fragile] @_TTSfq4n_d___TFOVs6Mirror12DisplayStyleCfT6legacyOs18_MirrorDisposition_GSqS0__ : $@convention(thin) (_MirrorDisposition) -> Optional<Mirror.DisplayStyle> {
// %0                                             // users: %2, %1
bb0(%0 : $_MirrorDisposition):
  debug_value %0 : $_MirrorDisposition, scope 115 // id: %1
  switch_enum %0 : $_MirrorDisposition, case #_MirrorDisposition.struct!enumelt: bb11, case #_MirrorDisposition.class!enumelt: bb10, case #_MirrorDisposition.enum!enumelt: bb9, case #_MirrorDisposition.tuple!enumelt: bb8, case #_MirrorDisposition.aggregate!enumelt: bb7, case #_MirrorDisposition.indexContainer!enumelt: bb6, case #_MirrorDisposition.keyContainer!enumelt: bb5, case #_MirrorDisposition.membershipContainer!enumelt: bb4, case #_MirrorDisposition.container!enumelt: bb3, case #_MirrorDisposition.optional!enumelt: bb2, case #_MirrorDisposition.objCObject!enumelt: bb1, scope 115 // id: %2

bb1:                                              // Preds: bb0
  %3 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.class!enumelt, scope 115 // user: %4
  %4 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %3 : $Mirror.DisplayStyle, scope 115 // user: %5
  br bb12(%4 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %5

bb2:                                              // Preds: bb0
  %6 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.optional!enumelt, scope 115 // user: %7
  %7 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %6 : $Mirror.DisplayStyle, scope 115 // user: %8
  br bb12(%7 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %8

bb3:                                              // Preds: bb0
  %9 = builtin "int_trap"() : $Never, scope 115
  unreachable, scope 115                          // id: %10

bb4:                                              // Preds: bb0
  %11 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.set!enumelt, scope 115 // user: %12
  %12 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %11 : $Mirror.DisplayStyle, scope 115 // user: %13
  br bb12(%12 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %13

bb5:                                              // Preds: bb0
  %14 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.dictionary!enumelt, scope 115 // user: %15
  %15 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %14 : $Mirror.DisplayStyle, scope 115 // user: %16
  br bb12(%15 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %16

bb6:                                              // Preds: bb0
  %17 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.collection!enumelt, scope 115 // user: %18
  %18 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %17 : $Mirror.DisplayStyle, scope 115 // user: %19
  br bb12(%18 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %19

bb7:                                              // Preds: bb0
  %20 = enum $Optional<Mirror.DisplayStyle>, #Optional.none!enumelt, scope 115 // user: %21
  br bb12(%20 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %21

bb8:                                              // Preds: bb0
  %22 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.tuple!enumelt, scope 115 // user: %23
  %23 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %22 : $Mirror.DisplayStyle, scope 115 // user: %24
  br bb12(%23 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %24

bb9:                                              // Preds: bb0
  %25 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.enum!enumelt, scope 115 // user: %26
  %26 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %25 : $Mirror.DisplayStyle, scope 115 // user: %27
  br bb12(%26 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %27

bb10:                                             // Preds: bb0
  %28 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.class!enumelt, scope 115 // user: %29
  %29 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %28 : $Mirror.DisplayStyle, scope 115 // user: %30
  br bb12(%29 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %30

bb11:                                             // Preds: bb0
  %31 = enum $Mirror.DisplayStyle, #Mirror.DisplayStyle.struct!enumelt, scope 115 // user: %32
  %32 = enum $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, %31 : $Mirror.DisplayStyle, scope 115 // user: %33
  br bb12(%32 : $Optional<Mirror.DisplayStyle>), scope 115 // id: %33

// %34                                            // user: %35
bb12(%34 : $Optional<Mirror.DisplayStyle>):       // Preds: bb11 bb10 bb9 bb8 bb7 bb6 bb5 bb4 bb2 bb1
  return %34 : $Optional<Mirror.DisplayStyle>, scope 115 // id: %35
}

sil_scope 116 {  parent @_TTSfq4g_n___TFFVs6MirrorcFT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_U_FT_GSqS__ : $@convention(thin) (@guaranteed @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror> }

// specialized Mirror.(init(legacy : _Mirror, subjectType : Any.Type, makeSuperclassMirror : () -> Mirror??) -> Mirror).(closure #1)
sil shared_external [fragile] @_TTSfq4g_n___TFFVs6MirrorcFT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_U_FT_GSqS__ : $@convention(thin) (@guaranteed @box _Mirror, @thick AnyObject.Type) -> @owned Optional<Mirror> {
// %0                                             // user: %2
// %1                                             // users: %21, %20, %4
bb0(%0 : $@box _Mirror, %1 : $@thick AnyObject.Type):
  %2 = project_box %0 : $@box _Mirror, scope 116  // users: %5, %3
  debug_value_addr %2 : $*_Mirror, scope 116      // id: %3
  debug_value %1 : $@thick AnyObject.Type, scope 116 // id: %4
  %5 = open_existential_addr %2 : $*_Mirror to $*@opened("1555FFA2-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 116 // users: %8, %8
  // function_ref _Mirror._superMirror() -> _Mirror?
  %6 = function_ref @_TFEsPs7_Mirror12_superMirrorfT_GSqPS___ : $@convention(method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> @out Optional<_Mirror>, scope 116 // user: %8
  %7 = alloc_stack $Optional<_Mirror>, scope 116  // users: %31, %12, %11, %9, %8
  %8 = apply %6<@opened("1555FFA2-A0C9-11E6-8491-A45E60F21093") _Mirror>(%7, %5) : $@convention(method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> @out Optional<_Mirror>, scope 116
  debug_value_addr %7 : $*Optional<_Mirror>, scope 116 // id: %9
  %10 = alloc_stack $Optional<_Mirror>, scope 116 // users: %30, %16, %13, %11
  copy_addr %7 to [initialization] %10 : $*Optional<_Mirror>, scope 116 // id: %11
  destroy_addr %7 : $*Optional<_Mirror>, scope 116 // id: %12
  switch_enum_addr %10 : $*Optional<_Mirror>, case #Optional.some!enumelt.1: bb2, case #Optional.none!enumelt: bb1, scope 116 // id: %13

bb1:                                              // Preds: bb0
  %14 = enum $Optional<Mirror>, #Optional.none!enumelt, scope 116 // user: %15
  br bb3(%14 : $Optional<Mirror>), scope 116      // id: %15

bb2:                                              // Preds: bb0
  %16 = unchecked_take_enum_data_addr %10 : $*Optional<_Mirror>, #Optional.some!enumelt.1, scope 116 // user: %18
  %17 = alloc_stack $_Mirror, scope 116           // users: %27, %25, %19, %18
  copy_addr [take] %16 to [initialization] %17 : $*_Mirror, scope 116 // id: %18
  debug_value_addr %17 : $*_Mirror, scope 116     // id: %19
  debug_value %1 : $@thick AnyObject.Type, scope 116 // id: %20
  %21 = open_existential_metatype %1 : $@thick AnyObject.Type to $@thick (@opened("15560038-A0C9-11E6-8491-A45E60F21093") AnyObject).Type, scope 116 // user: %22
  %22 = init_existential_metatype %21 : $@thick (@opened("15560038-A0C9-11E6-8491-A45E60F21093") AnyObject).Type, $@thick Any.Type, scope 116 // user: %25
  %23 = enum $Optional<() -> Optional<Mirror>>, #Optional.none!enumelt, scope 116 // user: %25
  // function_ref specialized Mirror.init(legacy : _Mirror, subjectType : Any.Type, makeSuperclassMirror : () -> Mirror??) -> Mirror
  %24 = function_ref @_TTSfq4n_n_n_d___TFVs6MirrorCfT6legacyPs7_Mirror_11subjectTypePMP_20makeSuperclassMirrorGSqFT_GSqS____S_ : $@convention(thin) (@in _Mirror, @thick Any.Type, @owned Optional<() -> Optional<Mirror>>) -> @owned Mirror, scope 116 // user: %25
  %25 = apply %24(%17, %22, %23) : $@convention(thin) (@in _Mirror, @thick Any.Type, @owned Optional<() -> Optional<Mirror>>) -> @owned Mirror, scope 116 // user: %26
  %26 = enum $Optional<Mirror>, #Optional.some!enumelt.1, %25 : $Mirror, scope 116 // user: %28
  dealloc_stack %17 : $*_Mirror, scope 116        // id: %27
  br bb3(%26 : $Optional<Mirror>), scope 116      // id: %28

// %29                                            // user: %32
bb3(%29 : $Optional<Mirror>):                     // Preds: bb2 bb1
  dealloc_stack %10 : $*Optional<_Mirror>, scope 116 // id: %30
  dealloc_stack %7 : $*Optional<_Mirror>, scope 116 // id: %31
  return %29 : $Optional<Mirror>, scope 116       // id: %32
}


// _RandomAccessCollectionBox._makeIterator() -> AnyIterator<A.Iterator.Element>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox13_makeIteratorfT_GVs11AnyIteratorWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@guaranteed _RandomAccessCollectionBox<S>) -> @owned AnyIterator<S.Iterator.Element>


// _RandomAccessCollectionBox._underestimatedCount.getter
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxg20_underestimatedCountSi : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@guaranteed _RandomAccessCollectionBox<S>) -> Int


// _RandomAccessCollectionBox._map<A> ((A.Iterator.Element) throws -> A1) throws -> [A1]
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox4_mapurfzFzWx8Iterator7Element_qd__GSaqd___ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element><T> (@owned @callee_owned (@in S.Iterator.Element) -> (@out T, @error Error), @guaranteed _RandomAccessCollectionBox<S>) -> (@owned Array<T>, @error Error)


// _RandomAccessCollectionBox._filter((A.Iterator.Element) throws -> Bool) throws -> [A.Iterator.Element]
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox7_filterfzFzWx8Iterator7Element_SbGSaWxS0_S1___ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned @callee_owned (@in S.Iterator.Element) -> (Bool, @error Error), @guaranteed _RandomAccessCollectionBox<S>) -> (@owned Array<S.Iterator.Element>, @error Error)


// _RandomAccessCollectionBox._forEach((A.Iterator.Element) throws -> ()) throws -> ()
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox8_forEachfzFzWx8Iterator7Element_T_T_ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned @callee_owned (@in S.Iterator.Element) -> @error Error, @guaranteed _RandomAccessCollectionBox<S>) -> @error Error


// _RandomAccessCollectionBox.__preprocessingPass<A> (() throws -> A1) throws -> A1?
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox19__preprocessingPassurfzFzT_qd__GSqqd___ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element><R> (@owned @callee_owned () -> (@out R, @error Error), @guaranteed _RandomAccessCollectionBox<S>) -> (@out Optional<R>, @error Error)


// _RandomAccessCollectionBox.__copyToContiguousArray() -> ContiguousArray<A.Iterator.Element>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox23__copyToContiguousArrayfT_GVs15ContiguousArrayWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@guaranteed _RandomAccessCollectionBox<S>) -> @owned ContiguousArray<S.Iterator.Element>


// _RandomAccessCollectionBox.__copyContents(initializing : UnsafeMutablePointer<A.Iterator.Element>) -> UnsafeMutablePointer<A.Iterator.Element>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox14__copyContentsfT12initializingGSpWx8Iterator7Element___GSpWxS0_S1___ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (UnsafeMutablePointer<S.Iterator.Element>, @guaranteed _RandomAccessCollectionBox<S>) -> UnsafeMutablePointer<S.Iterator.Element>


// _RandomAccessCollectionBox._dropFirst(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox10_dropFirstfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyRandomAccessCollectionBox<S.Iterator.Element>


// _RandomAccessCollectionBox._dropLast(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox9_dropLastfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyRandomAccessCollectionBox<S.Iterator.Element>


// _RandomAccessCollectionBox._prefix(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox7_prefixfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyRandomAccessCollectionBox<S.Iterator.Element>


// _RandomAccessCollectionBox._suffix(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox7_suffixfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyRandomAccessCollectionBox<S.Iterator.Element>


// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnySequence<A.Iterator.Element>]
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs11AnySequenceWxS0_S1____ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, Bool, @owned @callee_owned (@in S.Iterator.Element) -> (Bool, @error Error), @guaranteed _RandomAccessCollectionBox<S>) -> (@owned Array<AnySequence<S.Iterator.Element>>, @error Error)


// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnyCollection<A.Iterator.Element>]
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs13AnyCollectionWxS0_S1____ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, Bool, @owned @callee_owned (@in S.Iterator.Element) -> (Bool, @error Error), @guaranteed _RandomAccessCollectionBox<S>) -> (@owned Array<AnyCollection<S.Iterator.Element>>, @error Error)


// _RandomAccessCollectionBox.subscript.getter
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxg9subscriptFPs12_AnyIndexBox_Wx8Iterator7Element_ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> @out S.Iterator.Element


// _RandomAccessCollectionBox._index(after : _AnyIndexBox) -> _AnyIndexBox
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_indexfT5afterPs12_AnyIndexBox__PS0__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyIndexBox


// _RandomAccessCollectionBox._formIndex(after : _AnyIndexBox) -> ()
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox10_formIndexfT5afterPs12_AnyIndexBox__T_ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> ()


// _RandomAccessCollectionBox._index(_AnyIndexBox, offsetBy : Int64) -> _AnyIndexBox
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int64_PS0__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, Int64, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyIndexBox


// _RandomAccessCollectionBox._index(_AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> _AnyIndexBox?
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___GSqPS0___ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, Int64, @owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> @owned Optional<_AnyIndexBox>


// _RandomAccessCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64) -> ()
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int64_T_ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@inout _AnyIndexBox, Int64, @guaranteed _RandomAccessCollectionBox<S>) -> ()


// _RandomAccessCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> Bool
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___Sb : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@inout _AnyIndexBox, Int64, @owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> Bool


// _RandomAccessCollectionBox._distance(from : _AnyIndexBox, to : _AnyIndexBox) -> Int64
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox9_distancefT4fromPs12_AnyIndexBox_2toPS0___Vs5Int64 : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> Int64


// _RandomAccessCollectionBox._count.getter
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxg6_countVs5Int64 : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@guaranteed _RandomAccessCollectionBox<S>) -> Int64


// _RandomAccessCollectionBox._first.getter
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxg6_firstGSqWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@guaranteed _RandomAccessCollectionBox<S>) -> @out Optional<S.Iterator.Element>


// _RandomAccessCollectionBox.subscript.getter
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyRandomAccessCollectionBox<S.Iterator.Element>


// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnyBidirectionalCollection<A.Iterator.Element>]
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs26AnyBidirectionalCollectionWxS0_S1____ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, Bool, @owned @callee_owned (@in S.Iterator.Element) -> (Bool, @error Error), @guaranteed _RandomAccessCollectionBox<S>) -> (@owned Array<AnyBidirectionalCollection<S.Iterator.Element>>, @error Error)


// _RandomAccessCollectionBox._index(before : _AnyIndexBox) -> _AnyIndexBox
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_indexfT6beforePs12_AnyIndexBox__PS0__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> @owned _AnyIndexBox


// _RandomAccessCollectionBox._formIndex(before : _AnyIndexBox) -> ()
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox10_formIndexfT6beforePs12_AnyIndexBox__T_ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _AnyIndexBox, @guaranteed _RandomAccessCollectionBox<S>) -> ()


// _RandomAccessCollectionBox._last.getter
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxg5_lastGSqWx8Iterator7Element__ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@guaranteed _RandomAccessCollectionBox<S>) -> @out Optional<S.Iterator.Element>


// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnyRandomAccessCollection<A.Iterator.Element>]
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs25AnyRandomAccessCollectionWxS0_S1____ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (Int, Bool, @owned @callee_owned (@in S.Iterator.Element) -> (Bool, @error Error), @guaranteed _RandomAccessCollectionBox<S>) -> (@owned Array<AnyRandomAccessCollection<S.Iterator.Element>>, @error Error)


// _RandomAccessCollectionBox.init(_base : A) -> _RandomAccessCollectionBox<A>
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxcfT5_basex_GS_x_ : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@in S, @owned _RandomAccessCollectionBox<S>) -> @owned _RandomAccessCollectionBox<S>


// _RandomAccessCollectionBox.__deallocating_deinit
sil hidden_external [fragile] @_TFCs26_RandomAccessCollectionBoxD : $@convention(method) <S where S : RandomAccessCollection, S.Index : Comparable, S.IndexDistance : SignedInteger, S.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.IndexDistance.Stride : SignedNumber, S.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices : RandomAccessCollection, S.Indices.IndexDistance : SignedInteger, S.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.IndexDistance.Stride : SignedNumber, S.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices : BidirectionalCollection, S.Indices.Indices : RandomAccessIndexable, S.Indices.Indices.Index : Comparable, S.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices : BidirectionalIndexable, S.Indices.Indices.Indices : Collection, S.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.IndexDistance : SignedInteger, S.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.Indices.Indices : IndexableBase, S.Indices.Indices.Indices.Indices : Sequence, S.Indices.Indices.Indices.Indices.Index : Comparable, S.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.Indices.SubSequence : IndexableBase, S.Indices.Indices.Indices.SubSequence : Sequence, S.Indices.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence : BidirectionalIndexable, S.Indices.Indices.SubSequence : Collection, S.Indices.Indices.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.Indices.Indices.SubSequence.Indices : IndexableBase, S.Indices.Indices.SubSequence.Indices : Sequence, S.Indices.Indices.SubSequence.Indices.Index : Comparable, S.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.Indices.Indices.SubSequence.SubSequence : Sequence, S.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.Indices.Iterator : IteratorProtocol, S.Iterator : IteratorProtocol, S.SubSequence : RandomAccessCollection, S.SubSequence.IndexDistance : SignedInteger, S.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices : RandomAccessCollection, S.SubSequence.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices : BidirectionalCollection, S.SubSequence.Indices.Indices : RandomAccessIndexable, S.SubSequence.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices : BidirectionalIndexable, S.SubSequence.Indices.Indices.Indices : Collection, S.SubSequence.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.Indices.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.Indices.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.Indices.Indices : IndexableBase, S.SubSequence.Indices.Indices.Indices.Indices : Sequence, S.SubSequence.Indices.Indices.Indices.Indices.Index : Comparable, S.SubSequence.Indices.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Indices.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.Indices.SubSequence : Sequence, S.SubSequence.Indices.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence : BidirectionalIndexable, S.SubSequence.Indices.Indices.SubSequence : Collection, S.SubSequence.Indices.Indices.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.IndexDistance : SignedInteger, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride : SignedNumber, S.SubSequence.Indices.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral, S.SubSequence.Indices.Indices.SubSequence.Indices : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.Indices : Sequence, S.SubSequence.Indices.Indices.SubSequence.Indices.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Indices.SubSequence.SubSequence : IndexableBase, S.SubSequence.Indices.Indices.SubSequence.SubSequence : Sequence, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Index : Comparable, S.SubSequence.Indices.Indices.SubSequence.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Indices.Iterator : IteratorProtocol, S.SubSequence.Iterator : IteratorProtocol, S.SubSequence.Iterator.Element == S.Iterator.Element, S.SubSequence.SubSequence == S.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Index == S.SubSequence.SubSequence.SubSequence.SubSequence.Index, S.SubSequence._Element == S.SubSequence.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.SubSequence == S.SubSequence.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Iterator == S.SubSequence.SubSequence.Iterator, S.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Iterator.Element, S.SubSequence.IndexDistance == S.SubSequence.SubSequence.IndexDistance, S.SubSequence.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.IndexDistance.Stride == S.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices == S.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices._Element == S.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.SubSequence.Index == S.SubSequence.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.SubSequence._Element == S.SubSequence.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence.SubSequence == S.SubSequence.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.SubSequence.Iterator == S.SubSequence.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.SubSequence.Iterator.Element == S.SubSequence.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.SubSequence.Indices.Indices.Iterator.Element, S.SubSequence.Index == S.Index, S.SubSequence.Indices.Iterator.Element == S.Index, S.SubSequence.Indices.Index == S.Index, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Index, S.SubSequence.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence._Element, S.SubSequence.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Iterator == S.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.IndexDistance, S.SubSequence.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.IndexDistance.Stride, S.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices, S.SubSequence.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Index, S.SubSequence.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices._Element, S.SubSequence.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Index == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Index, S.SubSequence.Indices.Indices.SubSequence._Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence._Element, S.SubSequence.Indices.Indices.SubSequence.SubSequence == S.SubSequence.Indices.SubSequence.Indices.SubSequence.SubSequence, S.SubSequence.Indices.Indices.SubSequence.Iterator == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator, S.SubSequence.Indices.Indices.SubSequence.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.SubSequence.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Iterator, S.SubSequence.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Iterator.Element, S.SubSequence.Indices.Indices.IndexDistance == S.SubSequence.Indices.SubSequence.Indices.IndexDistance, S.SubSequence.Indices.Indices.IndexDistance.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance.Stride == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride, S.SubSequence.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.SubSequence.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.SubSequence.Indices.Indices.IndexDistance._DisabledRangeIndex == S.SubSequence.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.SubSequence.Indices.Indices.Indices == S.SubSequence.Indices.SubSequence.Indices.Indices, S.SubSequence.Indices.Indices.Indices.Index == S.SubSequence.Indices.SubSequence.Indices.Indices.Index, S.SubSequence.Indices.Indices.Indices._Element == S.SubSequence.Indices.SubSequence.Indices.Indices._Element, S.SubSequence.Indices.Indices.Indices.SubSequence == S.SubSequence.Indices.SubSequence.Indices.Indices.SubSequence, S.SubSequence.Indices.Indices.Indices.Iterator == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator, S.SubSequence.Indices.Indices.Indices.Iterator.Element == S.SubSequence.Indices.SubSequence.Indices.Indices.Iterator.Element, S.Indices.Iterator.Element == S.Index, S.Indices.Index == S.Index, S.Indices.SubSequence == S.Indices, S.Indices.Index == S.Indices.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence, S.Indices.Index == S.Indices.SubSequence.SubSequence.SubSequence.Index, S.Indices._Element == S.Indices.SubSequence.SubSequence.SubSequence._Element, S.Indices.SubSequence == S.Indices.SubSequence.SubSequence.SubSequence.SubSequence, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.SubSequence.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.SubSequence.Indices.SubSequence, S.Indices.Indices.Iterator == S.Indices.SubSequence.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.SubSequence.Indices.Iterator.Element, S.Indices.Iterator == S.Indices.SubSequence.Iterator, S.Indices.Iterator.Element == S.Indices.SubSequence.Iterator.Element, S.Indices.IndexDistance == S.Indices.SubSequence.IndexDistance, S.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.IntegerLiteralType, S.Indices.IndexDistance.Stride == S.Indices.SubSequence.IndexDistance.Stride, S.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.IndexDistance.Stride.IntegerLiteralType, S.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.IndexDistance._DisabledRangeIndex, S.Indices.Indices == S.Indices.SubSequence.Indices, S.Indices.Indices.Index == S.Indices.SubSequence.Indices.Index, S.Indices.Indices._Element == S.Indices.SubSequence.Indices._Element, S.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.SubSequence, S.Indices.Indices.SubSequence.Index == S.Indices.SubSequence.Indices.SubSequence.Index, S.Indices.Indices.SubSequence._Element == S.Indices.SubSequence.Indices.SubSequence._Element, S.Indices.Indices.SubSequence.SubSequence == S.Indices.SubSequence.Indices.SubSequence.SubSequence, S.Indices.Indices.SubSequence.Iterator == S.Indices.SubSequence.Indices.SubSequence.Iterator, S.Indices.Indices.SubSequence.Iterator.Element == S.Indices.SubSequence.Indices.SubSequence.Iterator.Element, S.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Iterator, S.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Iterator.Element, S.Indices.Indices.IndexDistance == S.Indices.SubSequence.Indices.IndexDistance, S.Indices.Indices.IndexDistance.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.IntegerLiteralType, S.Indices.Indices.IndexDistance.Stride == S.Indices.SubSequence.Indices.IndexDistance.Stride, S.Indices.Indices.IndexDistance.Stride.IntegerLiteralType == S.Indices.SubSequence.Indices.IndexDistance.Stride.IntegerLiteralType, S.Indices.Indices.IndexDistance._DisabledRangeIndex == S.Indices.SubSequence.Indices.IndexDistance._DisabledRangeIndex, S.Indices.Indices.Indices == S.Indices.SubSequence.Indices.Indices, S.Indices.Indices.Indices.Index == S.Indices.SubSequence.Indices.Indices.Index, S.Indices.Indices.Indices._Element == S.Indices.SubSequence.Indices.Indices._Element, S.Indices.Indices.Indices.SubSequence == S.Indices.SubSequence.Indices.Indices.SubSequence, S.Indices.Indices.Indices.Iterator == S.Indices.SubSequence.Indices.Indices.Iterator, S.Indices.Indices.Indices.Iterator.Element == S.Indices.SubSequence.Indices.Indices.Iterator.Element> (@owned _RandomAccessCollectionBox<S>) -> ()


// _AnyRandomAccessCollectionBox.init(_startIndex : _AnyIndexBox, endIndex : _AnyIndexBox) -> _AnyRandomAccessCollectionBox<A>
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBoxcfT11_startIndexPs12_AnyIndexBox_8endIndexPS0___GS_x_ : $@convention(method) <Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @owned _AnyRandomAccessCollectionBox<Element>) -> @owned _AnyRandomAccessCollectionBox<Element>

sil_scope 117 {  parent @_TFVVs6Mirror14LegacyChildreng10startIndexSi : $@convention(method) (@in_guaranteed Mirror.LegacyChildren) -> Int }

// Mirror.LegacyChildren.startIndex.getter
sil hidden_external [fragile] @_TFVVs6Mirror14LegacyChildreng10startIndexSi : $@convention(method) (@in_guaranteed Mirror.LegacyChildren) -> Int {
// %0                                             // users: %2, %1
bb0(%0 : $*Mirror.LegacyChildren):
  debug_value_addr %0 : $*Mirror.LegacyChildren, scope 117 // id: %1
  %2 = struct_element_addr %0 : $*Mirror.LegacyChildren, #Mirror.LegacyChildren._oldMirror, scope 117 // user: %4
  %3 = alloc_stack $_Mirror, scope 117            // users: %24, %23, %5, %4
  copy_addr %2 to [initialization] %3 : $*_Mirror, scope 117 // id: %4
  %5 = open_existential_addr %3 : $*_Mirror to $*@opened("1553444C-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 117 // users: %9, %8, %8
  // function_ref _Mirror._superMirror() -> _Mirror?
  %6 = function_ref @_TFEsPs7_Mirror12_superMirrorfT_GSqPS___ : $@convention(method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> @out Optional<_Mirror>, scope 117 // user: %8
  %7 = alloc_stack $Optional<_Mirror>, scope 117  // users: %22, %12, %11, %8
  %8 = apply %6<@opened("1553444C-A0C9-11E6-8491-A45E60F21093") _Mirror>(%7, %5) : $@convention(method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> @out Optional<_Mirror>, scope 117
  destroy_addr %5 : $*@opened("1553444C-A0C9-11E6-8491-A45E60F21093") _Mirror, scope 117 // id: %9
  %10 = alloc_stack $Optional<_Mirror>, scope 117 // users: %21, %16, %13, %11
  copy_addr %7 to [initialization] %10 : $*Optional<_Mirror>, scope 117 // id: %11
  destroy_addr %7 : $*Optional<_Mirror>, scope 117 // id: %12
  switch_enum_addr %10 : $*Optional<_Mirror>, case #Optional.some!enumelt.1: bb2, case #Optional.none!enumelt: bb1, scope 117 // id: %13

bb1:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int1, -1, scope 117 // user: %15
  br bb3(%14 : $Builtin.Int1), scope 117          // id: %15

bb2:                                              // Preds: bb0
  %16 = unchecked_take_enum_data_addr %10 : $*Optional<_Mirror>, #Optional.some!enumelt.1, scope 117 // user: %17
  destroy_addr %16 : $*_Mirror, scope 117         // id: %17
  %18 = integer_literal $Builtin.Int1, 0, scope 117 // user: %19
  br bb3(%18 : $Builtin.Int1), scope 117          // id: %19

// %20                                            // user: %25
bb3(%20 : $Builtin.Int1):                         // Preds: bb2 bb1
  dealloc_stack %10 : $*Optional<_Mirror>, scope 117 // id: %21
  dealloc_stack %7 : $*Optional<_Mirror>, scope 117 // id: %22
  deinit_existential_addr %3 : $*_Mirror, scope 117 // id: %23
  dealloc_stack %3 : $*_Mirror, scope 117         // id: %24
  cond_br %20, bb5, bb4, scope 117                // id: %25

bb4:                                              // Preds: bb3
  %26 = integer_literal $Builtin.Int64, 1, scope 117 // user: %27
  br bb6(%26 : $Builtin.Int64), scope 117         // id: %27

bb5:                                              // Preds: bb3
  %28 = integer_literal $Builtin.Int64, 0, scope 117 // user: %29
  br bb6(%28 : $Builtin.Int64), scope 117         // id: %29

// %30                                            // user: %31
bb6(%30 : $Builtin.Int64):                        // Preds: bb5 bb4
  %31 = struct $Int (%30 : $Builtin.Int64), scope 117 // user: %32
  return %31 : $Int, scope 117                    // id: %32
}

sil_scope 118 {  parent @_TFEsPs7_Mirror12_superMirrorfT_GSqPS___ : $@convention(method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> @out Optional<_Mirror> }
sil_scope 119 {  parent @_TFsoi2eeFTGSqPMP__GSqPMP___Sb : $@convention(thin) (Optional<Any.Type>, Optional<Any.Type>) -> Bool }
sil_scope 120 {  parent 118 }
sil_scope 121 {  parent 119 inlined_at 120 }
sil_scope 122 {  parent 118 }
sil_scope 123 {  parent 119 inlined_at 122 }

// _Mirror._superMirror() -> _Mirror?
sil hidden_external [fragile] @_TFEsPs7_Mirror12_superMirrorfT_GSqPS___ : $@convention(method) <Self where Self : _Mirror> (@in_guaranteed Self) -> @out Optional<_Mirror> {
// %0                                             // users: %86, %84, %81
// %1                                             // users: %17, %4, %2
bb0(%0 : $*Optional<_Mirror>, %1 : $*Self):
  debug_value_addr %1 : $*Self, scope 118         // id: %2
  %3 = alloc_stack $Self, scope 118               // users: %11, %7, %6, %4
  copy_addr %1 to [initialization] %3 : $*Self, scope 118 // id: %4
  %5 = witness_method $Self, #_Mirror.count!getter.1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> Int, scope 118 // user: %6
  %6 = apply %5<Self>(%3) : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (@in_guaranteed τ_0_0) -> Int, scope 118 // user: %9
  destroy_addr %3 : $*Self, scope 118             // id: %7
  %8 = integer_literal $Builtin.Int64, 0, scope 118 // users: %15, %10
  %9 = struct_extract %6 : $Int, #Int._value, scope 118 // user: %10
  %10 = builtin "cmp_sgt_Int64"(%9 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int1, scope 118 // user: %12
  dealloc_stack %3 : $*Self, scope 118            // id: %11
  cond_br %10, bb2, bb1, scope 118                // id: %12

bb1:                                              // Preds: bb0
  br bb7, scope 118                               // id: %13

bb2:                                              // Preds: bb0
  %14 = alloc_stack $_Mirror, scope 118           // users: %76, %88, %87, %85, %77, %23, %19
  %15 = struct $Int (%8 : $Builtin.Int64), scope 118 // user: %19
  %16 = alloc_stack $Self, scope 118              // users: %22, %20, %19, %17
  copy_addr %1 to [initialization] %16 : $*Self, scope 118 // id: %17
  %18 = witness_method $Self, #_Mirror.subscript!getter.1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (Int, @in_guaranteed τ_0_0) -> (@owned String, @out _Mirror), scope 118 // user: %19
  %19 = apply %18<Self>(%14, %15, %16) : $@convention(witness_method) <τ_0_0 where τ_0_0 : _Mirror> (Int, @in_guaranteed τ_0_0) -> (@owned String, @out _Mirror), scope 118 // user: %21
  destroy_addr %16 : $*Self, scope 118            // id: %20
  release_value %19 : $String, scope 118          // id: %21
  dealloc_stack %16 : $*Self, scope 118           // id: %22
  %23 = existential_metatype $@thick _Mirror.Type, %14 : $*_Mirror, scope 118 // user: %24
  %24 = open_existential_metatype %23 : $@thick _Mirror.Type to $@thick (@opened("15538FE2-A0C9-11E6-8491-A45E60F21093") _Mirror).Type, scope 118 // user: %25
  %25 = init_existential_metatype %24 : $@thick (@opened("15538FE2-A0C9-11E6-8491-A45E60F21093") _Mirror).Type, $@thick Any.Type, scope 118 // users: %27, %26
  debug_value %25 : $@thick Any.Type, scope 118   // id: %26
  %27 = enum $Optional<Any.Type>, #Optional.some!enumelt.1, %25 : $@thick Any.Type, scope 118 // users: %62, %59, %42, %31
  %28 = metatype $@thick _ClassSuperMirror.Type, scope 118 // user: %29
  %29 = init_existential_metatype %28 : $@thick _ClassSuperMirror.Type, $@thick Any.Type, scope 118 // user: %30
  %30 = enum $Optional<Any.Type>, #Optional.some!enumelt.1, %29 : $@thick Any.Type, scope 118 // users: %48, %32
  debug_value %27 : $Optional<Any.Type>, scope 121 // id: %31
  debug_value %30 : $Optional<Any.Type>, scope 121 // id: %32
  %33 = metatype $@thick Optional<Any.Type>.Type, scope 121 // user: %34
  %34 = builtin "sizeof"<Optional<Any.Type>>(%33 : $@thick Optional<Any.Type>.Type) : $Builtin.Word, scope 121 // user: %37
  %35 = metatype $@thick Int.Type, scope 121      // user: %36
  %36 = builtin "sizeof"<Int>(%35 : $@thick Int.Type) : $Builtin.Word, scope 121 // user: %37
  %37 = builtin "cmp_eq_Word"(%34 : $Builtin.Word, %36 : $Builtin.Word) : $Builtin.Int1, scope 121 // user: %39
  %38 = integer_literal $Builtin.Int1, -1, scope 121 // user: %39
  %39 = builtin "xor_Int1"(%37 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1, scope 121 // user: %40
  cond_fail %39 : $Builtin.Int1, scope 121        // id: %40
  %41 = alloc_stack $Optional<Any.Type>, scope 121 // users: %46, %43, %42
  store %27 to %41 : $*Optional<Any.Type>, scope 121 // id: %42
  %43 = unchecked_addr_cast %41 : $*Optional<Any.Type> to $*Int, scope 121 // user: %44
  %44 = struct_element_addr %43 : $*Int, #Int._value, scope 121 // user: %45
  %45 = load %44 : $*Builtin.Int64, scope 121     // user: %53
  dealloc_stack %41 : $*Optional<Any.Type>, scope 121 // id: %46
  %47 = alloc_stack $Optional<Any.Type>, scope 121 // users: %52, %49, %48
  store %30 to %47 : $*Optional<Any.Type>, scope 121 // id: %48
  %49 = unchecked_addr_cast %47 : $*Optional<Any.Type> to $*Int, scope 121 // user: %50
  %50 = struct_element_addr %49 : $*Int, #Int._value, scope 121 // user: %51
  %51 = load %50 : $*Builtin.Int64, scope 121     // user: %53
  dealloc_stack %47 : $*Optional<Any.Type>, scope 121 // id: %52
  %53 = builtin "cmp_eq_Int64"(%45 : $Builtin.Int64, %51 : $Builtin.Int64) : $Builtin.Int1, scope 121 // user: %54
  cond_br %53, bb3, bb4, scope 118                // id: %54

bb3:                                              // Preds: bb2
  br bb8, scope 118                               // id: %55

bb4:                                              // Preds: bb2
  %56 = metatype $@thick _ObjCSuperMirror.Type, scope 118 // user: %57
  %57 = init_existential_metatype %56 : $@thick _ObjCSuperMirror.Type, $@thick Any.Type, scope 118 // user: %58
  %58 = enum $Optional<Any.Type>, #Optional.some!enumelt.1, %57 : $@thick Any.Type, scope 118 // users: %68, %60
  debug_value %27 : $Optional<Any.Type>, scope 123 // id: %59
  debug_value %58 : $Optional<Any.Type>, scope 123 // id: %60
  %61 = alloc_stack $Optional<Any.Type>, scope 123 // users: %66, %63, %62
  store %27 to %61 : $*Optional<Any.Type>, scope 123 // id: %62
  %63 = unchecked_addr_cast %61 : $*Optional<Any.Type> to $*Int, scope 123 // user: %64
  %64 = struct_element_addr %63 : $*Int, #Int._value, scope 123 // user: %65
  %65 = load %64 : $*Builtin.Int64, scope 123     // user: %73
  dealloc_stack %61 : $*Optional<Any.Type>, scope 123 // id: %66
  %67 = alloc_stack $Optional<Any.Type>, scope 123 // users: %72, %69, %68
  store %58 to %67 : $*Optional<Any.Type>, scope 123 // id: %68
  %69 = unchecked_addr_cast %67 : $*Optional<Any.Type> to $*Int, scope 123 // user: %70
  %70 = struct_element_addr %69 : $*Int, #Int._value, scope 123 // user: %71
  %71 = load %70 : $*Builtin.Int64, scope 123     // user: %73
  dealloc_stack %67 : $*Optional<Any.Type>, scope 123 // id: %72
  %73 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %71 : $Builtin.Int64) : $Builtin.Int1, scope 123 // user: %74
  cond_br %73, bb5, bb6, scope 118                // id: %74

bb5:                                              // Preds: bb4
  br bb8, scope 118                               // id: %75

bb6:                                              // Preds: bb4
  destroy_addr %14 : $*_Mirror, scope 118         // id: %76
  dealloc_stack %14 : $*_Mirror, scope 118        // id: %77
  br bb7, scope 118                               // id: %78

bb7:                                              // Preds: bb1 bb6
  %79 = alloc_stack $Optional<_Mirror>, scope 118 // users: %82, %81, %80
  inject_enum_addr %79 : $*Optional<_Mirror>, #Optional.none!enumelt, scope 118 // id: %80
  copy_addr [take] %79 to [initialization] %0 : $*Optional<_Mirror>, scope 118 // id: %81
  dealloc_stack %79 : $*Optional<_Mirror>, scope 118 // id: %82
  br bb9, scope 118                               // id: %83

bb8:                                              // Preds: bb5 bb3
  %84 = init_enum_data_addr %0 : $*Optional<_Mirror>, #Optional.some!enumelt.1, scope 118 // user: %85
  copy_addr %14 to [initialization] %84 : $*_Mirror, scope 118 // id: %85
  inject_enum_addr %0 : $*Optional<_Mirror>, #Optional.some!enumelt.1, scope 118 // id: %86
  destroy_addr %14 : $*_Mirror, scope 118         // id: %87
  dealloc_stack %14 : $*_Mirror, scope 118        // id: %88
  br bb9, scope 118                               // id: %89

bb9:                                              // Preds: bb8 bb7
  %90 = tuple (), scope 118                       // user: %91
  return %90 : $(), scope 118                     // id: %91
}


// _IndexBox.init(_base : A) -> _IndexBox<A>
sil hidden_external [fragile] @_TFCs9_IndexBoxcfT5_basex_GS_x_ : $@convention(method) <BaseIndex where BaseIndex : Comparable> (@in BaseIndex, @owned _IndexBox<BaseIndex>) -> @owned _IndexBox<BaseIndex>


// _IndexBox.__deallocating_deinit
sil hidden_external [fragile] @_TFCs9_IndexBoxD : $@convention(method) <BaseIndex where BaseIndex : Comparable> (@owned _IndexBox<BaseIndex>) -> ()


// protocol witness for _AnyIndexBox._typeID.getter in conformance <A where ...> _IndexBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_g7_typeIDVs16ObjectIdentifier : $@convention(witness_method) <BaseIndex where BaseIndex : Comparable> (@guaranteed _IndexBox<BaseIndex>) -> ObjectIdentifier


// protocol witness for _AnyIndexBox._unbox<A where ...> () -> A1? in conformance <A where ...> _IndexBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_6_unboxuRd__S_rfT_GSqqd___ : $@convention(witness_method) <BaseIndex where BaseIndex : Comparable><T where T : Comparable> (@guaranteed _IndexBox<BaseIndex>) -> @out Optional<T>


// protocol witness for _AnyIndexBox._isEqual(to : _AnyIndexBox) -> Bool in conformance <A where ...> _IndexBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_8_isEqualfT2toPS1___Sb : $@convention(witness_method) <BaseIndex where BaseIndex : Comparable> (@owned _AnyIndexBox, @guaranteed _IndexBox<BaseIndex>) -> Bool


// protocol witness for _AnyIndexBox._isLess(than : _AnyIndexBox) -> Bool in conformance <A where ...> _IndexBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_7_isLessfT4thanPS1___Sb : $@convention(witness_method) <BaseIndex where BaseIndex : Comparable> (@owned _AnyIndexBox, @guaranteed _IndexBox<BaseIndex>) -> Bool


// _AnyBidirectionalCollectionBox.init(_startIndex : _AnyIndexBox, endIndex : _AnyIndexBox) -> _AnyBidirectionalCollectionBox<A>
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBoxcfT11_startIndexPs12_AnyIndexBox_8endIndexPS0___GS_x_ : $@convention(method) <Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @owned _AnyBidirectionalCollectionBox<Element>) -> @owned _AnyBidirectionalCollectionBox<Element>


// _AnyCollectionBox.init(_startIndex : _AnyIndexBox, endIndex : _AnyIndexBox) -> _AnyCollectionBox<A>
sil hidden_external [fragile] @_TFCs17_AnyCollectionBoxcfT11_startIndexPs12_AnyIndexBox_8endIndexPS0___GS_x_ : $@convention(method) <Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @owned _AnyCollectionBox<Element>) -> @owned _AnyCollectionBox<Element>


// _AnySequenceBox.init() -> _AnySequenceBox<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBoxcfT_GS_x_ : $@convention(method) <Element> (@owned _AnySequenceBox<Element>) -> @owned _AnySequenceBox<Element>


// _ContiguousArrayStorage.init() -> _ContiguousArrayStorage<A>
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStoragecfT_GS_x_ : $@convention(method) <Element> (@owned _ContiguousArrayStorage<Element>) -> @owned _ContiguousArrayStorage<Element>


// _ContiguousArrayStorageBase.withUnsafeBufferOfObjects<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A
sil hidden_external [fragile] @_TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx : $@convention(method) <R> (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> (@out R, @error Error), @guaranteed _ContiguousArrayStorageBase) -> (@out R, @error Error)


// _ContiguousArrayStorage1._withVerbatimBridgedUnsafeBuffer<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A?
sil hidden_external [fragile] @_TFCs24_ContiguousArrayStorage132_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_ : $@convention(method) <R> (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> (@out R, @error Error), @guaranteed _ContiguousArrayStorage1) -> (@out Optional<R>, @error Error)


// _ContiguousArrayStorage._getNonVerbatimBridgedCount() -> Int
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorage27_getNonVerbatimBridgedCountfT_Si : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> Int


// _ContiguousArrayStorage._getNonVerbatimBridgedHeapBuffer() -> _HeapBuffer<Int, AnyObject>
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorage32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__ : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @owned _HeapBuffer<Int, AnyObject>


// _ContiguousArrayStorage.staticElementType.getter
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorageg17staticElementTypePMP_ : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @thick Any.Type


// _ContiguousArrayStorage._withVerbatimBridgedUnsafeBufferImpl((UnsafeBufferPointer<AnyObject>) throws -> ()) throws -> ()
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorage36_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_ : $@convention(method) <Element> (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> @error Error, @guaranteed _ContiguousArrayStorage<Element>) -> @error Error


// _ContiguousArrayStorage.__deallocating_deinit
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorageD : $@convention(method) <Element> (@owned _ContiguousArrayStorage<Element>) -> ()


// _ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A?
sil hidden_external [fragile] @_TFCs27_ContiguousArrayStorageBase32_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_ : $@convention(method) <R> (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> (@out R, @error Error), @guaranteed _ContiguousArrayStorageBase) -> (@out Optional<R>, @error Error)


// _IteratorBox.init(A) -> _IteratorBox<A>
sil hidden_external [fragile] @_TFCs12_IteratorBoxcfxGS_x_ : $@convention(method) <Base where Base : IteratorProtocol> (@in Base, @owned _IteratorBox<Base>) -> @owned _IteratorBox<Base>


// _IteratorBox.next() -> A.Element?
sil hidden_external [fragile] @_TFCs12_IteratorBox4nextfT_GSqwx7Element_ : $@convention(method) <Base where Base : IteratorProtocol> (@guaranteed _IteratorBox<Base>) -> @out Optional<Base.Element>


// _IteratorBox.__deallocating_deinit
sil hidden_external [fragile] @_TFCs12_IteratorBoxD : $@convention(method) <Base where Base : IteratorProtocol> (@owned _IteratorBox<Base>) -> ()


// _AnyIteratorBoxBase.init() -> _AnyIteratorBoxBase<A>
sil hidden_external [fragile] @_TFCs19_AnyIteratorBoxBasecfT_GS_x_ : $@convention(method) <Element> (@owned _AnyIteratorBoxBase<Element>) -> @owned _AnyIteratorBoxBase<Element>


// swift_stdlib_getErrorDefaultUserInfo
sil @swift_stdlib_getErrorDefaultUserInfo : $@convention(thin) (@owned Error) -> @owned Optional<AnyObject>

sil_scope 124 {  parent @_TTSg5O5throw7MyErrorS0_s8HashableS____TFVs11AnyHashableCuRxs8HashablerfxS_ : $@convention(method) (MyError, @thin AnyHashable.Type) -> @out AnyHashable }

// specialized AnyHashable.init<A where ...> (A) -> AnyHashable
sil shared @_TTSg5O5throw7MyErrorS0_s8HashableS____TFVs11AnyHashableCuRxs8HashablerfxS_ : $@convention(method) (MyError, @thin AnyHashable.Type) -> @out AnyHashable {
// %0                                             // user: %34
// %1                                             // users: %11, %5, %4
bb0(%0 : $*AnyHashable, %1 : $MyError, %2 : $@thin AnyHashable.Type):
  %3 = alloc_stack $MyError, scope 124            // users: %38, %54, %7, %4
  store %1 to %3 : $*MyError, scope 124           // id: %4
  debug_value %1 : $MyError, scope 124            // id: %5
  %6 = alloc_stack $AnyHashable, scope 124        // users: %52, %48, %37, %35, %34, %31
  debug_value_addr %3 : $*MyError, scope 124      // id: %7
  %8 = alloc_stack $Optional<AnyHashable>, scope 124 // users: %29, %58, %40, %32, %30, %23
  %9 = alloc_stack $Optional<_HasCustomAnyHashableRepresentation>, scope 124 // users: %60, %57, %27, %20, %18, %14, %12
  %10 = alloc_stack $MyError, scope 124           // users: %11, %13, %56, %26
  store %1 to %10 : $*MyError, scope 124          // id: %11
  %12 = init_enum_data_addr %9 : $*Optional<_HasCustomAnyHashableRepresentation>, #Optional.some!enumelt.1, scope 124 // user: %13
  checked_cast_addr_br take_always MyError in %10 : $*MyError to _HasCustomAnyHashableRepresentation in %12 : $*_HasCustomAnyHashableRepresentation, bb1, bb9, scope 124 // id: %13

bb1:                                              // Preds: bb0
  inject_enum_addr %9 : $*Optional<_HasCustomAnyHashableRepresentation>, #Optional.some!enumelt.1, scope 124 // id: %14
  br bb2, scope 124                               // id: %15

bb2:                                              // Preds: bb9 bb1
  %16 = integer_literal $Builtin.Int1, -1, scope 124 // user: %18
  %17 = integer_literal $Builtin.Int1, 0, scope 124 // user: %18
  %18 = select_enum_addr %9 : $*Optional<_HasCustomAnyHashableRepresentation>, case #Optional.some!enumelt.1: %16, case #Optional.none!enumelt: %17 : $Builtin.Int1, scope 124 // user: %19
  cond_br %18, bb3, bb8, scope 124                // id: %19

bb3:                                              // Preds: bb2
  %20 = unchecked_take_enum_data_addr %9 : $*Optional<_HasCustomAnyHashableRepresentation>, #Optional.some!enumelt.1, scope 124 // users: %25, %21
  %21 = open_existential_addr %20 : $*_HasCustomAnyHashableRepresentation to $*@opened("156C384E-A0C9-11E6-8491-A45E60F21093") _HasCustomAnyHashableRepresentation, scope 124 // users: %24, %23, %23, %22
  %22 = witness_method $@opened("156C384E-A0C9-11E6-8491-A45E60F21093") _HasCustomAnyHashableRepresentation, #_HasCustomAnyHashableRepresentation._toCustomAnyHashable!1, %21 : $*@opened("156C384E-A0C9-11E6-8491-A45E60F21093") _HasCustomAnyHashableRepresentation : $@convention(witness_method) <τ_0_0 where τ_0_0 : _HasCustomAnyHashableRepresentation> (@in_guaranteed τ_0_0) -> @out Optional<AnyHashable>, scope 124 // user: %23
  %23 = apply %22<@opened("156C384E-A0C9-11E6-8491-A45E60F21093") _HasCustomAnyHashableRepresentation>(%8, %21) : $@convention(witness_method) <τ_0_0 where τ_0_0 : _HasCustomAnyHashableRepresentation> (@in_guaranteed τ_0_0) -> @out Optional<AnyHashable>, scope 124
  destroy_addr %21 : $*@opened("156C384E-A0C9-11E6-8491-A45E60F21093") _HasCustomAnyHashableRepresentation, scope 124 // id: %24
  deinit_existential_addr %20 : $*_HasCustomAnyHashableRepresentation, scope 124 // id: %25
  dealloc_stack %10 : $*MyError, scope 124        // id: %26
  dealloc_stack %9 : $*Optional<_HasCustomAnyHashableRepresentation>, scope 124 // id: %27
  br bb4, scope 124                               // id: %28

bb4:                                              // Preds: bb8 bb3
  switch_enum_addr %8 : $*Optional<AnyHashable>, case #Optional.some!enumelt.1: bb5, case #Optional.none!enumelt: bb7, scope 124 // id: %29

bb5:                                              // Preds: bb4
  %30 = unchecked_take_enum_data_addr %8 : $*Optional<AnyHashable>, #Optional.some!enumelt.1, scope 124 // user: %31
  copy_addr [take] %30 to [initialization] %6 : $*AnyHashable, scope 124 // id: %31
  dealloc_stack %8 : $*Optional<AnyHashable>, scope 124 // id: %32
  br bb6, scope 124                               // id: %33

bb6:                                              // Preds: bb7 bb5
  copy_addr %6 to [initialization] %0 : $*AnyHashable, scope 124 // id: %34
  destroy_addr %6 : $*AnyHashable, scope 124      // id: %35
  %36 = tuple (), scope 124                       // user: %39
  dealloc_stack %6 : $*AnyHashable, scope 124     // id: %37
  dealloc_stack %3 : $*MyError, scope 124         // id: %38
  return %36 : $(), scope 124                     // id: %39

bb7:                                              // Preds: bb4
  dealloc_stack %8 : $*Optional<AnyHashable>, scope 124 // id: %40
  %41 = alloc_stack $_AnyHashableBox, scope 124   // users: %50, %49, %42
  %42 = init_existential_addr %41 : $*_AnyHashableBox, $_ConcreteHashableBox<Int>, scope 124 // user: %47
  %43 = integer_literal $Builtin.Int64, 0, scope 124 // user: %44
  %44 = struct $Int (%43 : $Builtin.Int64), scope 124 // users: %46, %45
  debug_value %44 : $Int, scope 124               // id: %45
  %46 = struct $_ConcreteHashableBox<Int> (%44 : $Int), scope 124 // user: %47
  store %46 to %42 : $*_ConcreteHashableBox<Int>, scope 124 // id: %47
  %48 = struct_element_addr %6 : $*AnyHashable, #AnyHashable._box, scope 124 // user: %49
  copy_addr [take] %41 to [initialization] %48 : $*_AnyHashableBox, scope 124 // id: %49
  dealloc_stack %41 : $*_AnyHashableBox, scope 124 // id: %50
  // function_ref _swift_stdlib_makeAnyHashableUpcastingToHashableBaseType
  %51 = function_ref @_swift_stdlib_makeAnyHashableUpcastingToHashableBaseType : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in τ_0_0, UnsafeMutablePointer<AnyHashable>) -> (), scope 124 // user: %54
  %52 = address_to_pointer %6 : $*AnyHashable to $Builtin.RawPointer, scope 124 // user: %53
  %53 = struct $UnsafeMutablePointer<AnyHashable> (%52 : $Builtin.RawPointer), scope 124 // user: %54
  %54 = apply %51<MyError>(%3, %53) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in τ_0_0, UnsafeMutablePointer<AnyHashable>) -> (), scope 124
  br bb6, scope 124                               // id: %55

bb8:                                              // Preds: bb2
  dealloc_stack %10 : $*MyError, scope 124        // id: %56
  dealloc_stack %9 : $*Optional<_HasCustomAnyHashableRepresentation>, scope 124 // id: %57
  inject_enum_addr %8 : $*Optional<AnyHashable>, #Optional.none!enumelt, scope 124 // id: %58
  br bb4, scope 124                               // id: %59

bb9:                                              // Preds: bb0
  inject_enum_addr %9 : $*Optional<_HasCustomAnyHashableRepresentation>, #Optional.none!enumelt, scope 124 // id: %60
  br bb2, scope 124                               // id: %61
}


// _swift_stdlib_makeAnyHashableUpcastingToHashableBaseType
sil hidden_external [fragile] @_swift_stdlib_makeAnyHashableUpcastingToHashableBaseType : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in τ_0_0, UnsafeMutablePointer<AnyHashable>) -> ()


// protocol witness for _AnyHashableBox._typeID.getter in conformance <A where ...> _ConcreteHashableBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_g7_typeIDVs16ObjectIdentifier : $@convention(witness_method) <Base where Base : Hashable> (@in_guaranteed _ConcreteHashableBox<Base>) -> ObjectIdentifier


// protocol witness for _AnyHashableBox._unbox<A where ...> () -> A1? in conformance <A where ...> _ConcreteHashableBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_6_unboxuRd__S_rfT_GSqqd___ : $@convention(witness_method) <Base where Base : Hashable><T where T : Hashable> (@in_guaranteed _ConcreteHashableBox<Base>) -> @out Optional<T>


// protocol witness for _AnyHashableBox._isEqual(to : _AnyHashableBox) -> Bool in conformance <A where ...> _ConcreteHashableBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_8_isEqualfT2toPS1___Sb : $@convention(witness_method) <Base where Base : Hashable> (@in _AnyHashableBox, @in_guaranteed _ConcreteHashableBox<Base>) -> Bool


// protocol witness for _AnyHashableBox._hashValue.getter in conformance <A where ...> _ConcreteHashableBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_g10_hashValueSi : $@convention(witness_method) <Base where Base : Hashable> (@in_guaranteed _ConcreteHashableBox<Base>) -> Int


// protocol witness for _AnyHashableBox._base.getter in conformance <A where ...> _ConcreteHashableBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_g5_baseP_ : $@convention(witness_method) <Base where Base : Hashable> (@in_guaranteed _ConcreteHashableBox<Base>) -> @out Any


// protocol witness for _AnyHashableBox._downCastConditional<A> (into : UnsafeMutablePointer<A1>) -> Bool in conformance <A where ...> _ConcreteHashableBox<A>
sil [transparent] [fragile] [thunk] @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_20_downCastConditionalurfT4intoGSpqd____Sb : $@convention(witness_method) <Base where Base : Hashable><T> (UnsafeMutablePointer<T>, @in_guaranteed _ConcreteHashableBox<Base>) -> Bool


// _AnySequenceBox._makeIterator() -> AnyIterator<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBox13_makeIteratorfT_GVs11AnyIteratorx_ : $@convention(method) <Element> (@guaranteed _AnySequenceBox<Element>) -> @owned AnyIterator<Element>


// _AnySequenceBox._underestimatedCount.getter
sil hidden_external [fragile] @_TFCs15_AnySequenceBoxg20_underestimatedCountSi : $@convention(method) <Element> (@guaranteed _AnySequenceBox<Element>) -> Int


// _AnySequenceBox._map<A> ((A) throws -> A1) throws -> [A1]
sil hidden_external [fragile] @_TFCs15_AnySequenceBox4_mapurfzFzxqd__GSaqd___ : $@convention(method) <Element><T> (@owned @callee_owned (@in Element) -> (@out T, @error Error), @guaranteed _AnySequenceBox<Element>) -> (@owned Array<T>, @error Error)


// _AnySequenceBox._filter((A) throws -> Bool) throws -> [A]
sil hidden_external [fragile] @_TFCs15_AnySequenceBox7_filterfzFzxSbGSax_ : $@convention(method) <Element> (@owned @callee_owned (@in Element) -> (Bool, @error Error), @guaranteed _AnySequenceBox<Element>) -> (@owned Array<Element>, @error Error)


// _AnySequenceBox._forEach((A) throws -> ()) throws -> ()
sil hidden_external [fragile] @_TFCs15_AnySequenceBox8_forEachfzFzxT_T_ : $@convention(method) <Element> (@owned @callee_owned (@in Element) -> @error Error, @guaranteed _AnySequenceBox<Element>) -> @error Error


// _AnySequenceBox.__preprocessingPass<A> (() throws -> A1) throws -> A1?
sil hidden_external [fragile] @_TFCs15_AnySequenceBox19__preprocessingPassurfzFzT_qd__GSqqd___ : $@convention(method) <Element><R> (@owned @callee_owned () -> (@out R, @error Error), @guaranteed _AnySequenceBox<Element>) -> (@out Optional<R>, @error Error)


// _AnySequenceBox.__copyToContiguousArray() -> ContiguousArray<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBox23__copyToContiguousArrayfT_GVs15ContiguousArrayx_ : $@convention(method) <Element> (@guaranteed _AnySequenceBox<Element>) -> @owned ContiguousArray<Element>


// _AnySequenceBox.__copyContents(initializing : UnsafeMutablePointer<A>) -> UnsafeMutablePointer<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBox14__copyContentsfT12initializingGSpx__GSpx_ : $@convention(method) <Element> (UnsafeMutablePointer<Element>, @guaranteed _AnySequenceBox<Element>) -> UnsafeMutablePointer<Element>


// _AnyRandomAccessCollectionBox._dropFirst(Int) -> _AnyRandomAccessCollectionBox<A>
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBox10_dropFirstfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyRandomAccessCollectionBox<Element>) -> @owned _AnyRandomAccessCollectionBox<Element>


// _AnyRandomAccessCollectionBox._dropLast(Int) -> _AnyRandomAccessCollectionBox<A>
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBox9_dropLastfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyRandomAccessCollectionBox<Element>) -> @owned _AnyRandomAccessCollectionBox<Element>


// _AnyRandomAccessCollectionBox._prefix(Int) -> _AnyRandomAccessCollectionBox<A>
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBox7_prefixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyRandomAccessCollectionBox<Element>) -> @owned _AnyRandomAccessCollectionBox<Element>


// _AnyRandomAccessCollectionBox._suffix(Int) -> _AnyRandomAccessCollectionBox<A>
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBox7_suffixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyRandomAccessCollectionBox<Element>) -> @owned _AnyRandomAccessCollectionBox<Element>


// _AnySequenceBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnySequence<A>]
sil hidden_external [fragile] @_TFCs15_AnySequenceBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs11AnySequencex__ : $@convention(method) <Element> (Int, Bool, @owned @callee_owned (@in Element) -> (Bool, @error Error), @guaranteed _AnySequenceBox<Element>) -> (@owned Array<AnySequence<Element>>, @error Error)


// _AnyCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyCollection<A>]
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs13AnyCollectionx__ : $@convention(method) <Element> (Int, Bool, @owned @callee_owned (@in Element) -> (Bool, @error Error), @guaranteed _AnyCollectionBox<Element>) -> (@owned Array<AnyCollection<Element>>, @error Error)


// _AnyCollectionBox.subscript.getter
sil hidden_external [fragile] @_TFCs17_AnyCollectionBoxg9subscriptFPs12_AnyIndexBox_x : $@convention(method) <Element> (@owned _AnyIndexBox, @guaranteed _AnyCollectionBox<Element>) -> @out Element


// _AnyCollectionBox._index(after : _AnyIndexBox) -> _AnyIndexBox
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox6_indexfT5afterPs12_AnyIndexBox__PS0__ : $@convention(method) <Element> (@owned _AnyIndexBox, @guaranteed _AnyCollectionBox<Element>) -> @owned _AnyIndexBox


// _AnyCollectionBox._formIndex(after : _AnyIndexBox) -> ()
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox10_formIndexfT5afterPs12_AnyIndexBox__T_ : $@convention(method) <Element> (@owned _AnyIndexBox, @guaranteed _AnyCollectionBox<Element>) -> ()


// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64) -> _AnyIndexBox
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int64_PS0__ : $@convention(method) <Element> (@owned _AnyIndexBox, Int64, @guaranteed _AnyCollectionBox<Element>) -> @owned _AnyIndexBox


// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> _AnyIndexBox?
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___GSqPS0___ : $@convention(method) <Element> (@owned _AnyIndexBox, Int64, @owned _AnyIndexBox, @guaranteed _AnyCollectionBox<Element>) -> @owned Optional<_AnyIndexBox>


// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64) -> ()
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int64_T_ : $@convention(method) <Element> (@inout _AnyIndexBox, Int64, @guaranteed _AnyCollectionBox<Element>) -> ()


// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> Bool
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___Sb : $@convention(method) <Element> (@inout _AnyIndexBox, Int64, @owned _AnyIndexBox, @guaranteed _AnyCollectionBox<Element>) -> Bool


// _AnyCollectionBox._distance(from : _AnyIndexBox, to : _AnyIndexBox) -> Int64
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox9_distancefT4fromPs12_AnyIndexBox_2toPS0___Vs5Int64 : $@convention(method) <Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @guaranteed _AnyCollectionBox<Element>) -> Int64


// _AnyCollectionBox._count.getter
sil hidden_external [fragile] @_TFCs17_AnyCollectionBoxg6_countVs5Int64 : $@convention(method) <Element> (@guaranteed _AnyCollectionBox<Element>) -> Int64


// _AnyCollectionBox._first.getter
sil hidden_external [fragile] @_TFCs17_AnyCollectionBoxg6_firstGSqx_ : $@convention(method) <Element> (@guaranteed _AnyCollectionBox<Element>) -> @out Optional<Element>


// _AnyRandomAccessCollectionBox.subscript.getter
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GS_x_ : $@convention(method) <Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @guaranteed _AnyRandomAccessCollectionBox<Element>) -> @owned _AnyRandomAccessCollectionBox<Element>


// _AnyBidirectionalCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyBidirectionalCollection<A>]
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs26AnyBidirectionalCollectionx__ : $@convention(method) <Element> (Int, Bool, @owned @callee_owned (@in Element) -> (Bool, @error Error), @guaranteed _AnyBidirectionalCollectionBox<Element>) -> (@owned Array<AnyBidirectionalCollection<Element>>, @error Error)


// _AnyBidirectionalCollectionBox._index(before : _AnyIndexBox) -> _AnyIndexBox
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBox6_indexfT6beforePs12_AnyIndexBox__PS0__ : $@convention(method) <Element> (@owned _AnyIndexBox, @guaranteed _AnyBidirectionalCollectionBox<Element>) -> @owned _AnyIndexBox


// _AnyBidirectionalCollectionBox._formIndex(before : _AnyIndexBox) -> ()
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBox10_formIndexfT6beforePs12_AnyIndexBox__T_ : $@convention(method) <Element> (@owned _AnyIndexBox, @guaranteed _AnyBidirectionalCollectionBox<Element>) -> ()


// _AnyBidirectionalCollectionBox._last.getter
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBoxg5_lastGSqx_ : $@convention(method) <Element> (@guaranteed _AnyBidirectionalCollectionBox<Element>) -> @out Optional<Element>


// _AnyRandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyRandomAccessCollection<A>]
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs25AnyRandomAccessCollectionx__ : $@convention(method) <Element> (Int, Bool, @owned @callee_owned (@in Element) -> (Bool, @error Error), @guaranteed _AnyRandomAccessCollectionBox<Element>) -> (@owned Array<AnyRandomAccessCollection<Element>>, @error Error)


// _AnyRandomAccessCollectionBox.__deallocating_deinit
sil hidden_external [fragile] @_TFCs29_AnyRandomAccessCollectionBoxD : $@convention(method) <Element> (@owned _AnyRandomAccessCollectionBox<Element>) -> ()


// _AnyBidirectionalCollectionBox._dropFirst(Int) -> _AnyBidirectionalCollectionBox<A>
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBox10_dropFirstfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyBidirectionalCollectionBox<Element>) -> @owned _AnyBidirectionalCollectionBox<Element>


// _AnyBidirectionalCollectionBox._dropLast(Int) -> _AnyBidirectionalCollectionBox<A>
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBox9_dropLastfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyBidirectionalCollectionBox<Element>) -> @owned _AnyBidirectionalCollectionBox<Element>


// _AnyBidirectionalCollectionBox._prefix(Int) -> _AnyBidirectionalCollectionBox<A>
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBox7_prefixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyBidirectionalCollectionBox<Element>) -> @owned _AnyBidirectionalCollectionBox<Element>


// _AnyBidirectionalCollectionBox._suffix(Int) -> _AnyBidirectionalCollectionBox<A>
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBox7_suffixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyBidirectionalCollectionBox<Element>) -> @owned _AnyBidirectionalCollectionBox<Element>


// _AnyBidirectionalCollectionBox.subscript.getter
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GS_x_ : $@convention(method) <Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @guaranteed _AnyBidirectionalCollectionBox<Element>) -> @owned _AnyBidirectionalCollectionBox<Element>


// _AnyBidirectionalCollectionBox.__deallocating_deinit
sil hidden_external [fragile] @_TFCs30_AnyBidirectionalCollectionBoxD : $@convention(method) <Element> (@owned _AnyBidirectionalCollectionBox<Element>) -> ()


// _AnyCollectionBox._dropFirst(Int) -> _AnyCollectionBox<A>
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox10_dropFirstfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyCollectionBox<Element>) -> @owned _AnyCollectionBox<Element>


// _AnyCollectionBox._dropLast(Int) -> _AnyCollectionBox<A>
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox9_dropLastfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyCollectionBox<Element>) -> @owned _AnyCollectionBox<Element>


// _AnyCollectionBox._prefix(Int) -> _AnyCollectionBox<A>
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox7_prefixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyCollectionBox<Element>) -> @owned _AnyCollectionBox<Element>


// _AnyCollectionBox._suffix(Int) -> _AnyCollectionBox<A>
sil hidden_external [fragile] @_TFCs17_AnyCollectionBox7_suffixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnyCollectionBox<Element>) -> @owned _AnyCollectionBox<Element>


// _AnyCollectionBox.subscript.getter
sil hidden_external [fragile] @_TFCs17_AnyCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GS_x_ : $@convention(method) <Element> (@owned _AnyIndexBox, @owned _AnyIndexBox, @guaranteed _AnyCollectionBox<Element>) -> @owned _AnyCollectionBox<Element>


// _AnyCollectionBox.__deallocating_deinit
sil hidden_external [fragile] @_TFCs17_AnyCollectionBoxD : $@convention(method) <Element> (@owned _AnyCollectionBox<Element>) -> ()


// _AnyCollectionBox.__ivar_destroyer
sil hidden_external [fragile] @_TFCs17_AnyCollectionBoxE : $@convention(method) <Element> (@guaranteed _AnyCollectionBox<Element>) -> ()


// _AnySequenceBox._dropFirst(Int) -> _AnySequenceBox<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBox10_dropFirstfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnySequenceBox<Element>) -> @owned _AnySequenceBox<Element>


// _AnySequenceBox._dropLast(Int) -> _AnySequenceBox<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBox9_dropLastfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnySequenceBox<Element>) -> @owned _AnySequenceBox<Element>


// _AnySequenceBox._prefix(Int) -> _AnySequenceBox<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBox7_prefixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnySequenceBox<Element>) -> @owned _AnySequenceBox<Element>


// _AnySequenceBox._suffix(Int) -> _AnySequenceBox<A>
sil hidden_external [fragile] @_TFCs15_AnySequenceBox7_suffixfSiGS_x_ : $@convention(method) <Element> (Int, @guaranteed _AnySequenceBox<Element>) -> @owned _AnySequenceBox<Element>


// _AnySequenceBox.__deallocating_deinit
sil hidden_external [fragile] @_TFCs15_AnySequenceBoxD : $@convention(method) <Element> (@owned _AnySequenceBox<Element>) -> ()


// _ContiguousArrayStorageBase._getNonVerbatimBridgedCount() -> Int
sil hidden_external [fragile] [thunk] [always_inline] @_TFCs27_ContiguousArrayStorageBase27_getNonVerbatimBridgedCountfT_Si : $@convention(method) (@guaranteed _ContiguousArrayStorageBase) -> Int


// _ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer() -> _HeapBuffer<Int, AnyObject>
sil hidden_external [fragile] [thunk] [always_inline] @_TFCs27_ContiguousArrayStorageBase32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__ : $@convention(method) (@guaranteed _ContiguousArrayStorageBase) -> @owned _HeapBuffer<Int, AnyObject>


// _ContiguousArrayStorageBase.staticElementType.getter
sil hidden_external [fragile] [thunk] [always_inline] @_TFCs27_ContiguousArrayStorageBaseg17staticElementTypePMP_ : $@convention(method) (@guaranteed _ContiguousArrayStorageBase) -> @thick Any.Type


// _ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl((UnsafeBufferPointer<AnyObject>) throws -> ()) throws -> ()
sil hidden_external [fragile] [thunk] [always_inline] @_TFCs24_ContiguousArrayStorage136_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_ : $@convention(method) (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> @error Error, @guaranteed _ContiguousArrayStorage1) -> @error Error


// _ContiguousArrayStorage1.__deallocating_deinit
sil hidden_external [fragile] @_TFCs24_ContiguousArrayStorage1D : $@convention(method) (@owned _ContiguousArrayStorage1) -> ()


// _ContiguousArrayStorageBase.__deallocating_deinit
sil hidden_external [fragile] @_TFCs27_ContiguousArrayStorageBaseD : $@convention(method) (@owned _ContiguousArrayStorageBase) -> ()


// _SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A
sil hidden_external [fragile] @_TFCs40_SwiftNativeNSArrayWithContiguousStorage25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx : $@convention(method) <R> (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> (@out R, @error Error), @guaranteed _SwiftNativeNSArrayWithContiguousStorage) -> (@out R, @error Error)


// _SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
sil hidden_external [fragile] @_TFCs40_SwiftNativeNSArrayWithContiguousStorageD : $@convention(method) (@owned _SwiftNativeNSArrayWithContiguousStorage) -> ()


// _SwiftNativeNSArray.__deallocating_deinit
sil hidden_external [fragile] @_TFCs19_SwiftNativeNSArrayD : $@convention(method) (@owned _SwiftNativeNSArray) -> ()


// _AnyIteratorBoxBase.next() -> A?
sil hidden_external [fragile] @_TFCs19_AnyIteratorBoxBase4nextfT_GSqx_ : $@convention(method) <Element> (@guaranteed _AnyIteratorBoxBase<Element>) -> @out Optional<Element>


// _AnyIteratorBoxBase.__deallocating_deinit
sil hidden_external [fragile] @_TFCs19_AnyIteratorBoxBaseD : $@convention(method) <Element> (@owned _AnyIteratorBoxBase<Element>) -> ()


// protocol witness for TextOutputStream._lock() -> () in conformance String
sil [transparent] [fragile] [thunk] @_TTWSSs16TextOutputStreamsFS_5_lockfT_T_ : $@convention(witness_method) (@inout String) -> ()


// protocol witness for TextOutputStream._unlock() -> () in conformance String
sil [transparent] [fragile] [thunk] @_TTWSSs16TextOutputStreamsFS_7_unlockfT_T_ : $@convention(witness_method) (@inout String) -> ()


// protocol witness for TextOutputStream.write(String) -> () in conformance String
sil [transparent] [fragile] [thunk] @_TTWSSs16TextOutputStreamsFS_5writefSST_ : $@convention(witness_method) (@owned String, @inout String) -> ()

sil_scope 125 {  parent @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> () }
sil_scope 126 {  parent @_TTSfq4n_s___TFVs11_StringCore8_pointerfT11toElementAtSi_Sv : $@convention(thin) (Int, Optional<UnsafeMutableRawPointer>, Builtin.Int64) -> UnsafeMutableRawPointer }
sil_scope 127 {  parent 125 }
sil_scope 128 {  parent 126 inlined_at 127 }

// specialized _StringCore.append(_StringCore) -> ()
sil hidden_external [fragile] [noinline] @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> () {
// %0                                             // users: %107, %106, %25, %19
// %1                                             // users: %118, %58, %30, %14
// %2                                             // users: %132, %130, %126, %123
// %3                                             // users: %84, %83, %69, %65, %5, %4
bb0(%0 : $Optional<UnsafeMutableRawPointer>, %1 : $Builtin.Int64, %2 : $Optional<AnyObject>, %3 : $*_StringCore):
  debug_value_addr %3 : $*_StringCore, scope 125  // id: %4
  %5 = struct_element_addr %3 : $*_StringCore, #_StringCore._countAndFlags, scope 125 // user: %6
  %6 = struct_element_addr %5 : $*UInt, #UInt._value, scope 125 // users: %109, %86, %81, %55, %7
  %7 = load %6 : $*Builtin.Int64, scope 125       // user: %9
  %8 = integer_literal $Builtin.Int64, 63, scope 125 // users: %91, %110, %14, %9
  %9 = builtin "lshr_Int64"(%7 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int64, scope 125 // user: %12
  %10 = integer_literal $Builtin.Int64, 1, scope 125 // users: %118, %111, %47, %20, %15, %12
  %11 = integer_literal $Builtin.Int1, 0, scope 125 // users: %111, %15, %12
  %12 = builtin "sadd_with_overflow_Int64"(%9 : $Builtin.Int64, %10 : $Builtin.Int64, %11 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 125 // user: %13
  %13 = tuple_extract %12 : $(Builtin.Int64, Builtin.Int1), 0, scope 125 // users: %51, %17
  %14 = builtin "lshr_Int64"(%1 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int64, scope 125 // user: %15
  %15 = builtin "sadd_with_overflow_Int64"(%14 : $Builtin.Int64, %10 : $Builtin.Int64, %11 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 125 // user: %16
  %16 = tuple_extract %15 : $(Builtin.Int64, Builtin.Int1), 0, scope 125 // users: %108, %20, %17
  %17 = builtin "cmp_sge_Int64"(%13 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1, scope 125 // user: %18
  cond_br %17, bb10, bb1, scope 125               // id: %18

bb1:                                              // Preds: bb0
  switch_enum %0 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb8, case #Optional.some!enumelt.1: bb2, scope 125 // id: %19

bb2:                                              // Preds: bb1
  %20 = builtin "cmp_eq_Int64"(%16 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int1, scope 125 // user: %22
  %21 = integer_literal $Builtin.Int1, -1, scope 125 // user: %22
  %22 = builtin "int_expect_Int1"(%20 : $Builtin.Int1, %21 : $Builtin.Int1) : $Builtin.Int1, scope 125 // user: %23
  cond_br %22, bb3, bb4, scope 125                // id: %23

bb3:                                              // Preds: bb2
  br bb7, scope 125                               // id: %24

bb4:                                              // Preds: bb2
  %25 = unchecked_enum_data %0 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 125 // user: %26
  %26 = struct_extract %25 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 125 // user: %27
  %27 = struct $UnsafePointer<UInt16> (%26 : $Builtin.RawPointer), scope 125 // user: %28
  %28 = enum $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, %27 : $UnsafePointer<UInt16>, scope 125 // user: %33
  %29 = integer_literal $Builtin.Int64, 4611686018427387903, scope 125 // user: %30
  %30 = builtin "and_Int64"(%1 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int64, scope 125 // user: %31
  %31 = struct $Int (%30 : $Builtin.Int64), scope 125 // user: %33
  // function_ref specialized specialized UnsafeBufferPointer.init(start : UnsafePointer<A>?, count : Int) -> UnsafeBufferPointer<A>
  %32 = function_ref @_TTSfq4n_n_d___TTSgq5Vs6UInt16___TFSRCfT5startGSqGSPx__5countSi_GSRx_ : $@convention(thin) (Optional<UnsafePointer<UInt16>>, Int) -> UnsafeBufferPointer<UInt16>, scope 125 // user: %33
  %33 = apply %32(%28, %31) : $@convention(thin) (Optional<UnsafePointer<UInt16>>, Int) -> UnsafeBufferPointer<UInt16>, scope 125 // users: %36, %34
  debug_value %33 : $UnsafeBufferPointer<UInt16>, scope 125 // id: %34
  %35 = alloc_stack $UnsafeBufferPointer<UInt16>, scope 125 // users: %43, %41, %36
  store %33 to %35 : $*UnsafeBufferPointer<UInt16>, scope 125 // id: %36
  // function_ref _StringCore.(isRepresentableAsASCII() -> Bool).(closure #1)
  %37 = function_ref @_TFFVs11_StringCore22isRepresentableAsASCIIFT_SbU_FVs6UInt16Sb : $@convention(thin) (UInt16) -> Bool, scope 125 // user: %38
  %38 = thin_to_thick_function %37 : $@convention(thin) (UInt16) -> Bool to $@callee_owned (UInt16) -> Bool, scope 125 // user: %39
  %39 = convert_function %38 : $@callee_owned (UInt16) -> Bool to $@callee_owned (UInt16) -> (Bool, @error Error), scope 125 // user: %41
  // function_ref specialized specialized specialized Sequence.contains(where : (A.Iterator.Element) throws -> Bool) throws -> Bool
  %40 = function_ref @_TTSfq4n_g___TTSfq1cl53_TTRXFo_dVs6UInt16_dSbzoPs5Error__XFo_iS__dSbzoPS0___XFo_dVs6UInt16_dSbzoPs5Error___n___TTSgq5GSRVs6UInt16_GSRS__s8Sequences___TFEsPs8Sequence8containsfzT5whereFzWx8Iterator7Element_Sb_Sb : $@convention(thin) (@in_guaranteed UnsafeBufferPointer<UInt16>, @guaranteed @callee_owned (UInt16) -> (Bool, @error Error)) -> (Bool, @error Error), scope 125 // user: %41
  %41 = apply [nothrow] %40(%35, %39) : $@convention(thin) (@in_guaranteed UnsafeBufferPointer<UInt16>, @guaranteed @callee_owned (UInt16) -> (Bool, @error Error)) -> (Bool, @error Error), scope 125 // user: %42
  %42 = struct_extract %41 : $Bool, #Bool._value, scope 125 // user: %44
  dealloc_stack %35 : $*UnsafeBufferPointer<UInt16>, scope 125 // id: %43
  cond_br %42, bb6, bb5, scope 125                // id: %44

bb5:                                              // Preds: bb4
  br bb7, scope 125                               // id: %45

bb6:                                              // Preds: bb4
  br bb9, scope 125                               // id: %46

bb7:                                              // Preds: bb5 bb3
  br bb11(%10 : $Builtin.Int64), scope 125        // id: %47

bb8:                                              // Preds: bb1
  br bb9, scope 125                               // id: %48

bb9:                                              // Preds: bb6 bb8
  %49 = integer_literal $Builtin.Int64, 2, scope 125 // user: %50
  br bb11(%49 : $Builtin.Int64), scope 125        // id: %50

bb10:                                             // Preds: bb0
  br bb11(%13 : $Builtin.Int64), scope 125        // id: %51

// %52                                            // user: %53
bb11(%52 : $Builtin.Int64):                       // Preds: bb10 bb9 bb7
  %53 = struct $Int (%52 : $Builtin.Int64), scope 125 // users: %83, %69, %67, %54
  debug_value %53 : $Int, scope 125               // id: %54
  %55 = load %6 : $*Builtin.Int64, scope 125      // user: %57
  %56 = integer_literal $Builtin.Int64, 4611686018427387903, scope 125 // users: %90, %58, %57
  %57 = builtin "and_Int64"(%55 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64, scope 125 // user: %60
  %58 = builtin "and_Int64"(%1 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64, scope 125 // users: %114, %60
  %59 = integer_literal $Builtin.Int1, -1, scope 125 // users: %124, %121, %94, %88, %60
  %60 = builtin "sadd_with_overflow_Int64"(%57 : $Builtin.Int64, %58 : $Builtin.Int64, %59 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 125 // users: %62, %61
  %61 = tuple_extract %60 : $(Builtin.Int64, Builtin.Int1), 0, scope 125 // user: %64
  %62 = tuple_extract %60 : $(Builtin.Int64, Builtin.Int1), 1, scope 125 // user: %63
  cond_fail %62 : $Builtin.Int1, scope 125        // id: %63
  %64 = struct $Int (%61 : $Builtin.Int64), scope 125 // users: %83, %69, %66
  debug_value_addr %3 : $*_StringCore, scope 125  // id: %65
  debug_value %64 : $Int, scope 125               // id: %66
  debug_value %53 : $Int, scope 125               // id: %67
  // function_ref _StringCore._claimCapacity(Int, minElementWidth : Int) -> (Int, UnsafeMutableRawPointer?)
  %68 = function_ref @_TFVs11_StringCore14_claimCapacityfTSi15minElementWidthSi_TSiGSqSv__ : $@convention(method) (Int, Int, @inout _StringCore) -> (Int, Optional<UnsafeMutableRawPointer>), scope 125 // user: %69
  %69 = apply %68(%64, %53, %3) : $@convention(method) (Int, Int, @inout _StringCore) -> (Int, Optional<UnsafeMutableRawPointer>), scope 125 // users: %71, %70
  %70 = tuple_extract %69 : $(Int, Optional<UnsafeMutableRawPointer>), 0, scope 125 // users: %83, %72
  %71 = tuple_extract %69 : $(Int, Optional<UnsafeMutableRawPointer>), 1, scope 125 // users: %79, %78, %77, %76, %75, %74, %73
  debug_value %70 : $Int, scope 125               // id: %72
  debug_value %71 : $Optional<UnsafeMutableRawPointer>, scope 125 // id: %73
  debug_value %71 : $Optional<UnsafeMutableRawPointer>, scope 125 // id: %74
  debug_value %71 : $Optional<UnsafeMutableRawPointer>, scope 125 // id: %75
  debug_value %71 : $Optional<UnsafeMutableRawPointer>, scope 125 // id: %76
  debug_value %71 : $Optional<UnsafeMutableRawPointer>, scope 125 // id: %77
  switch_enum %71 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb13, case #Optional.some!enumelt.1: bb12, scope 125 // id: %78

bb12:                                             // Preds: bb11
  %79 = unchecked_enum_data %71 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 125 // user: %80
  br bb16(%79 : $UnsafeMutableRawPointer), scope 125 // id: %80

bb13:                                             // Preds: bb11
  %81 = load %6 : $*Builtin.Int64, scope 125      // user: %90
  // function_ref _StringCore._copyInPlace(newSize : Int, newCapacity : Int, minElementWidth : Int) -> ()
  %82 = function_ref @_TFVs11_StringCore12_copyInPlacefT7newSizeSi11newCapacitySi15minElementWidthSi_T_ : $@convention(method) (Int, Int, Int, @inout _StringCore) -> (), scope 125 // user: %83
  %83 = apply %82(%64, %70, %53, %3) : $@convention(method) (Int, Int, Int, @inout _StringCore) -> (), scope 125
  %84 = struct_element_addr %3 : $*_StringCore, #_StringCore._baseAddress, scope 125 // user: %85
  %85 = load %84 : $*Optional<UnsafeMutableRawPointer>, scope 125 // users: %87, %96
  %86 = load %6 : $*Builtin.Int64, scope 125      // user: %91
  switch_enum %85 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb14, case #Optional.some!enumelt.1: bb15, scope 128 // id: %87

bb14:                                             // Preds: bb13
  cond_fail %59 : $Builtin.Int1, scope 128        // id: %88
  unreachable, scope 128                          // id: %89

bb15:                                             // Preds: bb13
  %90 = builtin "and_Int64"(%81 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64, scope 125 // user: %97
  %91 = builtin "lshr_Int64"(%86 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int64, scope 128 // users: %97, %93
  %92 = integer_literal $Builtin.Int64, 64, scope 128 // user: %93
  %93 = builtin "cmp_ult_Int64"(%91 : $Builtin.Int64, %92 : $Builtin.Int64) : $Builtin.Int1, scope 128 // user: %94
  %94 = builtin "xor_Int1"(%93 : $Builtin.Int1, %59 : $Builtin.Int1) : $Builtin.Int1, scope 128 // user: %95
  cond_fail %94 : $Builtin.Int1, scope 128        // id: %95
  %96 = unchecked_enum_data %85 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 128 // users: %99, %98
  %97 = builtin "shl_Int64"(%90 : $Builtin.Int64, %91 : $Builtin.Int64) : $Builtin.Int64, scope 128 // user: %100
  %98 = struct_extract %96 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 128 // user: %101
  debug_value %96 : $UnsafeMutableRawPointer, scope 128 // id: %99
  %100 = builtin "truncOrBitCast_Int64_Word"(%97 : $Builtin.Int64) : $Builtin.Word, scope 128 // user: %101
  %101 = index_raw_pointer %98 : $Builtin.RawPointer, %100 : $Builtin.Word, scope 128 // user: %102
  %102 = struct $UnsafeMutableRawPointer (%101 : $Builtin.RawPointer), scope 128 // user: %103
  br bb16(%102 : $UnsafeMutableRawPointer), scope 125 // id: %103

// %104                                           // users: %127, %116, %105
bb16(%104 : $UnsafeMutableRawPointer):            // Preds: bb15 bb12
  debug_value %104 : $UnsafeMutableRawPointer, scope 125 // id: %105
  switch_enum %0 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb18, case #Optional.some!enumelt.1: bb17, scope 125 // id: %106

bb17:                                             // Preds: bb16
  %107 = unchecked_enum_data %0 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 125 // user: %116
  %108 = struct $Int (%16 : $Builtin.Int64), scope 125 // user: %116
  %109 = load %6 : $*Builtin.Int64, scope 125     // user: %110
  %110 = builtin "lshr_Int64"(%109 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int64, scope 125 // user: %111
  %111 = builtin "sadd_with_overflow_Int64"(%110 : $Builtin.Int64, %10 : $Builtin.Int64, %11 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 125 // user: %112
  %112 = tuple_extract %111 : $(Builtin.Int64, Builtin.Int1), 0, scope 125 // user: %113
  %113 = struct $Int (%112 : $Builtin.Int64), scope 125 // user: %116
  %114 = struct $Int (%58 : $Builtin.Int64), scope 125 // user: %116
  // function_ref specialized static _StringCore._copyElements(UnsafeMutableRawPointer, srcElementWidth : Int, dstStart : UnsafeMutableRawPointer, dstElementWidth : Int, count : Int) -> ()
  %115 = function_ref @_TTSfq4n_n_n_n_n_d___TZFVs11_StringCore13_copyElementsfTSv15srcElementWidthSi8dstStartSv15dstElementWidthSi5countSi_T_ : $@convention(thin) (UnsafeMutableRawPointer, Int, UnsafeMutableRawPointer, Int, Int) -> (), scope 125 // user: %116
  %116 = apply %115(%107, %108, %104, %113, %114) : $@convention(thin) (UnsafeMutableRawPointer, Int, UnsafeMutableRawPointer, Int, Int) -> (), scope 125
  br bb21, scope 125                              // id: %117

bb18:                                             // Preds: bb16
  %118 = builtin "shl_Int64"(%1 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64, scope 125 // user: %120
  %119 = integer_literal $Builtin.Int64, 0, scope 125 // user: %120
  %120 = builtin "cmp_slt_Int64"(%118 : $Builtin.Int64, %119 : $Builtin.Int64) : $Builtin.Int1, scope 125 // user: %121
  %121 = builtin "xor_Int1"(%120 : $Builtin.Int1, %59 : $Builtin.Int1) : $Builtin.Int1, scope 125 // user: %122
  cond_fail %121 : $Builtin.Int1, scope 125       // id: %122
  switch_enum %2 : $Optional<AnyObject>, case #Optional.some!enumelt.1: bb20, case #Optional.none!enumelt: bb19, scope 125 // id: %123

bb19:                                             // Preds: bb18
  cond_fail %59 : $Builtin.Int1, scope 125        // id: %124
  unreachable, scope 125                          // id: %125

bb20:                                             // Preds: bb18
  %126 = unchecked_enum_data %2 : $Optional<AnyObject>, #Optional.some!enumelt.1, scope 125 // user: %131
  %127 = struct_extract %104 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 125 // user: %128
  %128 = struct $UnsafeMutablePointer<UInt16> (%127 : $Builtin.RawPointer), scope 125 // user: %131
  // function_ref specialized _cocoaStringReadAll(AnyObject, UnsafeMutablePointer<UInt16>) -> ()
  %129 = function_ref @_TTSfq4g_n___TFs19_cocoaStringReadAllFTPs9AnyObject_GSpVs6UInt16__T_ : $@convention(thin) (@guaranteed AnyObject, UnsafeMutablePointer<UInt16>) -> (), scope 125 // user: %131
  retain_value %2 : $Optional<AnyObject>, scope 125 // id: %130
  %131 = apply %129(%126, %128) : $@convention(thin) (@guaranteed AnyObject, UnsafeMutablePointer<UInt16>) -> (), scope 125
  release_value %2 : $Optional<AnyObject>, scope 125 // id: %132
  br bb21, scope 125                              // id: %133

bb21:                                             // Preds: bb20 bb17
  %134 = tuple (), scope 125                      // user: %135
  return %134 : $(), scope 125                    // id: %135
}

sil_scope 129 {  parent @_TTSfq4n_n_d___TTSgq5Vs6UInt16___TFSRCfT5startGSqGSPx__5countSi_GSRx_ : $@convention(thin) (Optional<UnsafePointer<UInt16>>, Int) -> UnsafeBufferPointer<UInt16> }

// specialized specialized UnsafeBufferPointer.init(start : UnsafePointer<A>?, count : Int) -> UnsafeBufferPointer<A>
sil shared_external [fragile] @_TTSfq4n_n_d___TTSgq5Vs6UInt16___TFSRCfT5startGSqGSPx__5countSi_GSRx_ : $@convention(thin) (Optional<UnsafePointer<UInt16>>, Int) -> UnsafeBufferPointer<UInt16> {
// %0                                             // users: %41, %25, %23, %22, %21, %17, %16, %15, %14, %13, %12, %2
// %1                                             // users: %27, %5, %3
bb0(%0 : $Optional<UnsafePointer<UInt16>>, %1 : $Int):
  debug_value %0 : $Optional<UnsafePointer<UInt16>>, scope 129 // id: %2
  debug_value %1 : $Int, scope 129                // id: %3
  %4 = integer_literal $Builtin.Int64, 0, scope 129 // users: %10, %6
  %5 = struct_extract %1 : $Int, #Int._value, scope 129 // users: %33, %10, %6
  %6 = builtin "cmp_sge_Int64"(%5 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 129 // user: %8
  %7 = integer_literal $Builtin.Int1, -1, scope 129 // users: %19, %8
  %8 = builtin "xor_Int1"(%6 : $Builtin.Int1, %7 : $Builtin.Int1) : $Builtin.Int1, scope 129 // user: %9
  cond_fail %8 : $Builtin.Int1, scope 129         // id: %9
  %10 = builtin "cmp_eq_Int64"(%5 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 129 // user: %11
  cond_br %10, bb4, bb1, scope 129                // id: %11

bb1:                                              // Preds: bb0
  debug_value %0 : $Optional<UnsafePointer<UInt16>>, scope 129 // id: %12
  debug_value %0 : $Optional<UnsafePointer<UInt16>>, scope 129 // id: %13
  debug_value %0 : $Optional<UnsafePointer<UInt16>>, scope 129 // id: %14
  debug_value %0 : $Optional<UnsafePointer<UInt16>>, scope 129 // id: %15
  switch_enum %0 : $Optional<UnsafePointer<UInt16>>, case #Optional.none!enumelt: bb3, case #Optional.some!enumelt.1: bb2, scope 129 // id: %16

bb2:                                              // Preds: bb1
  debug_value %0 : $Optional<UnsafePointer<UInt16>>, scope 129 // id: %17
  br bb7, scope 129                               // id: %18

bb3:                                              // Preds: bb1
  cond_fail %7 : $Builtin.Int1, scope 129         // id: %19
  unreachable, scope 129                          // id: %20

bb4:                                              // Preds: bb0
  debug_value %0 : $Optional<UnsafePointer<UInt16>>, scope 129 // id: %21
  switch_enum %0 : $Optional<UnsafePointer<UInt16>>, case #Optional.some!enumelt.1: bb6, case #Optional.none!enumelt: bb5, scope 129 // id: %22

bb5:                                              // Preds: bb4
  br bb8(%0 : $Optional<UnsafePointer<UInt16>>), scope 129 // id: %23

bb6:                                              // Preds: bb4
  br bb7, scope 129                               // id: %24

bb7:                                              // Preds: bb6 bb2
  %25 = unchecked_enum_data %0 : $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, scope 129 // users: %28, %26
  debug_value %25 : $UnsafePointer<UInt16>, scope 129 // id: %26
  debug_value %1 : $Int, scope 129                // id: %27
  %28 = struct_extract %25 : $UnsafePointer<UInt16>, #UnsafePointer._rawValue, scope 129 // user: %36
  %29 = metatype $@thick UInt16.Type, scope 129   // user: %30
  %30 = builtin "strideof_nonzero"<UInt16>(%29 : $@thick UInt16.Type) : $Builtin.Word, scope 129 // user: %31
  %31 = builtin "zextOrBitCast_Word_Int64"(%30 : $Builtin.Word) : $Builtin.Int64, scope 129 // user: %33
  %32 = integer_literal $Builtin.Int1, 0, scope 129 // user: %33
  %33 = builtin "smul_with_overflow_Int64"(%5 : $Builtin.Int64, %31 : $Builtin.Int64, %32 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 129 // user: %34
  %34 = tuple_extract %33 : $(Builtin.Int64, Builtin.Int1), 0, scope 129 // user: %35
  %35 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word, scope 129 // user: %36
  %36 = index_raw_pointer %28 : $Builtin.RawPointer, %35 : $Builtin.Word, scope 129 // user: %37
  %37 = struct $UnsafePointer<UInt16> (%36 : $Builtin.RawPointer), scope 129 // user: %38
  %38 = enum $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, %37 : $UnsafePointer<UInt16>, scope 129 // user: %39
  br bb8(%38 : $Optional<UnsafePointer<UInt16>>), scope 129 // id: %39

// %40                                            // user: %41
bb8(%40 : $Optional<UnsafePointer<UInt16>>):      // Preds: bb7 bb5
  %41 = struct $UnsafeBufferPointer<UInt16> (%0 : $Optional<UnsafePointer<UInt16>>, %40 : $Optional<UnsafePointer<UInt16>>), scope 129 // user: %42
  return %41 : $UnsafeBufferPointer<UInt16>, scope 129 // id: %42
}

sil_scope 130 {  parent @_TFFVs11_StringCore22isRepresentableAsASCIIFT_SbU_FVs6UInt16Sb : $@convention(thin) (UInt16) -> Bool }

// _StringCore.(isRepresentableAsASCII() -> Bool).(closure #1)
sil shared_external [fragile] @_TFFVs11_StringCore22isRepresentableAsASCIIFT_SbU_FVs6UInt16Sb : $@convention(thin) (UInt16) -> Bool {
// %0                                             // users: %3, %1
bb0(%0 : $UInt16):
  debug_value %0 : $UInt16, scope 130             // id: %1
  %2 = integer_literal $Builtin.Int16, 127, scope 130 // user: %4
  %3 = struct_extract %0 : $UInt16, #UInt16._value, scope 130 // user: %4
  %4 = builtin "cmp_ugt_Int16"(%3 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1, scope 130 // user: %5
  %5 = struct $Bool (%4 : $Builtin.Int1), scope 130 // user: %6
  return %5 : $Bool, scope 130                    // id: %6
}

sil_scope 131 {  parent @_TTSfq4n_g___TTSfq1cl53_TTRXFo_dVs6UInt16_dSbzoPs5Error__XFo_iS__dSbzoPS0___XFo_dVs6UInt16_dSbzoPs5Error___n___TTSgq5GSRVs6UInt16_GSRS__s8Sequences___TFEsPs8Sequence8containsfzT5whereFzWx8Iterator7Element_Sb_Sb : $@convention(thin) (@in_guaranteed UnsafeBufferPointer<UInt16>, @guaranteed @callee_owned (UInt16) -> (Bool, @error Error)) -> (Bool, @error Error) }

// specialized specialized specialized Sequence.contains(where : (A.Iterator.Element) throws -> Bool) throws -> Bool
sil shared_external [fragile] @_TTSfq4n_g___TTSfq1cl53_TTRXFo_dVs6UInt16_dSbzoPs5Error__XFo_iS__dSbzoPS0___XFo_dVs6UInt16_dSbzoPs5Error___n___TTSgq5GSRVs6UInt16_GSRS__s8Sequences___TFEsPs8Sequence8containsfzT5whereFzWx8Iterator7Element_Sb_Sb : $@convention(thin) (@in_guaranteed UnsafeBufferPointer<UInt16>, @guaranteed @callee_owned (UInt16) -> (Bool, @error Error)) -> (Bool, @error Error) {
// %0                                             // users: %6, %4, %3
// %1                                             // users: %21, %22
bb0(%0 : $*UnsafeBufferPointer<UInt16>, %1 : $@callee_owned (UInt16) -> (Bool, @error Error)):
  %2 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt16>>, scope 131 // users: %95, %33, %30, %29, %24, %14, %12
  debug_value_addr %0 : $*UnsafeBufferPointer<UInt16>, scope 131 // id: %3
  %4 = struct_element_addr %0 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._position, scope 131 // user: %5
  %5 = load %4 : $*Optional<UnsafePointer<UInt16>>, scope 131 // user: %9
  %6 = struct_element_addr %0 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._end, scope 131 // user: %7
  %7 = load %6 : $*Optional<UnsafePointer<UInt16>>, scope 131 // user: %9
  %8 = integer_literal $Builtin.Int64, 0, scope 131 // users: %56, %39, %10
  %9 = struct $UnsafeBufferPointer<UInt16> (%5 : $Optional<UnsafePointer<UInt16>>, %7 : $Optional<UnsafePointer<UInt16>>), scope 131 // user: %11
  %10 = struct $Int (%8 : $Builtin.Int64), scope 131 // user: %11
  %11 = struct $IndexingIterator<UnsafeBufferPointer<UInt16>> (%9 : $UnsafeBufferPointer<UInt16>, %10 : $Int), scope 131 // user: %12
  store %11 to %2 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, scope 131 // id: %12
  // function_ref specialized IndexingIterator.next() -> A._Element?
  %13 = function_ref @_TTSgq5GSRVs6UInt16_GSRS__s13IndexableBases___TFVs16IndexingIterator4nextfT_GSqwx8_Element_ : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt16>>) -> Optional<UInt16>, scope 131 // user: %14
  %14 = apply %13(%2) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt16>>) -> Optional<UInt16>, scope 131 // users: %18, %15
  switch_enum %14 : $Optional<UInt16>, case #Optional.some!enumelt.1: bb2, case #Optional.none!enumelt: bb1, scope 131 // id: %15

bb1:                                              // Preds: bb0
  br bb15, scope 131                              // id: %16

bb2:                                              // Preds: bb0
  %17 = integer_literal $Builtin.Int1, -1, scope 131 // users: %40, %90, %92, %80
  br bb3(%14 : $Optional<UInt16>), scope 131      // id: %18

// %19                                            // user: %20
bb3(%19 : $Optional<UInt16>):                     // Preds: bb14 bb2
  %20 = unchecked_enum_data %19 : $Optional<UInt16>, #Optional.some!enumelt.1, scope 131 // user: %22
  strong_retain %1 : $@callee_owned (UInt16) -> (Bool, @error Error), scope 131 // id: %21
  try_apply %1(%20) : $@callee_owned (UInt16) -> (Bool, @error Error), normal bb5, error bb4, scope 131 // id: %22

// %23                                            // user: %25
bb4(%23 : $Error):                                // Preds: bb3
  dealloc_stack %2 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, scope 131 // id: %24
  throw %23 : $Error, scope 131                   // id: %25

// %26                                            // user: %27
bb5(%26 : $Bool):                                 // Preds: bb3
  %27 = struct_extract %26 : $Bool, #Bool._value, scope 131 // user: %28
  cond_br %27, bb17, bb6, scope 131               // id: %28

bb6:                                              // Preds: bb5
  debug_value_addr %2 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, scope 131 // id: %29
  %30 = struct_element_addr %2 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, #IndexingIterator._position, scope 131 // users: %85, %78, %31
  %31 = struct_element_addr %30 : $*Int, #Int._value, scope 131 // user: %32
  %32 = load %31 : $*Builtin.Int64, scope 131     // users: %80, %73, %67, %39
  %33 = struct_element_addr %2 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, #IndexingIterator._elements, scope 131 // users: %36, %34
  %34 = struct_element_addr %33 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._position, scope 131 // user: %35
  %35 = load %34 : $*Optional<UnsafePointer<UInt16>>, scope 131 // users: %70, %38
  %36 = struct_element_addr %33 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._end, scope 131 // user: %37
  %37 = load %36 : $*Optional<UnsafePointer<UInt16>>, scope 131 // users: %46, %45
  switch_enum %35 : $Optional<UnsafePointer<UInt16>>, case #Optional.some!enumelt.1: bb8, case #Optional.none!enumelt: bb7, scope 131 // id: %38

bb7:                                              // Preds: bb6
  %39 = builtin "cmp_eq_Int64"(%32 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int1, scope 131 // user: %40
  %40 = builtin "xor_Int1"(%39 : $Builtin.Int1, %17 : $Builtin.Int1) : $Builtin.Int1, scope 131 // user: %41
  cond_fail %40 : $Builtin.Int1, scope 131        // id: %41
  br bb15, scope 131                              // id: %42

// %43                                            // users: %49, %44
bb8(%43 : $UnsafePointer<UInt16>):                // Preds: bb6
  debug_value %43 : $UnsafePointer<UInt16>, scope 131 // id: %44
  switch_enum %37 : $Optional<UnsafePointer<UInt16>>, case #Optional.none!enumelt: bb16, case #Optional.some!enumelt.1: bb9, scope 131 // id: %45

bb9:                                              // Preds: bb8
  %46 = unchecked_enum_data %37 : $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, scope 131 // user: %47
  %47 = struct_extract %46 : $UnsafePointer<UInt16>, #UnsafePointer._rawValue, scope 131 // user: %48
  %48 = builtin "ptrtoint_Word"(%47 : $Builtin.RawPointer) : $Builtin.Word, scope 131 // user: %51
  %49 = struct_extract %43 : $UnsafePointer<UInt16>, #UnsafePointer._rawValue, scope 131 // user: %50
  %50 = builtin "ptrtoint_Word"(%49 : $Builtin.RawPointer) : $Builtin.Word, scope 131 // user: %51
  %51 = builtin "sub_Word"(%48 : $Builtin.Word, %50 : $Builtin.Word) : $Builtin.Word, scope 131 // user: %52
  %52 = builtin "zextOrBitCast_Word_Int64"(%51 : $Builtin.Word) : $Builtin.Int64, scope 131 // users: %66, %59
  %53 = metatype $@thick UInt16.Type, scope 131   // user: %54
  %54 = builtin "strideof_nonzero"<UInt16>(%53 : $@thick UInt16.Type) : $Builtin.Word, scope 131 // user: %55
  %55 = builtin "zextOrBitCast_Word_Int64"(%54 : $Builtin.Word) : $Builtin.Int64, scope 131 // users: %66, %63, %56
  %56 = builtin "cmp_eq_Int64"(%55 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int1, scope 131 // user: %57
  cond_fail %56 : $Builtin.Int1, scope 131        // id: %57
  %58 = integer_literal $Builtin.Int64, -9223372036854775808, scope 131 // user: %59
  %59 = builtin "cmp_eq_Int64"(%52 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1, scope 131 // user: %60
  cond_br %59, bb11, bb10, scope 131              // id: %60

bb10:                                             // Preds: bb9
  br bb12, scope 131                              // id: %61

bb11:                                             // Preds: bb9
  %62 = integer_literal $Builtin.Int64, -1, scope 131 // user: %63
  %63 = builtin "cmp_eq_Int64"(%55 : $Builtin.Int64, %62 : $Builtin.Int64) : $Builtin.Int1, scope 131 // user: %64
  cond_fail %63 : $Builtin.Int1, scope 131        // id: %64
  br bb12, scope 131                              // id: %65

bb12:                                             // Preds: bb10 bb11
  %66 = builtin "sdiv_Int64"(%52 : $Builtin.Int64, %55 : $Builtin.Int64) : $Builtin.Int64, scope 131 // user: %67
  %67 = builtin "cmp_eq_Int64"(%32 : $Builtin.Int64, %66 : $Builtin.Int64) : $Builtin.Int1, scope 131 // user: %68
  cond_br %67, bb13, bb14, scope 131              // id: %68

bb13:                                             // Preds: bb12
  br bb15, scope 131                              // id: %69

bb14:                                             // Preds: bb12
  %70 = unchecked_enum_data %35 : $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, scope 131 // user: %71
  %71 = struct_extract %70 : $UnsafePointer<UInt16>, #UnsafePointer._rawValue, scope 131 // user: %72
  %72 = pointer_to_address %71 : $Builtin.RawPointer to [strict] $*UInt16, scope 131 // user: %74
  %73 = builtin "truncOrBitCast_Int64_Word"(%32 : $Builtin.Int64) : $Builtin.Word, scope 131 // user: %74
  %74 = index_addr %72 : $*UInt16, %73 : $Builtin.Word, scope 131 // user: %75
  %75 = struct_element_addr %74 : $*UInt16, #UInt16._value, scope 131 // user: %76
  %76 = load %75 : $*Builtin.Int16, scope 131     // user: %77
  %77 = struct $UInt16 (%76 : $Builtin.Int16), scope 131 // user: %86
  debug_value_addr %30 : $*Int, scope 131         // id: %78
  %79 = integer_literal $Builtin.Int64, 1, scope 131 // user: %80
  %80 = builtin "sadd_with_overflow_Int64"(%32 : $Builtin.Int64, %79 : $Builtin.Int64, %17 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 131 // users: %82, %81
  %81 = tuple_extract %80 : $(Builtin.Int64, Builtin.Int1), 0, scope 131 // user: %84
  %82 = tuple_extract %80 : $(Builtin.Int64, Builtin.Int1), 1, scope 131 // user: %83
  cond_fail %82 : $Builtin.Int1, scope 131        // id: %83
  %84 = struct $Int (%81 : $Builtin.Int64), scope 131 // user: %85
  store %84 to %30 : $*Int, scope 131             // id: %85
  %86 = enum $Optional<UInt16>, #Optional.some!enumelt.1, %77 : $UInt16, scope 131 // user: %87
  br bb3(%86 : $Optional<UInt16>), scope 131      // id: %87

bb15:                                             // Preds: bb13 bb7 bb1
  %88 = integer_literal $Builtin.Int1, 0, scope 131 // user: %89
  br bb18(%88 : $Builtin.Int1), scope 131         // id: %89

bb16:                                             // Preds: bb8
  cond_fail %17 : $Builtin.Int1, scope 131        // id: %90
  unreachable, scope 131                          // id: %91

bb17:                                             // Preds: bb5
  br bb18(%17 : $Builtin.Int1), scope 131         // id: %92

// %93                                            // user: %94
bb18(%93 : $Builtin.Int1):                        // Preds: bb17 bb15
  %94 = struct $Bool (%93 : $Builtin.Int1), scope 131 // user: %96
  dealloc_stack %2 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, scope 131 // id: %95
  return %94 : $Bool, scope 131                   // id: %96
}

sil_scope 132 {  parent @_TFVs11_StringCore14_claimCapacityfTSi15minElementWidthSi_TSiGSqSv__ : $@convention(method) (Int, Int, @inout _StringCore) -> (Int, Optional<UnsafeMutableRawPointer>) }
sil_scope 133 {  parent @_TTSfq4n_g__TTSfq4g___TFFVs11_StringCoreg12nativeBufferGSqVs13_StringBuffer_U_FPs9AnyObject_S0_ : $@convention(thin) (@guaranteed AnyObject) -> _StringBuffer }
sil_scope 134 {  parent 132 }
sil_scope 135 {  parent 133 inlined_at 134 }
sil_scope 136 {  parent 132 }
sil_scope 137 {  parent 133 inlined_at 136 }
sil_scope 138 {  parent 132 }
sil_scope 139 {  parent 126 inlined_at 138 }
sil_scope 140 {  parent 132 }
sil_scope 141 {  parent 126 inlined_at 140 }
sil_scope 142 {  parent 132 }
sil_scope 143 {  parent 98 inlined_at 142 }
sil_scope 144 {  parent 132 }
sil_scope 145 {  parent 90 inlined_at 144 }

// _StringCore._claimCapacity(Int, minElementWidth : Int) -> (Int, UnsafeMutableRawPointer?)
sil hidden_external [fragile] @_TFVs11_StringCore14_claimCapacityfTSi15minElementWidthSi_TSiGSqSv__ : $@convention(method) (Int, Int, @inout _StringCore) -> (Int, Optional<UnsafeMutableRawPointer>) {
// %0                                             // users: %217, %172, %129, %78, %5
// %1                                             // users: %36, %6
// %2                                             // users: %171, %51, %10, %7, %3
bb0(%0 : $Int, %1 : $Int, %2 : $*_StringCore):
  debug_value_addr %2 : $*_StringCore, scope 132  // id: %3
  %4 = alloc_stack $Optional<Builtin.NativeObject>, scope 132 // users: %221, %187, %184, %149, %50
  debug_value %0 : $Int, scope 132                // id: %5
  debug_value %1 : $Int, scope 132                // id: %6
  %7 = struct_element_addr %2 : $*_StringCore, #_StringCore._countAndFlags, scope 132 // users: %182, %8
  %8 = struct_element_addr %7 : $*UInt, #UInt._value, scope 132 // users: %173, %9
  %9 = load %8 : $*Builtin.Int64, scope 132       // users: %68, %32, %13
  %10 = struct_element_addr %2 : $*_StringCore, #_StringCore._owner, scope 132 // user: %11
  %11 = load %10 : $*Optional<AnyObject>, scope 132 // users: %41, %21, %19, %18
  %12 = integer_literal $Builtin.Int64, 1, scope 132 // users: %96, %98, %117, %34, %13
  %13 = builtin "shl_Int64"(%9 : $Builtin.Int64, %12 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %15
  %14 = integer_literal $Builtin.Int64, 0, scope 132 // users: %62, %53, %15
  %15 = builtin "cmp_slt_Int64"(%13 : $Builtin.Int64, %14 : $Builtin.Int64) : $Builtin.Int1, scope 132 // user: %16
  cond_br %15, bb1, bb2, scope 132                // id: %16

bb1:                                              // Preds: bb0
  br bb24, scope 132                              // id: %17

bb2:                                              // Preds: bb0
  debug_value %11 : $Optional<AnyObject>, scope 132 // id: %18
  switch_enum %11 : $Optional<AnyObject>, case #Optional.some!enumelt.1: bb4, case #Optional.none!enumelt: bb3, scope 132 // id: %19

bb3:                                              // Preds: bb2
  br bb24, scope 132                              // id: %20

bb4:                                              // Preds: bb2
  %21 = unchecked_enum_data %11 : $Optional<AnyObject>, #Optional.some!enumelt.1, scope 132 // users: %42, %44, %22
  debug_value %21 : $AnyObject, scope 135         // id: %22
  %23 = metatype $@thick AnyObject.Protocol, scope 135 // user: %24
  %24 = builtin "sizeof"<AnyObject>(%23 : $@thick AnyObject.Protocol) : $Builtin.Word, scope 135 // user: %27
  %25 = metatype $@thick _StringBuffer.Type, scope 135 // user: %26
  %26 = builtin "sizeof"<_StringBuffer>(%25 : $@thick _StringBuffer.Type) : $Builtin.Word, scope 135 // user: %27
  %27 = builtin "cmp_eq_Word"(%24 : $Builtin.Word, %26 : $Builtin.Word) : $Builtin.Int1, scope 135 // user: %29
  %28 = integer_literal $Builtin.Int1, -1, scope 135 // users: %92, %214, %60, %56, %38, %119, %130, %150, %201, %29
  %29 = builtin "xor_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1, scope 135 // user: %30
  cond_fail %29 : $Builtin.Int1, scope 135        // id: %30
  %31 = integer_literal $Builtin.Int64, 63, scope 132 // user: %32
  %32 = builtin "lshr_Int64"(%9 : $Builtin.Int64, %31 : $Builtin.Int64) : $Builtin.Int64, scope 132 // users: %59, %62, %69, %34
  %33 = integer_literal $Builtin.Int1, 0, scope 132 // users: %96, %98, %138, %34
  %34 = builtin "sadd_with_overflow_Int64"(%32 : $Builtin.Int64, %12 : $Builtin.Int64, %33 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 132 // user: %35
  %35 = tuple_extract %34 : $(Builtin.Int64, Builtin.Int1), 0, scope 132 // user: %37
  %36 = struct_extract %1 : $Int, #Int._value, scope 132 // user: %37
  %37 = builtin "cmp_sge_Int64"(%35 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1, scope 132 // user: %38
  %38 = builtin "int_expect_Int1"(%37 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1, scope 132 // user: %39
  cond_br %38, bb6, bb5, scope 132                // id: %39

bb5:                                              // Preds: bb4
  br bb24, scope 132                              // id: %40

bb6:                                              // Preds: bb4
  debug_value %11 : $Optional<AnyObject>, scope 132 // id: %41
  debug_value %21 : $AnyObject, scope 137         // id: %42
  %43 = alloc_stack $AnyObject, scope 137         // users: %49, %45, %44
  store %21 to %43 : $*AnyObject, scope 137       // id: %44
  %45 = unchecked_addr_cast %43 : $*AnyObject to $*_StringBuffer, scope 137 // user: %46
  %46 = struct_element_addr %45 : $*_StringBuffer, #_StringBuffer._storage, scope 137 // user: %47
  %47 = struct_element_addr %46 : $*_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 137 // user: %48
  %48 = load %47 : $*Optional<Builtin.NativeObject>, scope 137 // users: %140, %148, %109, %50, %81, %83
  dealloc_stack %43 : $*AnyObject, scope 137      // id: %49
  store %48 to %4 : $*Optional<Builtin.NativeObject>, scope 132 // id: %50
  %51 = struct_element_addr %2 : $*_StringCore, #_StringCore._baseAddress, scope 132 // user: %52
  %52 = load %51 : $*Optional<UnsafeMutableRawPointer>, scope 132 // users: %55, %61
  %53 = struct $Int (%14 : $Builtin.Int64), scope 132 // users: %54, %186
  debug_value %53 : $Int, scope 139               // id: %54
  switch_enum %52 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb8, scope 139 // id: %55

bb7:                                              // Preds: bb6
  cond_fail %28 : $Builtin.Int1, scope 139        // id: %56
  unreachable, scope 139                          // id: %57

bb8:                                              // Preds: bb6
  %58 = integer_literal $Builtin.Int64, 64, scope 139 // users: %118, %59
  %59 = builtin "cmp_ult_Int64"(%32 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1, scope 139 // user: %60
  %60 = builtin "xor_Int1"(%59 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1, scope 139 // user: %76
  %61 = unchecked_enum_data %52 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 139 // users: %70, %64, %63
  %62 = builtin "shl_Int64"(%14 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int64, scope 139 // user: %65
  %63 = struct_extract %61 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 139 // users: %72, %66
  debug_value %61 : $UnsafeMutableRawPointer, scope 139 // id: %64
  %65 = builtin "truncOrBitCast_Int64_Word"(%62 : $Builtin.Int64) : $Builtin.Word, scope 139 // user: %66
  %66 = index_raw_pointer %63 : $Builtin.RawPointer, %65 : $Builtin.Word, scope 139 // users: %75, %124
  %67 = integer_literal $Builtin.Int64, 4611686018427387903, scope 132 // user: %68
  %68 = builtin "and_Int64"(%9 : $Builtin.Int64, %67 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %69
  %69 = builtin "shl_Int64"(%68 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int64, scope 141 // user: %71
  debug_value %61 : $UnsafeMutableRawPointer, scope 141 // id: %70
  %71 = builtin "truncOrBitCast_Int64_Word"(%69 : $Builtin.Int64) : $Builtin.Word, scope 141 // user: %72
  %72 = index_raw_pointer %63 : $Builtin.RawPointer, %71 : $Builtin.Word, scope 141 // users: %75, %155, %73
  %73 = struct $UnsafeMutableRawPointer (%72 : $Builtin.RawPointer), scope 141 // users: %183, %74
  debug_value %73 : $UnsafeMutableRawPointer, scope 132 // id: %74
  %75 = builtin "cmp_ult_RawPointer"(%72 : $Builtin.RawPointer, %66 : $Builtin.RawPointer) : $Builtin.Int1, scope 132 // user: %76
  %76 = builtin "or_Int1"(%60 : $Builtin.Int1, %75 : $Builtin.Int1) : $Builtin.Int1, scope 132 // user: %77
  cond_fail %76 : $Builtin.Int1, scope 132        // id: %77
  debug_value %0 : $Int, scope 132                // id: %78
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %79 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 132 // user: %80
  %80 = apply %79() : $@convention(thin) () -> Int, scope 132 // users: %142, %121, %82
  switch_enum %48 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb23, case #Optional.some!enumelt.1: bb9, scope 132 // id: %81

bb9:                                              // Preds: bb8
  debug_value %80 : $Int, scope 132               // id: %82
  %83 = struct $_HeapBuffer<_StringBufferIVars, UInt16> (%48 : $Optional<Builtin.NativeObject>), scope 132 // users: %167, %166, %165, %164, %107, %106, %85, %84, %153
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 143 // id: %84
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 143 // id: %85
  %86 = metatype $@thick HeapObject.Type, scope 143 // user: %87
  %87 = builtin "sizeof"<HeapObject>(%86 : $@thick HeapObject.Type) : $Builtin.Word, scope 143 // user: %88
  %88 = builtin "zextOrBitCast_Word_Int64"(%87 : $Builtin.Word) : $Builtin.Int64, scope 143 // user: %92
  %89 = metatype $@thick _StringBufferIVars.Type, scope 143 // user: %90
  %90 = builtin "alignof"<_StringBufferIVars>(%89 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 143 // user: %91
  %91 = builtin "zextOrBitCast_Word_Int64"(%90 : $Builtin.Word) : $Builtin.Int64, scope 143 // users: %98, %92
  %92 = builtin "uadd_with_overflow_Int64"(%88 : $Builtin.Int64, %91 : $Builtin.Int64, %28 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 143 // users: %94, %93
  %93 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 0, scope 143 // user: %96
  %94 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 1, scope 143 // user: %95
  cond_fail %94 : $Builtin.Int1, scope 143        // id: %95
  %96 = builtin "usub_with_overflow_Int64"(%93 : $Builtin.Int64, %12 : $Builtin.Int64, %33 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 143 // user: %97
  %97 = tuple_extract %96 : $(Builtin.Int64, Builtin.Int1), 0, scope 143 // user: %102
  %98 = builtin "usub_with_overflow_Int64"(%91 : $Builtin.Int64, %12 : $Builtin.Int64, %33 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 143 // user: %99
  %99 = tuple_extract %98 : $(Builtin.Int64, Builtin.Int1), 0, scope 143 // user: %101
  %100 = integer_literal $Builtin.Int64, -1, scope 143 // user: %101
  %101 = builtin "xor_Int64"(%99 : $Builtin.Int64, %100 : $Builtin.Int64) : $Builtin.Int64, scope 143 // user: %102
  %102 = builtin "and_Int64"(%97 : $Builtin.Int64, %101 : $Builtin.Int64) : $Builtin.Int64, scope 143 // user: %103
  %103 = builtin "u_to_s_checked_conversion_Int64"(%102 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 143 // users: %108, %104
  %104 = tuple_extract %103 : $(Builtin.Int64, Builtin.Int1), 1, scope 143 // user: %105
  cond_fail %104 : $Builtin.Int1, scope 143       // id: %105
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 143 // id: %106
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 143 // id: %107
  %108 = tuple_extract %103 : $(Builtin.Int64, Builtin.Int1), 0, scope 143 // user: %111
  %109 = unchecked_enum_data %48 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 143 // user: %110
  %110 = ref_to_raw_pointer %109 : $Builtin.NativeObject to $Builtin.RawPointer, scope 143 // users: %123, %112
  %111 = builtin "truncOrBitCast_Int64_Word"(%108 : $Builtin.Int64) : $Builtin.Word, scope 143 // user: %112
  %112 = index_raw_pointer %110 : $Builtin.RawPointer, %111 : $Builtin.Word, scope 143 // user: %113
  %113 = pointer_to_address %112 : $Builtin.RawPointer to [strict] $*_StringBufferIVars, scope 132 // users: %168, %114
  %114 = struct_element_addr %113 : $*_StringBufferIVars, #_StringBufferIVars.capacityAndElementShift, scope 132 // user: %115
  %115 = struct_element_addr %114 : $*Int, #Int._value, scope 132 // user: %116
  %116 = load %115 : $*Builtin.Int64, scope 132   // users: %135, %117
  %117 = builtin "and_Int64"(%116 : $Builtin.Int64, %12 : $Builtin.Int64) : $Builtin.Int64, scope 132 // users: %143, %136, %128, %118
  %118 = builtin "cmp_ult_Int64"(%117 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1, scope 132 // user: %119
  %119 = builtin "xor_Int1"(%118 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1, scope 132 // user: %120
  cond_fail %119 : $Builtin.Int1, scope 132       // id: %120
  %121 = struct_extract %80 : $Int, #Int._value, scope 132 // user: %122
  %122 = builtin "truncOrBitCast_Int64_Word"(%121 : $Builtin.Int64) : $Builtin.Word, scope 132 // user: %123
  %123 = index_raw_pointer %110 : $Builtin.RawPointer, %122 : $Builtin.Word, scope 132 // users: %145, %125
  %124 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word, scope 132 // user: %126
  %125 = builtin "ptrtoint_Word"(%123 : $Builtin.RawPointer) : $Builtin.Word, scope 132 // user: %126
  %126 = builtin "sub_Word"(%124 : $Builtin.Word, %125 : $Builtin.Word) : $Builtin.Word, scope 132 // user: %127
  %127 = builtin "zextOrBitCast_Word_Int64"(%126 : $Builtin.Word) : $Builtin.Int64, scope 132 // user: %128
  %128 = builtin "ashr_Int64"(%127 : $Builtin.Int64, %117 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %130
  %129 = struct_extract %0 : $Int, #Int._value, scope 132 // users: %209, %206, %193, %176, %130
  %130 = builtin "sadd_with_overflow_Int64"(%129 : $Builtin.Int64, %128 : $Builtin.Int64, %28 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 132 // users: %133, %131
  %131 = tuple_extract %130 : $(Builtin.Int64, Builtin.Int1), 1, scope 132 // user: %132
  cond_fail %131 : $Builtin.Int1, scope 132       // id: %132
  %133 = tuple_extract %130 : $(Builtin.Int64, Builtin.Int1), 0, scope 132 // users: %143, %137
  %134 = integer_literal $Builtin.Int64, -2, scope 132 // user: %135
  %135 = builtin "and_Int64"(%116 : $Builtin.Int64, %134 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %136
  %136 = builtin "ashr_Int64"(%135 : $Builtin.Int64, %117 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %137
  %137 = builtin "cmp_sgt_Int64"(%133 : $Builtin.Int64, %136 : $Builtin.Int64) : $Builtin.Int1, scope 132 // user: %138
  %138 = builtin "int_expect_Int1"(%137 : $Builtin.Int1, %33 : $Builtin.Int1) : $Builtin.Int1, scope 132 // user: %139
  cond_br %138, bb10, bb11, scope 132             // id: %139

bb10:                                             // Preds: bb9
  retain_value %48 : $Optional<Builtin.NativeObject>, scope 132 // id: %140
  br bb17, scope 132                              // id: %141

bb11:                                             // Preds: bb9
  debug_value %80 : $Int, scope 132               // id: %142
  %143 = builtin "shl_Int64"(%133 : $Builtin.Int64, %117 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %144
  %144 = builtin "truncOrBitCast_Int64_Word"(%143 : $Builtin.Int64) : $Builtin.Word, scope 132 // user: %145
  %145 = index_raw_pointer %123 : $Builtin.RawPointer, %144 : $Builtin.Word, scope 132 // users: %156, %146
  %146 = struct $UnsafeMutableRawPointer (%145 : $Builtin.RawPointer), scope 132 // users: %163, %162, %147
  debug_value %146 : $UnsafeMutableRawPointer, scope 132 // id: %147
  retain_value %48 : $Optional<Builtin.NativeObject>, scope 132 // id: %148
  %149 = is_unique %4 : $*Optional<Builtin.NativeObject>, scope 132 // user: %150
  %150 = builtin "int_expect_Int1"(%149 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1, scope 132 // user: %151
  cond_br %150, bb15, bb12, scope 132             // id: %151

bb12:                                             // Preds: bb11
  // function_ref specialized _HeapBuffer._value.getter
  %152 = function_ref @_TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferg6_valueGSpx_ : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> UnsafeMutablePointer<_StringBufferIVars>, scope 132 // user: %153
  %153 = apply %152(%83) : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> UnsafeMutablePointer<_StringBufferIVars>, scope 132 // user: %154
  %154 = struct_extract %153 : $UnsafeMutablePointer<_StringBufferIVars>, #UnsafeMutablePointer._rawValue, scope 132 // user: %157
  %155 = builtin "ptrtoint_Word"(%72 : $Builtin.RawPointer) : $Builtin.Word, scope 132 // user: %157
  %156 = builtin "ptrtoint_Word"(%145 : $Builtin.RawPointer) : $Builtin.Word, scope 132 // user: %157
  %157 = builtin "cmpxchg_seqcst_seqcst_Word"(%154 : $Builtin.RawPointer, %155 : $Builtin.Word, %156 : $Builtin.Word) : $(Builtin.Word, Builtin.Int1), scope 132 // user: %158
  %158 = tuple_extract %157 : $(Builtin.Word, Builtin.Int1), 1, scope 132 // user: %159
  cond_br %158, bb14, bb13, scope 132             // id: %159

bb13:                                             // Preds: bb12
  br bb17, scope 132                              // id: %160

bb14:                                             // Preds: bb12
  br bb16, scope 132                              // id: %161

bb15:                                             // Preds: bb11
  debug_value %146 : $UnsafeMutableRawPointer, scope 132 // id: %162
  %163 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %146 : $UnsafeMutableRawPointer, scope 132 // user: %169
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 145 // id: %164
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 145 // id: %165
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 145 // id: %166
  debug_value %83 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 145 // id: %167
  %168 = struct_element_addr %113 : $*_StringBufferIVars, #_StringBufferIVars.usedEnd, scope 132 // user: %169
  store %163 to %168 : $*Optional<UnsafeMutableRawPointer>, scope 132 // id: %169
  br bb16, scope 132                              // id: %170

bb16:                                             // Preds: bb14 bb15
  debug_value_addr %2 : $*_StringCore, scope 132  // id: %171
  debug_value %0 : $Int, scope 132                // id: %172
  %173 = load %8 : $*Builtin.Int64, scope 132     // user: %175
  %174 = integer_literal $Builtin.Int64, -4611686018427387904, scope 132 // user: %175
  %175 = builtin "and_Int64"(%173 : $Builtin.Int64, %174 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %180
  %176 = builtin "s_to_u_checked_conversion_Int64"(%129 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 132 // users: %178, %177
  %177 = tuple_extract %176 : $(Builtin.Int64, Builtin.Int1), 0, scope 132 // user: %180
  %178 = tuple_extract %176 : $(Builtin.Int64, Builtin.Int1), 1, scope 132 // user: %179
  cond_fail %178 : $Builtin.Int1, scope 132       // id: %179
  %180 = builtin "or_Int64"(%175 : $Builtin.Int64, %177 : $Builtin.Int64) : $Builtin.Int64, scope 132 // user: %181
  %181 = struct $UInt (%180 : $Builtin.Int64), scope 132 // user: %182
  store %181 to %7 : $*UInt, scope 132            // id: %182
  %183 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %73 : $UnsafeMutableRawPointer, scope 132 // user: %186
  %184 = load %4 : $*Optional<Builtin.NativeObject>, scope 132 // user: %185
  release_value %184 : $Optional<Builtin.NativeObject>, scope 132 // id: %185
  br bb25(%53 : $Int, %183 : $Optional<UnsafeMutableRawPointer>), scope 132 // id: %186

bb17:                                             // Preds: bb13 bb10
  %187 = load %4 : $*Optional<Builtin.NativeObject>, scope 132 // users: %195, %205, %188
  %188 = struct $_HeapBuffer<_StringBufferIVars, UInt16> (%187 : $Optional<Builtin.NativeObject>), scope 132 // user: %189
  %189 = struct $_StringBuffer (%188 : $_HeapBuffer<_StringBufferIVars, UInt16>), scope 132 // users: %197, %191
  // function_ref _StringBuffer.capacity.getter
  %190 = function_ref @_TFVs13_StringBufferg8capacitySi : $@convention(method) (@guaranteed _StringBuffer) -> Int, scope 132 // users: %197, %191
  %191 = apply %190(%189) : $@convention(method) (@guaranteed _StringBuffer) -> Int, scope 132 // user: %192
  %192 = struct_extract %191 : $Int, #Int._value, scope 132 // user: %193
  %193 = builtin "cmp_sgt_Int64"(%129 : $Builtin.Int64, %192 : $Builtin.Int64) : $Builtin.Int1, scope 132 // user: %194
  cond_br %193, bb19, bb18, scope 132             // id: %194

bb18:                                             // Preds: bb17
  release_value %187 : $Optional<Builtin.NativeObject>, scope 132 // id: %195
  br bb24, scope 132                              // id: %196

bb19:                                             // Preds: bb17
  %197 = apply %190(%189) : $@convention(method) (@guaranteed _StringBuffer) -> Int, scope 132 // users: %200, %198
  debug_value %197 : $Int, scope 132              // id: %198
  %199 = integer_literal $Builtin.Int64, 2, scope 132 // user: %201
  %200 = struct_extract %197 : $Int, #Int._value, scope 132 // user: %201
  %201 = builtin "smul_with_overflow_Int64"(%200 : $Builtin.Int64, %199 : $Builtin.Int64, %28 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 132 // users: %203, %202
  %202 = tuple_extract %201 : $(Builtin.Int64, Builtin.Int1), 0, scope 132 // users: %208, %206
  %203 = tuple_extract %201 : $(Builtin.Int64, Builtin.Int1), 1, scope 132 // user: %204
  cond_fail %203 : $Builtin.Int1, scope 132       // id: %204
  release_value %187 : $Optional<Builtin.NativeObject>, scope 132 // id: %205
  %206 = builtin "cmp_sge_Int64"(%129 : $Builtin.Int64, %202 : $Builtin.Int64) : $Builtin.Int1, scope 132 // user: %207
  cond_br %206, bb21, bb20, scope 132             // id: %207

bb20:                                             // Preds: bb19
  br bb22(%202 : $Builtin.Int64), scope 132       // id: %208

bb21:                                             // Preds: bb19
  br bb22(%129 : $Builtin.Int64), scope 132       // id: %209

// %210                                           // user: %211
bb22(%210 : $Builtin.Int64):                      // Preds: bb21 bb20
  %211 = struct $Int (%210 : $Builtin.Int64), scope 132 // user: %213
  %212 = enum $Optional<UnsafeMutableRawPointer>, #Optional.none!enumelt, scope 132 // user: %213
  br bb25(%211 : $Int, %212 : $Optional<UnsafeMutableRawPointer>), scope 132 // id: %213

bb23:                                             // Preds: bb8
  cond_fail %28 : $Builtin.Int1, scope 132        // id: %214
  unreachable, scope 132                          // id: %215

bb24:                                             // Preds: bb5 bb1 bb18 bb3
  %216 = enum $Optional<UnsafeMutableRawPointer>, #Optional.none!enumelt, scope 132 // user: %217
  br bb25(%0 : $Int, %216 : $Optional<UnsafeMutableRawPointer>), scope 132 // id: %217

// %218                                           // user: %220
// %219                                           // user: %220
bb25(%218 : $Int, %219 : $Optional<UnsafeMutableRawPointer>): // Preds: bb24 bb22 bb16
  %220 = tuple (%218 : $Int, %219 : $Optional<UnsafeMutableRawPointer>), scope 132 // user: %222
  dealloc_stack %4 : $*Optional<Builtin.NativeObject>, scope 132 // id: %221
  return %220 : $(Int, Optional<UnsafeMutableRawPointer>), scope 132 // id: %222
}

sil_scope 146 {  parent @_TFVs11_StringCore12_copyInPlacefT7newSizeSi11newCapacitySi15minElementWidthSi_T_ : $@convention(method) (Int, Int, Int, @inout _StringCore) -> () }

// _StringCore._copyInPlace(newSize : Int, newCapacity : Int, minElementWidth : Int) -> ()
sil hidden_external [fragile] @_TFVs11_StringCore12_copyInPlacefT7newSizeSi11newCapacitySi15minElementWidthSi_T_ : $@convention(method) (Int, Int, Int, @inout _StringCore) -> () {
// %0                                             // users: %69, %5
// %1                                             // users: %69, %6
// %2                                             // users: %65, %22, %7
// %3                                             // users: %143, %71, %25, %11, %8, %4
bb0(%0 : $Int, %1 : $Int, %2 : $Int, %3 : $*_StringCore):
  debug_value_addr %3 : $*_StringCore, scope 146  // id: %4
  debug_value %0 : $Int, scope 146                // id: %5
  debug_value %1 : $Int, scope 146                // id: %6
  debug_value %2 : $Int, scope 146                // id: %7
  %8 = struct_element_addr %3 : $*_StringCore, #_StringCore._countAndFlags, scope 146 // user: %9
  %9 = struct_element_addr %8 : $*UInt, #UInt._value, scope 146 // users: %106, %78, %10
  %10 = load %9 : $*Builtin.Int64, scope 146      // users: %17, %13
  %11 = struct_element_addr %3 : $*_StringCore, #_StringCore._owner, scope 146 // users: %142, %107, %27
  %12 = integer_literal $Builtin.Int64, 4611686018427387903, scope 146 // user: %13
  %13 = builtin "and_Int64"(%10 : $Builtin.Int64, %12 : $Builtin.Int64) : $Builtin.Int64, scope 146 // user: %14
  %14 = struct $Int (%13 : $Builtin.Int64), scope 146 // users: %101, %43, %15
  debug_value %14 : $Int, scope 146               // id: %15
  %16 = integer_literal $Builtin.Int64, 63, scope 146 // users: %89, %17
  %17 = builtin "lshr_Int64"(%10 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int64, scope 146 // user: %20
  %18 = integer_literal $Builtin.Int64, 1, scope 146 // users: %108, %90, %59, %33, %20
  %19 = integer_literal $Builtin.Int1, 0, scope 146 // users: %90, %20
  %20 = builtin "sadd_with_overflow_Int64"(%17 : $Builtin.Int64, %18 : $Builtin.Int64, %19 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 146 // user: %21
  %21 = tuple_extract %20 : $(Builtin.Int64, Builtin.Int1), 0, scope 146 // users: %33, %23
  %22 = struct_extract %2 : $Int, #Int._value, scope 146 // user: %23
  %23 = builtin "cmp_sge_Int64"(%22 : $Builtin.Int64, %21 : $Builtin.Int64) : $Builtin.Int1, scope 146 // user: %24
  cond_br %23, bb10, bb1, scope 146               // id: %24

bb1:                                              // Preds: bb0
  %25 = struct_element_addr %3 : $*_StringCore, #_StringCore._baseAddress, scope 146 // user: %26
  %26 = load %25 : $*Optional<UnsafeMutableRawPointer>, scope 146 // users: %38, %32, %31, %30, %29, %28
  %27 = load %11 : $*Optional<AnyObject>, scope 146 // users: %55, %51
  debug_value %26 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %28
  debug_value %26 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %29
  debug_value %26 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %30
  debug_value %26 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %31
  switch_enum %26 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb8, case #Optional.some!enumelt.1: bb2, scope 146 // id: %32

bb2:                                              // Preds: bb1
  %33 = builtin "cmp_eq_Int64"(%21 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1, scope 146 // user: %35
  %34 = integer_literal $Builtin.Int1, -1, scope 146 // user: %35
  %35 = builtin "int_expect_Int1"(%33 : $Builtin.Int1, %34 : $Builtin.Int1) : $Builtin.Int1, scope 146 // user: %36
  cond_br %35, bb3, bb4, scope 146                // id: %36

bb3:                                              // Preds: bb2
  br bb7, scope 146                               // id: %37

bb4:                                              // Preds: bb2
  %38 = unchecked_enum_data %26 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 146 // user: %39
  %39 = struct_extract %38 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 146 // user: %40
  %40 = struct $UnsafePointer<UInt16> (%39 : $Builtin.RawPointer), scope 146 // user: %41
  %41 = enum $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, %40 : $UnsafePointer<UInt16>, scope 146 // user: %43
  // function_ref specialized specialized UnsafeBufferPointer.init(start : UnsafePointer<A>?, count : Int) -> UnsafeBufferPointer<A>
  %42 = function_ref @_TTSfq4n_n_d___TTSgq5Vs6UInt16___TFSRCfT5startGSqGSPx__5countSi_GSRx_ : $@convention(thin) (Optional<UnsafePointer<UInt16>>, Int) -> UnsafeBufferPointer<UInt16>, scope 146 // user: %43
  %43 = apply %42(%41, %14) : $@convention(thin) (Optional<UnsafePointer<UInt16>>, Int) -> UnsafeBufferPointer<UInt16>, scope 146 // users: %46, %44
  debug_value %43 : $UnsafeBufferPointer<UInt16>, scope 146 // id: %44
  %45 = alloc_stack $UnsafeBufferPointer<UInt16>, scope 146 // users: %54, %52, %46
  store %43 to %45 : $*UnsafeBufferPointer<UInt16>, scope 146 // id: %46
  // function_ref _StringCore.(isRepresentableAsASCII() -> Bool).(closure #1)
  %47 = function_ref @_TFFVs11_StringCore22isRepresentableAsASCIIFT_SbU_FVs6UInt16Sb : $@convention(thin) (UInt16) -> Bool, scope 146 // user: %48
  %48 = thin_to_thick_function %47 : $@convention(thin) (UInt16) -> Bool to $@callee_owned (UInt16) -> Bool, scope 146 // user: %49
  %49 = convert_function %48 : $@callee_owned (UInt16) -> Bool to $@callee_owned (UInt16) -> (Bool, @error Error), scope 146 // user: %52
  // function_ref specialized specialized specialized Sequence.contains(where : (A.Iterator.Element) throws -> Bool) throws -> Bool
  %50 = function_ref @_TTSfq4n_g___TTSfq1cl53_TTRXFo_dVs6UInt16_dSbzoPs5Error__XFo_iS__dSbzoPS0___XFo_dVs6UInt16_dSbzoPs5Error___n___TTSgq5GSRVs6UInt16_GSRS__s8Sequences___TFEsPs8Sequence8containsfzT5whereFzWx8Iterator7Element_Sb_Sb : $@convention(thin) (@in_guaranteed UnsafeBufferPointer<UInt16>, @guaranteed @callee_owned (UInt16) -> (Bool, @error Error)) -> (Bool, @error Error), scope 146 // user: %52
  retain_value %27 : $Optional<AnyObject>, scope 146 // id: %51
  %52 = apply [nothrow] %50(%45, %49) : $@convention(thin) (@in_guaranteed UnsafeBufferPointer<UInt16>, @guaranteed @callee_owned (UInt16) -> (Bool, @error Error)) -> (Bool, @error Error), scope 146 // user: %53
  %53 = struct_extract %52 : $Bool, #Bool._value, scope 146 // user: %56
  dealloc_stack %45 : $*UnsafeBufferPointer<UInt16>, scope 146 // id: %54
  release_value %27 : $Optional<AnyObject>, scope 146 // id: %55
  cond_br %53, bb6, bb5, scope 146                // id: %56

bb5:                                              // Preds: bb4
  br bb7, scope 146                               // id: %57

bb6:                                              // Preds: bb4
  br bb9, scope 146                               // id: %58

bb7:                                              // Preds: bb5 bb3
  %59 = struct $Int (%18 : $Builtin.Int64), scope 146 // user: %60
  br bb11(%59 : $Int), scope 146                  // id: %60

bb8:                                              // Preds: bb1
  br bb9, scope 146                               // id: %61

bb9:                                              // Preds: bb6 bb8
  %62 = integer_literal $Builtin.Int64, 2, scope 146 // user: %63
  %63 = struct $Int (%62 : $Builtin.Int64), scope 146 // user: %64
  br bb11(%63 : $Int), scope 146                  // id: %64

bb10:                                             // Preds: bb0
  br bb11(%2 : $Int), scope 146                   // id: %65

// %66                                            // users: %101, %69, %67
bb11(%66 : $Int):                                 // Preds: bb10 bb9 bb7
  debug_value %66 : $Int, scope 146               // id: %67
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %68 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 146 // user: %69
  %69 = apply %68(%1, %0, %66) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 146 // users: %141, %120, %118, %80, %79, %70
  debug_value %69 : $_StringBuffer, scope 146     // id: %70
  %71 = struct_element_addr %3 : $*_StringCore, #_StringCore._baseAddress, scope 146 // user: %72
  %72 = load %71 : $*Optional<UnsafeMutableRawPointer>, scope 146 // users: %88, %77, %76, %75, %74, %73
  debug_value %72 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %73
  debug_value %72 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %74
  debug_value %72 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %75
  debug_value %72 : $Optional<UnsafeMutableRawPointer>, scope 146 // id: %76
  switch_enum %72 : $Optional<UnsafeMutableRawPointer>, case #Optional.none!enumelt: bb15, case #Optional.some!enumelt.1: bb12, scope 146 // id: %77

bb12:                                             // Preds: bb11
  %78 = load %9 : $*Builtin.Int64, scope 146      // user: %89
  debug_value %69 : $_StringBuffer, scope 146     // id: %79
  %80 = struct_extract %69 : $_StringBuffer, #_StringBuffer._storage, scope 146 // users: %86, %85, %82, %81
  %81 = struct_extract %80 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 146 // users: %93, %87
  debug_value %80 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 146 // id: %82
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %83 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 146 // user: %84
  %84 = apply %83() : $@convention(thin) () -> Int, scope 146 // users: %96, %95
  debug_value %80 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 146 // id: %85
  debug_value %80 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 146 // id: %86
  switch_enum %81 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb14, case #Optional.some!enumelt.1: bb13, scope 146 // id: %87

bb13:                                             // Preds: bb12
  %88 = unchecked_enum_data %72 : $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, scope 146 // user: %101
  %89 = builtin "lshr_Int64"(%78 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int64, scope 146 // user: %90
  %90 = builtin "sadd_with_overflow_Int64"(%89 : $Builtin.Int64, %18 : $Builtin.Int64, %19 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 146 // user: %91
  %91 = tuple_extract %90 : $(Builtin.Int64, Builtin.Int1), 0, scope 146 // user: %92
  %92 = struct $Int (%91 : $Builtin.Int64), scope 146 // user: %101
  %93 = unchecked_enum_data %81 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 146 // user: %94
  %94 = ref_to_raw_pointer %93 : $Builtin.NativeObject to $Builtin.RawPointer, scope 146 // user: %98
  %95 = struct_extract %84 : $Int, #Int._value, scope 146 // user: %97
  debug_value %84 : $Int, scope 146               // id: %96
  %97 = builtin "truncOrBitCast_Int64_Word"(%95 : $Builtin.Int64) : $Builtin.Word, scope 146 // user: %98
  %98 = index_raw_pointer %94 : $Builtin.RawPointer, %97 : $Builtin.Word, scope 146 // user: %99
  %99 = struct $UnsafeMutableRawPointer (%98 : $Builtin.RawPointer), scope 146 // user: %101
  // function_ref specialized static _StringCore._copyElements(UnsafeMutableRawPointer, srcElementWidth : Int, dstStart : UnsafeMutableRawPointer, dstElementWidth : Int, count : Int) -> ()
  %100 = function_ref @_TTSfq4n_n_n_n_n_d___TZFVs11_StringCore13_copyElementsfTSv15srcElementWidthSi8dstStartSv15dstElementWidthSi5countSi_T_ : $@convention(thin) (UnsafeMutableRawPointer, Int, UnsafeMutableRawPointer, Int, Int) -> (), scope 146 // user: %101
  %101 = apply %100(%88, %92, %99, %66, %14) : $@convention(thin) (UnsafeMutableRawPointer, Int, UnsafeMutableRawPointer, Int, Int) -> (), scope 146
  br bb19, scope 146                              // id: %102

bb14:                                             // Preds: bb12
  %103 = integer_literal $Builtin.Int1, -1, scope 146 // user: %104
  cond_fail %103 : $Builtin.Int1, scope 146       // id: %104
  unreachable, scope 146                          // id: %105

bb15:                                             // Preds: bb11
  %106 = load %9 : $*Builtin.Int64, scope 146     // user: %108
  %107 = load %11 : $*Optional<AnyObject>, scope 146 // users: %138, %136, %127, %115, %114
  %108 = builtin "shl_Int64"(%106 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int64, scope 146 // user: %110
  %109 = integer_literal $Builtin.Int64, 0, scope 146 // user: %110
  %110 = builtin "cmp_slt_Int64"(%108 : $Builtin.Int64, %109 : $Builtin.Int64) : $Builtin.Int1, scope 146 // user: %112
  %111 = integer_literal $Builtin.Int1, -1, scope 146 // users: %116, %147, %112
  %112 = builtin "xor_Int1"(%110 : $Builtin.Int1, %111 : $Builtin.Int1) : $Builtin.Int1, scope 146 // user: %113
  cond_fail %112 : $Builtin.Int1, scope 146       // id: %113
  debug_value %107 : $Optional<AnyObject>, scope 146 // id: %114
  switch_enum %107 : $Optional<AnyObject>, case #Optional.some!enumelt.1: bb17, case #Optional.none!enumelt: bb16, scope 146 // id: %115

bb16:                                             // Preds: bb15
  cond_fail %111 : $Builtin.Int1, scope 146       // id: %116
  unreachable, scope 146                          // id: %117

bb17:                                             // Preds: bb15
  %118 = struct_extract %69 : $_StringBuffer, #_StringBuffer._storage, scope 146 // users: %125, %124, %121, %119
  %119 = struct_extract %118 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 146 // users: %128, %126
  debug_value %69 : $_StringBuffer, scope 146     // id: %120
  debug_value %118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 146 // id: %121
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %122 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 146 // user: %123
  %123 = apply %122() : $@convention(thin) () -> Int, scope 146 // users: %131, %130
  debug_value %118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 146 // id: %124
  debug_value %118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 146 // id: %125
  switch_enum %119 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb20, case #Optional.some!enumelt.1: bb18, scope 146 // id: %126

bb18:                                             // Preds: bb17
  %127 = unchecked_enum_data %107 : $Optional<AnyObject>, #Optional.some!enumelt.1, scope 146 // user: %137
  %128 = unchecked_enum_data %119 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 146 // user: %129
  %129 = ref_to_raw_pointer %128 : $Builtin.NativeObject to $Builtin.RawPointer, scope 146 // user: %133
  %130 = struct_extract %123 : $Int, #Int._value, scope 146 // user: %132
  debug_value %123 : $Int, scope 146              // id: %131
  %132 = builtin "truncOrBitCast_Int64_Word"(%130 : $Builtin.Int64) : $Builtin.Word, scope 146 // user: %133
  %133 = index_raw_pointer %129 : $Builtin.RawPointer, %132 : $Builtin.Word, scope 146 // user: %134
  %134 = struct $UnsafeMutablePointer<UInt16> (%133 : $Builtin.RawPointer), scope 146 // user: %137
  // function_ref specialized _cocoaStringReadAll(AnyObject, UnsafeMutablePointer<UInt16>) -> ()
  %135 = function_ref @_TTSfq4g_n___TFs19_cocoaStringReadAllFTPs9AnyObject_GSpVs6UInt16__T_ : $@convention(thin) (@guaranteed AnyObject, UnsafeMutablePointer<UInt16>) -> (), scope 146 // user: %137
  retain_value %107 : $Optional<AnyObject>, scope 146 // id: %136
  %137 = apply %135(%127, %134) : $@convention(thin) (@guaranteed AnyObject, UnsafeMutablePointer<UInt16>) -> (), scope 146
  release_value %107 : $Optional<AnyObject>, scope 146 // id: %138
  br bb19, scope 146                              // id: %139

bb19:                                             // Preds: bb18 bb13
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %140 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 146 // user: %141
  %141 = apply %140(%69) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 146 // user: %143
  %142 = load %11 : $*Optional<AnyObject>, scope 146 // user: %144
  store %141 to %3 : $*_StringCore, scope 146     // id: %143
  release_value %142 : $Optional<AnyObject>, scope 146 // id: %144
  %145 = tuple (), scope 146                      // user: %146
  return %145 : $(), scope 146                    // id: %146

bb20:                                             // Preds: bb17
  cond_fail %111 : $Builtin.Int1, scope 146       // id: %147
  unreachable, scope 146                          // id: %148
}

sil_scope 147 {  parent @_TTSfq4n_n_n_n_n_d___TZFVs11_StringCore13_copyElementsfTSv15srcElementWidthSi8dstStartSv15dstElementWidthSi5countSi_T_ : $@convention(thin) (UnsafeMutableRawPointer, Int, UnsafeMutableRawPointer, Int, Int) -> () }

// specialized static _StringCore._copyElements(UnsafeMutableRawPointer, srcElementWidth : Int, dstStart : UnsafeMutableRawPointer, dstElementWidth : Int, count : Int) -> ()
sil hidden_external [fragile] @_TTSfq4n_n_n_n_n_d___TZFVs11_StringCore13_copyElementsfTSv15srcElementWidthSi8dstStartSv15dstElementWidthSi5countSi_T_ : $@convention(thin) (UnsafeMutableRawPointer, Int, UnsafeMutableRawPointer, Int, Int) -> () {
// %0                                             // users: %109, %106, %53, %18, %5
// %1                                             // users: %10, %6
// %2                                             // users: %107, %105, %66, %31, %7
// %3                                             // users: %11, %8
// %4                                             // users: %99, %57, %22, %9
bb0(%0 : $UnsafeMutableRawPointer, %1 : $Int, %2 : $UnsafeMutableRawPointer, %3 : $Int, %4 : $Int):
  debug_value %0 : $UnsafeMutableRawPointer, scope 147 // id: %5
  debug_value %1 : $Int, scope 147                // id: %6
  debug_value %2 : $UnsafeMutableRawPointer, scope 147 // id: %7
  debug_value %3 : $Int, scope 147                // id: %8
  debug_value %4 : $Int, scope 147                // id: %9
  %10 = struct_extract %1 : $Int, #Int._value, scope 147 // users: %86, %16, %12
  %11 = struct_extract %3 : $Int, #Int._value, scope 147 // users: %16, %12
  %12 = builtin "cmp_eq_Int64"(%10 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1, scope 147 // user: %14
  %13 = integer_literal $Builtin.Int1, -1, scope 147 // users: %97, %86, %14
  %14 = builtin "int_expect_Int1"(%12 : $Builtin.Int1, %13 : $Builtin.Int1) : $Builtin.Int1, scope 147 // user: %15
  cond_br %14, bb14, bb1, scope 147               // id: %15

bb1:                                              // Preds: bb0
  %16 = builtin "cmp_slt_Int64"(%10 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1, scope 147 // user: %17
  cond_br %16, bb8, bb2, scope 147                // id: %17

bb2:                                              // Preds: bb1
  %18 = struct_extract %0 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 147 // users: %34, %28, %27
  %19 = metatype $@thick UInt16.Type, scope 147   // user: %20
  %20 = builtin "strideof_nonzero"<UInt16>(%19 : $@thick UInt16.Type) : $Builtin.Word, scope 147 // users: %47, %21
  %21 = builtin "zextOrBitCast_Word_Int64"(%20 : $Builtin.Word) : $Builtin.Int64, scope 147 // user: %24
  %22 = struct_extract %4 : $Int, #Int._value, scope 147 // user: %24
  %23 = integer_literal $Builtin.Int1, 0, scope 147 // user: %24
  %24 = builtin "smul_with_overflow_Int64"(%22 : $Builtin.Int64, %21 : $Builtin.Int64, %23 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 147 // user: %25
  %25 = tuple_extract %24 : $(Builtin.Int64, Builtin.Int1), 0, scope 147 // user: %26
  %26 = builtin "truncOrBitCast_Int64_Word"(%25 : $Builtin.Int64) : $Builtin.Word, scope 147 // user: %27
  %27 = index_raw_pointer %18 : $Builtin.RawPointer, %26 : $Builtin.Word, scope 147 // users: %48, %28
  %28 = builtin "cmp_eq_RawPointer"(%18 : $Builtin.RawPointer, %27 : $Builtin.RawPointer) : $Builtin.Int1, scope 147 // user: %29
  cond_br %28, bb3, bb4, scope 147                // id: %29

bb3:                                              // Preds: bb2
  br bb15, scope 147                              // id: %30

bb4:                                              // Preds: bb2
  %31 = struct_extract %2 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 147 // user: %34
  %32 = metatype $@thick UInt8.Type, scope 147    // user: %33
  %33 = builtin "strideof_nonzero"<UInt8>(%32 : $@thick UInt8.Type) : $Builtin.Word, scope 147 // user: %51
  br bb5(%31 : $Builtin.RawPointer, %18 : $Builtin.RawPointer), scope 147 // id: %34

// %35                                            // users: %51, %45
// %36                                            // users: %47, %37
bb5(%35 : $Builtin.RawPointer, %36 : $Builtin.RawPointer): // Preds: bb7 bb4
  %37 = pointer_to_address %36 : $Builtin.RawPointer to [strict] $*UInt16, scope 147 // user: %38
  %38 = struct_element_addr %37 : $*UInt16, #UInt16._value, scope 147 // user: %39
  %39 = load %38 : $*Builtin.Int16, scope 147     // user: %40
  %40 = builtin "u_to_u_checked_trunc_Int16_Int8"(%39 : $Builtin.Int16) : $(Builtin.Int8, Builtin.Int1), scope 147 // users: %42, %41
  %41 = tuple_extract %40 : $(Builtin.Int8, Builtin.Int1), 0, scope 147 // user: %44
  %42 = tuple_extract %40 : $(Builtin.Int8, Builtin.Int1), 1, scope 147 // user: %43
  cond_fail %42 : $Builtin.Int1, scope 147        // id: %43
  %44 = struct $UInt8 (%41 : $Builtin.Int8), scope 147 // user: %46
  %45 = pointer_to_address %35 : $Builtin.RawPointer to [strict] $*UInt8, scope 147 // user: %46
  store %44 to %45 : $*UInt8, scope 147           // id: %46
  %47 = index_raw_pointer %36 : $Builtin.RawPointer, %20 : $Builtin.Word, scope 147 // users: %52, %48
  %48 = builtin "cmp_eq_RawPointer"(%47 : $Builtin.RawPointer, %27 : $Builtin.RawPointer) : $Builtin.Int1, scope 147 // user: %49
  cond_br %48, bb6, bb7, scope 147                // id: %49

bb6:                                              // Preds: bb5
  br bb15, scope 147                              // id: %50

bb7:                                              // Preds: bb5
  %51 = index_raw_pointer %35 : $Builtin.RawPointer, %33 : $Builtin.Word, scope 147 // user: %52
  br bb5(%51 : $Builtin.RawPointer, %47 : $Builtin.RawPointer), scope 147 // id: %52

bb8:                                              // Preds: bb1
  %53 = struct_extract %0 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 147 // users: %69, %63, %62
  %54 = metatype $@thick UInt8.Type, scope 147    // user: %55
  %55 = builtin "strideof_nonzero"<UInt8>(%54 : $@thick UInt8.Type) : $Builtin.Word, scope 147 // users: %79, %56
  %56 = builtin "zextOrBitCast_Word_Int64"(%55 : $Builtin.Word) : $Builtin.Int64, scope 147 // user: %59
  %57 = struct_extract %4 : $Int, #Int._value, scope 147 // user: %59
  %58 = integer_literal $Builtin.Int1, 0, scope 147 // user: %59
  %59 = builtin "smul_with_overflow_Int64"(%57 : $Builtin.Int64, %56 : $Builtin.Int64, %58 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 147 // user: %60
  %60 = tuple_extract %59 : $(Builtin.Int64, Builtin.Int1), 0, scope 147 // user: %61
  %61 = builtin "truncOrBitCast_Int64_Word"(%60 : $Builtin.Int64) : $Builtin.Word, scope 147 // user: %62
  %62 = index_raw_pointer %53 : $Builtin.RawPointer, %61 : $Builtin.Word, scope 147 // users: %80, %63
  %63 = builtin "cmp_eq_RawPointer"(%53 : $Builtin.RawPointer, %62 : $Builtin.RawPointer) : $Builtin.Int1, scope 147 // user: %64
  cond_br %63, bb9, bb10, scope 147               // id: %64

bb9:                                              // Preds: bb8
  br bb15, scope 147                              // id: %65

bb10:                                             // Preds: bb8
  %66 = struct_extract %2 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 147 // user: %69
  %67 = metatype $@thick UInt16.Type, scope 147   // user: %68
  %68 = builtin "strideof_nonzero"<UInt16>(%67 : $@thick UInt16.Type) : $Builtin.Word, scope 147 // user: %83
  br bb11(%66 : $Builtin.RawPointer, %53 : $Builtin.RawPointer), scope 147 // id: %69

// %70                                            // users: %83, %77
// %71                                            // users: %79, %72
bb11(%70 : $Builtin.RawPointer, %71 : $Builtin.RawPointer): // Preds: bb13 bb10
  %72 = pointer_to_address %71 : $Builtin.RawPointer to [strict] $*UInt8, scope 147 // user: %73
  %73 = struct_element_addr %72 : $*UInt8, #UInt8._value, scope 147 // user: %74
  %74 = load %73 : $*Builtin.Int8, scope 147      // user: %75
  %75 = builtin "zext_Int8_Int16"(%74 : $Builtin.Int8) : $Builtin.Int16, scope 147 // user: %76
  %76 = struct $UInt16 (%75 : $Builtin.Int16), scope 147 // user: %78
  %77 = pointer_to_address %70 : $Builtin.RawPointer to [strict] $*UInt16, scope 147 // user: %78
  store %76 to %77 : $*UInt16, scope 147          // id: %78
  %79 = index_raw_pointer %71 : $Builtin.RawPointer, %55 : $Builtin.Word, scope 147 // users: %84, %80
  %80 = builtin "cmp_eq_RawPointer"(%79 : $Builtin.RawPointer, %62 : $Builtin.RawPointer) : $Builtin.Int1, scope 147 // user: %81
  cond_br %80, bb12, bb13, scope 147              // id: %81

bb12:                                             // Preds: bb11
  br bb15, scope 147                              // id: %82

bb13:                                             // Preds: bb11
  %83 = index_raw_pointer %70 : $Builtin.RawPointer, %68 : $Builtin.Word, scope 147 // user: %84
  br bb11(%83 : $Builtin.RawPointer, %79 : $Builtin.RawPointer), scope 147 // id: %84

bb14:                                             // Preds: bb0
  %85 = integer_literal $Builtin.Int64, 1, scope 147 // user: %86
  %86 = builtin "ssub_with_overflow_Int64"(%10 : $Builtin.Int64, %85 : $Builtin.Int64, %13 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 147 // users: %88, %87
  %87 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 0, scope 147 // users: %100, %91
  %88 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 1, scope 147 // user: %89
  cond_fail %88 : $Builtin.Int1, scope 147        // id: %89
  %90 = integer_literal $Builtin.Int32, 0, scope 147 // user: %113
  %91 = builtin "s_to_u_checked_conversion_Int64"(%87 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 147 // users: %93, %92
  %92 = tuple_extract %91 : $(Builtin.Int64, Builtin.Int1), 0, scope 147 // user: %96
  %93 = tuple_extract %91 : $(Builtin.Int64, Builtin.Int1), 1, scope 147 // user: %94
  cond_fail %93 : $Builtin.Int1, scope 147        // id: %94
  %95 = integer_literal $Builtin.Int64, 64, scope 147 // user: %96
  %96 = builtin "cmp_ult_Int64"(%92 : $Builtin.Int64, %95 : $Builtin.Int64) : $Builtin.Int1, scope 147 // user: %97
  %97 = builtin "xor_Int1"(%96 : $Builtin.Int1, %13 : $Builtin.Int1) : $Builtin.Int1, scope 147 // user: %98
  cond_fail %97 : $Builtin.Int1, scope 147        // id: %98
  %99 = struct_extract %4 : $Int, #Int._value, scope 147 // user: %100
  %100 = builtin "shl_Int64"(%99 : $Builtin.Int64, %87 : $Builtin.Int64) : $Builtin.Int64, scope 147 // user: %101
  %101 = builtin "s_to_u_checked_conversion_Int64"(%100 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 147 // users: %103, %102
  %102 = tuple_extract %101 : $(Builtin.Int64, Builtin.Int1), 0, scope 147 // users: %113, %111
  %103 = tuple_extract %101 : $(Builtin.Int64, Builtin.Int1), 1, scope 147 // user: %104
  cond_fail %103 : $Builtin.Int1, scope 147       // id: %104
  debug_value %2 : $UnsafeMutableRawPointer, scope 147 // id: %105
  debug_value %0 : $UnsafeMutableRawPointer, scope 147 // id: %106
  %107 = struct_extract %2 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 147 // users: %113, %108
  debug_value %107 : $Builtin.RawPointer, scope 147 // id: %108
  %109 = struct_extract %0 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue, scope 147 // users: %113, %110
  debug_value %109 : $Builtin.RawPointer, scope 147 // id: %110
  debug_value %102 : $Builtin.Int64, scope 147    // id: %111
  %112 = integer_literal $Builtin.Int1, 0, scope 147 // user: %113
  %113 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%107 : $Builtin.RawPointer, %109 : $Builtin.RawPointer, %102 : $Builtin.Int64, %90 : $Builtin.Int32, %112 : $Builtin.Int1) : $(), scope 147
  br bb15, scope 147                              // id: %114

bb15:                                             // Preds: bb12 bb9 bb6 bb3 bb14
  %115 = tuple (), scope 147                      // user: %116
  return %115 : $(), scope 147                    // id: %116
}


// specialized _cocoaStringReadAll(AnyObject, UnsafeMutablePointer<UInt16>) -> ()
sil [fragile] [noinline] [_semantics "stdlib_binary_only"] @_TTSfq4g_n___TFs19_cocoaStringReadAllFTPs9AnyObject_GSpVs6UInt16__T_ : $@convention(thin) (@guaranteed AnyObject, UnsafeMutablePointer<UInt16>) -> ()

sil_scope 148 {  parent @_TTSgq5GSRVs6UInt16_GSRS__s13IndexableBases___TFVs16IndexingIterator4nextfT_GSqwx8_Element_ : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt16>>) -> Optional<UInt16> }
sil_scope 149 {  parent @_TTSfq4n_s___TTSgq5Vs6UInt16___TFSRg9subscriptFSix : $@convention(thin) (Int, Optional<UnsafePointer<UInt16>>, Optional<UnsafePointer<UInt16>>) -> UInt16 }
sil_scope 150 {  parent 148 }
sil_scope 151 {  parent 149 inlined_at 150 }

// specialized IndexingIterator.next() -> A._Element?
sil shared_external [fragile] @_TTSgq5GSRVs6UInt16_GSRS__s13IndexableBases___TFVs16IndexingIterator4nextfT_GSqwx8_Element_ : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt16>>) -> Optional<UInt16> {
// %0                                             // users: %5, %2, %1
bb0(%0 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>):
  debug_value_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, scope 148 // id: %1
  %2 = struct_element_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, #IndexingIterator._position, scope 148 // users: %61, %53, %3
  %3 = struct_element_addr %2 : $*Int, #Int._value, scope 148 // user: %4
  %4 = load %3 : $*Builtin.Int64, scope 148       // users: %48, %56, %42, %12
  %5 = struct_element_addr %0 : $*IndexingIterator<UnsafeBufferPointer<UInt16>>, #IndexingIterator._elements, scope 148 // users: %8, %6
  %6 = struct_element_addr %5 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._position, scope 148 // user: %7
  %7 = load %6 : $*Optional<UnsafePointer<UInt16>>, scope 148 // users: %45, %10
  %8 = struct_element_addr %5 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._end, scope 148 // user: %9
  %9 = load %8 : $*Optional<UnsafePointer<UInt16>>, scope 148 // users: %20, %19
  switch_enum %7 : $Optional<UnsafePointer<UInt16>>, case #Optional.some!enumelt.1: bb2, case #Optional.none!enumelt: bb1, scope 148 // id: %10

bb1:                                              // Preds: bb0
  %11 = integer_literal $Builtin.Int64, 0, scope 148 // user: %12
  %12 = builtin "cmp_eq_Int64"(%4 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1, scope 148 // user: %14
  %13 = integer_literal $Builtin.Int1, -1, scope 148 // user: %14
  %14 = builtin "xor_Int1"(%12 : $Builtin.Int1, %13 : $Builtin.Int1) : $Builtin.Int1, scope 148 // user: %15
  cond_fail %14 : $Builtin.Int1, scope 148        // id: %15
  br bb9, scope 148                               // id: %16

// %17                                            // users: %23, %18
bb2(%17 : $UnsafePointer<UInt16>):                // Preds: bb0
  debug_value %17 : $UnsafePointer<UInt16>, scope 148 // id: %18
  switch_enum %9 : $Optional<UnsafePointer<UInt16>>, case #Optional.none!enumelt: bb11, case #Optional.some!enumelt.1: bb3, scope 148 // id: %19

bb3:                                              // Preds: bb2
  %20 = unchecked_enum_data %9 : $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, scope 148 // user: %21
  %21 = struct_extract %20 : $UnsafePointer<UInt16>, #UnsafePointer._rawValue, scope 148 // user: %22
  %22 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word, scope 148 // user: %25
  %23 = struct_extract %17 : $UnsafePointer<UInt16>, #UnsafePointer._rawValue, scope 148 // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word, scope 148 // user: %25
  %25 = builtin "sub_Word"(%22 : $Builtin.Word, %24 : $Builtin.Word) : $Builtin.Word, scope 148 // user: %26
  %26 = builtin "zextOrBitCast_Word_Int64"(%25 : $Builtin.Word) : $Builtin.Int64, scope 148 // users: %41, %34
  %27 = metatype $@thick UInt16.Type, scope 148   // user: %28
  %28 = builtin "strideof_nonzero"<UInt16>(%27 : $@thick UInt16.Type) : $Builtin.Word, scope 148 // user: %29
  %29 = builtin "zextOrBitCast_Word_Int64"(%28 : $Builtin.Word) : $Builtin.Int64, scope 148 // users: %41, %38, %31
  %30 = integer_literal $Builtin.Int64, 0, scope 148 // user: %31
  %31 = builtin "cmp_eq_Int64"(%29 : $Builtin.Int64, %30 : $Builtin.Int64) : $Builtin.Int1, scope 148 // user: %32
  cond_fail %31 : $Builtin.Int1, scope 148        // id: %32
  %33 = integer_literal $Builtin.Int64, -9223372036854775808, scope 148 // user: %34
  %34 = builtin "cmp_eq_Int64"(%26 : $Builtin.Int64, %33 : $Builtin.Int64) : $Builtin.Int1, scope 148 // user: %35
  cond_br %34, bb5, bb4, scope 148                // id: %35

bb4:                                              // Preds: bb3
  br bb6, scope 148                               // id: %36

bb5:                                              // Preds: bb3
  %37 = integer_literal $Builtin.Int64, -1, scope 148 // user: %38
  %38 = builtin "cmp_eq_Int64"(%29 : $Builtin.Int64, %37 : $Builtin.Int64) : $Builtin.Int1, scope 148 // user: %39
  cond_fail %38 : $Builtin.Int1, scope 148        // id: %39
  br bb6, scope 148                               // id: %40

bb6:                                              // Preds: bb4 bb5
  %41 = builtin "sdiv_Int64"(%26 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int64, scope 148 // user: %42
  %42 = builtin "cmp_eq_Int64"(%4 : $Builtin.Int64, %41 : $Builtin.Int64) : $Builtin.Int1, scope 148 // user: %43
  cond_br %42, bb7, bb8, scope 148                // id: %43

bb7:                                              // Preds: bb6
  br bb9, scope 148                               // id: %44

bb8:                                              // Preds: bb6
  %45 = unchecked_enum_data %7 : $Optional<UnsafePointer<UInt16>>, #Optional.some!enumelt.1, scope 151 // user: %46
  %46 = struct_extract %45 : $UnsafePointer<UInt16>, #UnsafePointer._rawValue, scope 151 // user: %47
  %47 = pointer_to_address %46 : $Builtin.RawPointer to [strict] $*UInt16, scope 151 // user: %49
  %48 = builtin "truncOrBitCast_Int64_Word"(%4 : $Builtin.Int64) : $Builtin.Word, scope 151 // user: %49
  %49 = index_addr %47 : $*UInt16, %48 : $Builtin.Word, scope 151 // user: %50
  %50 = struct_element_addr %49 : $*UInt16, #UInt16._value, scope 151 // user: %51
  %51 = load %50 : $*Builtin.Int16, scope 151     // user: %52
  %52 = struct $UInt16 (%51 : $Builtin.Int16), scope 151 // user: %62
  debug_value_addr %2 : $*Int, scope 148          // id: %53
  %54 = integer_literal $Builtin.Int64, 1, scope 148 // user: %56
  %55 = integer_literal $Builtin.Int1, -1, scope 148 // user: %56
  %56 = builtin "sadd_with_overflow_Int64"(%4 : $Builtin.Int64, %54 : $Builtin.Int64, %55 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 148 // users: %58, %57
  %57 = tuple_extract %56 : $(Builtin.Int64, Builtin.Int1), 0, scope 148 // user: %60
  %58 = tuple_extract %56 : $(Builtin.Int64, Builtin.Int1), 1, scope 148 // user: %59
  cond_fail %58 : $Builtin.Int1, scope 148        // id: %59
  %60 = struct $Int (%57 : $Builtin.Int64), scope 148 // user: %61
  store %60 to %2 : $*Int, scope 148              // id: %61
  %62 = enum $Optional<UInt16>, #Optional.some!enumelt.1, %52 : $UInt16, scope 148 // user: %63
  br bb10(%62 : $Optional<UInt16>), scope 148     // id: %63

bb9:                                              // Preds: bb7 bb1
  %64 = enum $Optional<UInt16>, #Optional.none!enumelt, scope 148 // user: %65
  br bb10(%64 : $Optional<UInt16>), scope 148     // id: %65

// %66                                            // user: %67
bb10(%66 : $Optional<UInt16>):                    // Preds: bb9 bb8
  return %66 : $Optional<UInt16>, scope 148       // id: %67

bb11:                                             // Preds: bb2
  %68 = integer_literal $Builtin.Int1, -1, scope 148 // user: %69
  cond_fail %68 : $Builtin.Int1, scope 148        // id: %69
  unreachable, scope 148                          // id: %70
}

sil_scope 152 {  parent @_TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferg6_valueGSpx_ : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> UnsafeMutablePointer<_StringBufferIVars> }

// specialized _HeapBuffer._value.getter
sil shared_external [fragile] @_TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferg6_valueGSpx_ : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> UnsafeMutablePointer<_StringBufferIVars> {
// %0                                             // users: %27, %26, %25, %1
bb0(%0 : $_HeapBuffer<_StringBufferIVars, UInt16>):
  debug_value %0 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 152 // id: %1
  %2 = metatype $@thick HeapObject.Type, scope 152 // user: %3
  %3 = builtin "sizeof"<HeapObject>(%2 : $@thick HeapObject.Type) : $Builtin.Word, scope 152 // user: %4
  %4 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64, scope 152 // user: %9
  %5 = metatype $@thick _StringBufferIVars.Type, scope 152 // user: %6
  %6 = builtin "alignof"<_StringBufferIVars>(%5 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 152 // user: %7
  %7 = builtin "zextOrBitCast_Word_Int64"(%6 : $Builtin.Word) : $Builtin.Int64, scope 152 // users: %17, %9
  %8 = integer_literal $Builtin.Int1, -1, scope 152 // users: %36, %9
  %9 = builtin "uadd_with_overflow_Int64"(%4 : $Builtin.Int64, %7 : $Builtin.Int64, %8 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 152 // users: %11, %10
  %10 = tuple_extract %9 : $(Builtin.Int64, Builtin.Int1), 0, scope 152 // user: %15
  %11 = tuple_extract %9 : $(Builtin.Int64, Builtin.Int1), 1, scope 152 // user: %12
  cond_fail %11 : $Builtin.Int1, scope 152        // id: %12
  %13 = integer_literal $Builtin.Int64, 1, scope 152 // users: %17, %15
  %14 = integer_literal $Builtin.Int1, 0, scope 152 // users: %17, %15
  %15 = builtin "usub_with_overflow_Int64"(%10 : $Builtin.Int64, %13 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 152 // user: %16
  %16 = tuple_extract %15 : $(Builtin.Int64, Builtin.Int1), 0, scope 152 // user: %21
  %17 = builtin "usub_with_overflow_Int64"(%7 : $Builtin.Int64, %13 : $Builtin.Int64, %14 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 152 // user: %18
  %18 = tuple_extract %17 : $(Builtin.Int64, Builtin.Int1), 0, scope 152 // user: %20
  %19 = integer_literal $Builtin.Int64, -1, scope 152 // user: %20
  %20 = builtin "xor_Int64"(%18 : $Builtin.Int64, %19 : $Builtin.Int64) : $Builtin.Int64, scope 152 // user: %21
  %21 = builtin "and_Int64"(%16 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int64, scope 152 // user: %22
  %22 = builtin "u_to_s_checked_conversion_Int64"(%21 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 152 // users: %29, %23
  %23 = tuple_extract %22 : $(Builtin.Int64, Builtin.Int1), 1, scope 152 // user: %24
  cond_fail %23 : $Builtin.Int1, scope 152        // id: %24
  debug_value %0 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 152 // id: %25
  debug_value %0 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 152 // id: %26
  %27 = struct_extract %0 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 152 // users: %30, %28
  switch_enum %27 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb2, case #Optional.some!enumelt.1: bb1, scope 152 // id: %28

bb1:                                              // Preds: bb0
  %29 = tuple_extract %22 : $(Builtin.Int64, Builtin.Int1), 0, scope 152 // user: %32
  %30 = unchecked_enum_data %27 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 152 // user: %31
  %31 = ref_to_raw_pointer %30 : $Builtin.NativeObject to $Builtin.RawPointer, scope 152 // user: %33
  %32 = builtin "truncOrBitCast_Int64_Word"(%29 : $Builtin.Int64) : $Builtin.Word, scope 152 // user: %33
  %33 = index_raw_pointer %31 : $Builtin.RawPointer, %32 : $Builtin.Word, scope 152 // user: %34
  %34 = struct $UnsafeMutablePointer<_StringBufferIVars> (%33 : $Builtin.RawPointer), scope 152 // user: %35
  return %34 : $UnsafeMutablePointer<_StringBufferIVars>, scope 152 // id: %35

bb2:                                              // Preds: bb0
  cond_fail %8 : $Builtin.Int1, scope 152         // id: %36
  unreachable, scope 152                          // id: %37
}

sil_scope 153 {  parent @_TFVs13_StringBufferg8capacitySi : $@convention(method) (@guaranteed _StringBuffer) -> Int }
sil_scope 154 {  parent 153 }
sil_scope 155 {  parent 98 inlined_at 154 }

// _StringBuffer.capacity.getter
sil public_external [fragile] @_TFVs13_StringBufferg8capacitySi : $@convention(method) (@guaranteed _StringBuffer) -> Int {
// %0                                             // users: %43, %2, %1
bb0(%0 : $_StringBuffer):
  debug_value %0 : $_StringBuffer, scope 153      // id: %1
  %2 = struct_extract %0 : $_StringBuffer, #_StringBuffer._storage, scope 153 // users: %30, %29, %28, %4, %3
  debug_value %2 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 155 // id: %3
  debug_value %2 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 155 // id: %4
  %5 = metatype $@thick HeapObject.Type, scope 155 // user: %6
  %6 = builtin "sizeof"<HeapObject>(%5 : $@thick HeapObject.Type) : $Builtin.Word, scope 155 // user: %7
  %7 = builtin "zextOrBitCast_Word_Int64"(%6 : $Builtin.Word) : $Builtin.Int64, scope 155 // user: %12
  %8 = metatype $@thick _StringBufferIVars.Type, scope 155 // user: %9
  %9 = builtin "alignof"<_StringBufferIVars>(%8 : $@thick _StringBufferIVars.Type) : $Builtin.Word, scope 155 // user: %10
  %10 = builtin "zextOrBitCast_Word_Int64"(%9 : $Builtin.Word) : $Builtin.Int64, scope 155 // users: %20, %12
  %11 = integer_literal $Builtin.Int1, -1, scope 155 // users: %47, %32, %12
  %12 = builtin "uadd_with_overflow_Int64"(%7 : $Builtin.Int64, %10 : $Builtin.Int64, %11 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 155 // users: %14, %13
  %13 = tuple_extract %12 : $(Builtin.Int64, Builtin.Int1), 0, scope 155 // user: %18
  %14 = tuple_extract %12 : $(Builtin.Int64, Builtin.Int1), 1, scope 155 // user: %15
  cond_fail %14 : $Builtin.Int1, scope 155        // id: %15
  %16 = integer_literal $Builtin.Int64, 1, scope 155 // users: %44, %20, %18
  %17 = integer_literal $Builtin.Int1, 0, scope 155 // users: %20, %18
  %18 = builtin "usub_with_overflow_Int64"(%13 : $Builtin.Int64, %16 : $Builtin.Int64, %17 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 155 // user: %19
  %19 = tuple_extract %18 : $(Builtin.Int64, Builtin.Int1), 0, scope 155 // user: %24
  %20 = builtin "usub_with_overflow_Int64"(%10 : $Builtin.Int64, %16 : $Builtin.Int64, %17 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 155 // user: %21
  %21 = tuple_extract %20 : $(Builtin.Int64, Builtin.Int1), 0, scope 155 // user: %23
  %22 = integer_literal $Builtin.Int64, -1, scope 155 // user: %23
  %23 = builtin "xor_Int64"(%21 : $Builtin.Int64, %22 : $Builtin.Int64) : $Builtin.Int64, scope 155 // user: %24
  %24 = builtin "and_Int64"(%19 : $Builtin.Int64, %23 : $Builtin.Int64) : $Builtin.Int64, scope 155 // user: %25
  %25 = builtin "u_to_s_checked_conversion_Int64"(%24 : $Builtin.Int64) : $(Builtin.Int64, Builtin.Int1), scope 155 // users: %34, %26
  %26 = tuple_extract %25 : $(Builtin.Int64, Builtin.Int1), 1, scope 155 // user: %27
  cond_fail %26 : $Builtin.Int1, scope 155        // id: %27
  debug_value %2 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 155 // id: %28
  debug_value %2 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 155 // id: %29
  %30 = struct_extract %2 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 155 // users: %31, %35
  switch_enum %30 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb1, case #Optional.some!enumelt.1: bb2, scope 155 // id: %31

bb1:                                              // Preds: bb0
  cond_fail %11 : $Builtin.Int1, scope 155        // id: %32
  unreachable, scope 155                          // id: %33

bb2:                                              // Preds: bb0
  %34 = tuple_extract %25 : $(Builtin.Int64, Builtin.Int1), 0, scope 155 // user: %37
  %35 = unchecked_enum_data %30 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 155 // user: %36
  %36 = ref_to_raw_pointer %35 : $Builtin.NativeObject to $Builtin.RawPointer, scope 155 // user: %38
  %37 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word, scope 155 // user: %38
  %38 = index_raw_pointer %36 : $Builtin.RawPointer, %37 : $Builtin.Word, scope 155 // user: %39
  %39 = pointer_to_address %38 : $Builtin.RawPointer to [strict] $*_StringBufferIVars, scope 153 // user: %40
  %40 = struct_element_addr %39 : $*_StringBufferIVars, #_StringBufferIVars.capacityAndElementShift, scope 153 // user: %41
  %41 = struct_element_addr %40 : $*Int, #Int._value, scope 153 // user: %42
  %42 = load %41 : $*Builtin.Int64, scope 153     // users: %50, %44
  debug_value %0 : $_StringBuffer, scope 153      // id: %43
  %44 = builtin "and_Int64"(%42 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int64, scope 153 // users: %51, %46
  %45 = integer_literal $Builtin.Int64, 64, scope 153 // user: %46
  %46 = builtin "cmp_ult_Int64"(%44 : $Builtin.Int64, %45 : $Builtin.Int64) : $Builtin.Int1, scope 153 // user: %47
  %47 = builtin "xor_Int1"(%46 : $Builtin.Int1, %11 : $Builtin.Int1) : $Builtin.Int1, scope 153 // user: %48
  cond_fail %47 : $Builtin.Int1, scope 153        // id: %48
  %49 = integer_literal $Builtin.Int64, -2, scope 153 // user: %50
  %50 = builtin "and_Int64"(%42 : $Builtin.Int64, %49 : $Builtin.Int64) : $Builtin.Int64, scope 153 // user: %51
  %51 = builtin "ashr_Int64"(%50 : $Builtin.Int64, %44 : $Builtin.Int64) : $Builtin.Int64, scope 153 // user: %52
  %52 = struct $Int (%51 : $Builtin.Int64), scope 153 // user: %53
  return %52 : $Int, scope 153                    // id: %53
}

sil_scope 156 {  parent @_TTSf4n_g_n___TTSg5P__SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> () }
sil_scope 157 {  parent @_TTSfq4n_n_d___TTSgq5Vs5UInt8___TFSRCfT5startGSqGSPx__5countSi_GSRx_ : $@convention(thin) (Optional<UnsafePointer<UInt8>>, Int) -> UnsafeBufferPointer<UInt8> }
sil_scope 158 {  parent 156 }
sil_scope 159 {  parent 157 inlined_at 158 }
sil_scope 160 {  parent 156 }
sil_scope 161 {  parent 52 inlined_at 160 }

// specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
sil shared @_TTSf4n_g_n___TTSg5P__SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> () {
// %0                                             // users: %10, %7, %3
// %1                                             // user: %4
// %2                                             // users: %10, %8, %6
bb0(%0 : $@thick Any.Type, %1 : $@box String, %2 : $Bool):
  debug_value %0 : $@thick Any.Type, scope 156    // id: %3
  %4 = project_box %1 : $@box String, scope 156   // users: %191, %181, %179, %177, %5
  debug_value_addr %4 : $*String, scope 156       // id: %5
  debug_value %2 : $Bool, scope 156               // id: %6
  debug_value %0 : $@thick Any.Type, scope 156    // id: %7
  debug_value %2 : $Bool, scope 156               // id: %8
  // function_ref swift_getTypeName
  %9 = function_ref @swift_getTypeName : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 156 // user: %10
  %10 = apply %9(%0, %2) : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 156 // users: %12, %11
  %11 = tuple_extract %10 : $(UnsafePointer<UInt8>, Int), 0, scope 156 // users: %26, %24, %15, %13
  %12 = tuple_extract %10 : $(UnsafePointer<UInt8>, Int), 1, scope 156 // users: %25, %19, %17, %14
  debug_value %11 : $UnsafePointer<UInt8>, scope 156 // id: %13
  debug_value %12 : $Int, scope 156               // id: %14
  %15 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %11 : $UnsafePointer<UInt8>, scope 156 // users: %37, %16
  debug_value %15 : $Optional<UnsafePointer<UInt8>>, scope 159 // id: %16
  debug_value %12 : $Int, scope 159               // id: %17
  %18 = integer_literal $Builtin.Int64, 0, scope 159 // users: %187, %54, %109, %41, %20
  %19 = struct_extract %12 : $Int, #Int._value, scope 159 // users: %31, %20
  %20 = builtin "cmp_sge_Int64"(%19 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1, scope 159 // user: %22
  %21 = integer_literal $Builtin.Int1, -1, scope 159 // users: %116, %54, %301, %274, %256, %213, %134, %78, %22
  %22 = builtin "xor_Int1"(%20 : $Builtin.Int1, %21 : $Builtin.Int1) : $Builtin.Int1, scope 159 // user: %23
  cond_fail %22 : $Builtin.Int1, scope 159        // id: %23
  debug_value %11 : $UnsafePointer<UInt8>, scope 159 // id: %24
  debug_value %12 : $Int, scope 159               // id: %25
  %26 = struct_extract %11 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 159 // user: %34
  %27 = metatype $@thick UInt8.Type, scope 159    // user: %28
  %28 = builtin "strideof_nonzero"<UInt8>(%27 : $@thick UInt8.Type) : $Builtin.Word, scope 159 // users: %166, %29
  %29 = builtin "zextOrBitCast_Word_Int64"(%28 : $Builtin.Word) : $Builtin.Int64, scope 159 // user: %31
  %30 = integer_literal $Builtin.Int1, 0, scope 159 // users: %296, %83, %72, %31
  %31 = builtin "smul_with_overflow_Int64"(%19 : $Builtin.Int64, %29 : $Builtin.Int64, %30 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 159 // user: %32
  %32 = tuple_extract %31 : $(Builtin.Int64, Builtin.Int1), 0, scope 159 // user: %33
  %33 = builtin "truncOrBitCast_Int64_Word"(%32 : $Builtin.Int64) : $Builtin.Word, scope 159 // user: %34
  %34 = index_raw_pointer %26 : $Builtin.RawPointer, %33 : $Builtin.Word, scope 159 // user: %35
  %35 = struct $UnsafePointer<UInt8> (%34 : $Builtin.RawPointer), scope 159 // user: %36
  %36 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %35 : $UnsafePointer<UInt8>, scope 159 // user: %37
  %37 = struct $UnsafeBufferPointer<UInt8> (%15 : $Optional<UnsafePointer<UInt8>>, %36 : $Optional<UnsafePointer<UInt8>>), scope 159 // users: %42, %40, %39, %38
  debug_value %37 : $UnsafeBufferPointer<UInt8>, scope 156 // id: %38
  debug_value %37 : $UnsafeBufferPointer<UInt8>, scope 156 // id: %39
  debug_value %37 : $UnsafeBufferPointer<UInt8>, scope 156 // id: %40
  %41 = struct $Int (%18 : $Builtin.Int64), scope 156 // users: %293, %113, %42
  %42 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%37 : $UnsafeBufferPointer<UInt8>, %41 : $Int), scope 156 // users: %224, %221, %145, %142, %46, %43
  debug_value %42 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %43
  %44 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // users: %101, %57, %46
  %45 = alloc_stack $UTF8, scope 156              // users: %100, %57, %52
  store %42 to %44 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %46
  %47 = integer_literal $Builtin.Int32, 0, scope 156 // user: %48
  %48 = struct $UInt32 (%47 : $Builtin.Int32), scope 156 // user: %51
  %49 = integer_literal $Builtin.Int8, 0, scope 156 // user: %50
  %50 = struct $UInt8 (%49 : $Builtin.Int8), scope 156 // user: %51
  %51 = struct $UTF8 (%48 : $UInt32, %50 : $UInt8), scope 156 // users: %225, %146, %52
  store %51 to %45 : $*UTF8, scope 156            // id: %52
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %53 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 156 // users: %228, %149, %57
  br bb1(%18 : $Builtin.Int64, %21 : $Builtin.Int1), scope 156 // id: %54

// %55                                            // users: %94, %78
// %56                                            // users: %93, %92, %95
bb1(%55 : $Builtin.Int64, %56 : $Builtin.Int1):   // Preds: bb6 bb0
  %57 = apply %53(%44, %45) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 156 // user: %58
  switch_enum %57 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb2, case #UnicodeDecodingResult.emptyInput!enumelt: bb12, case #UnicodeDecodingResult.error!enumelt: bb47, scope 156 // id: %58

// %59                                            // users: %88, %87, %68, %67, %62, %61, %60
bb2(%59 : $UnicodeScalar):                        // Preds: bb1
  debug_value %59 : $UnicodeScalar, scope 156     // id: %60
  debug_value %59 : $UnicodeScalar, scope 156     // id: %61
  %62 = struct_extract %59 : $UnicodeScalar, #UnicodeScalar._value, scope 156 // user: %64
  %63 = integer_literal $Builtin.Int32, 127, scope 156 // user: %65
  %64 = struct_extract %62 : $UInt32, #UInt32._value, scope 156 // users: %90, %70, %65
  %65 = builtin "cmp_ugt_Int32"(%64 : $Builtin.Int32, %63 : $Builtin.Int32) : $Builtin.Int1, scope 156 // user: %66
  cond_br %65, bb3, bb9, scope 156                // id: %66

bb3:                                              // Preds: bb2
  debug_value %59 : $UnicodeScalar, scope 156     // id: %67
  debug_value %59 : $UnicodeScalar, scope 156     // id: %68
  %69 = integer_literal $Builtin.Int32, 65535, scope 156 // user: %70
  %70 = builtin "cmp_ule_Int32"(%64 : $Builtin.Int32, %69 : $Builtin.Int32) : $Builtin.Int1, scope 156 // user: %71
  cond_br %70, bb4, bb7, scope 156                // id: %71

bb4:                                              // Preds: bb3
  br bb5(%30 : $Builtin.Int1), scope 156          // id: %72

// %73                                            // user: %75
bb5(%73 : $Builtin.Int1):                         // Preds: bb10 bb4
  %74 = integer_literal $Builtin.Int64, 1, scope 156 // user: %75
  br bb6(%74 : $Builtin.Int64, %73 : $Builtin.Int1), scope 156 // id: %75

// %76                                            // user: %78
// %77                                            // user: %82
bb6(%76 : $Builtin.Int64, %77 : $Builtin.Int1):   // Preds: bb8 bb5
  %78 = builtin "sadd_with_overflow_Int64"(%55 : $Builtin.Int64, %76 : $Builtin.Int64, %21 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 156 // users: %80, %79
  %79 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 0, scope 156 // user: %82
  %80 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 1, scope 156 // user: %81
  cond_fail %80 : $Builtin.Int1, scope 156        // id: %81
  br bb1(%79 : $Builtin.Int64, %77 : $Builtin.Int1), scope 156 // id: %82

bb7:                                              // Preds: bb3
  br bb8(%30 : $Builtin.Int1), scope 156          // id: %83

// %84                                            // user: %86
bb8(%84 : $Builtin.Int1):                         // Preds: bb11 bb7
  %85 = integer_literal $Builtin.Int64, 2, scope 156 // user: %86
  br bb6(%85 : $Builtin.Int64, %84 : $Builtin.Int1), scope 156 // id: %86

bb9:                                              // Preds: bb2
  debug_value %59 : $UnicodeScalar, scope 156     // id: %87
  debug_value %59 : $UnicodeScalar, scope 156     // id: %88
  %89 = integer_literal $Builtin.Int32, 65535, scope 156 // user: %90
  %90 = builtin "cmp_ule_Int32"(%64 : $Builtin.Int32, %89 : $Builtin.Int32) : $Builtin.Int1, scope 156 // user: %91
  cond_br %90, bb10, bb11, scope 156              // id: %91

bb10:                                             // Preds: bb9
  br bb5(%56 : $Builtin.Int1), scope 156          // id: %92

bb11:                                             // Preds: bb9
  br bb8(%56 : $Builtin.Int1), scope 156          // id: %93

bb12:                                             // Preds: bb1
  %94 = struct $Int (%55 : $Builtin.Int64), scope 156 // user: %96
  %95 = struct $Bool (%56 : $Builtin.Int1), scope 156 // user: %96
  %96 = tuple $(count: Int, isASCII: Bool) (%94, %95), scope 156 // user: %97
  %97 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %96 : $(count: Int, isASCII: Bool), scope 156 // user: %98
  br bb13(%97 : $Optional<(count: Int, isASCII: Bool)>), scope 156 // id: %98

// %99                                            // user: %102
bb13(%99 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb47 bb12
  dealloc_stack %45 : $*UTF8, scope 156           // id: %100
  dealloc_stack %44 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %101
  switch_enum %99 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb14, case #Optional.none!enumelt: bb46, scope 156 // id: %102

// %103                                           // users: %106, %104
bb14(%103 : $(count: Int, isASCII: Bool)):        // Preds: bb13
  %104 = tuple_extract %103 : $(count: Int, isASCII: Bool), 0, scope 156 // users: %300, %299, %122, %108, %105
  debug_value %104 : $Int, scope 156              // id: %105
  %106 = tuple_extract %103 : $(count: Int, isASCII: Bool), 1, scope 156 // users: %297, %111, %107
  debug_value %106 : $Bool, scope 156             // id: %107
  %108 = struct_extract %104 : $Int, #Int._value, scope 156 // user: %109
  %109 = builtin "cmp_sge_Int64"(%18 : $Builtin.Int64, %108 : $Builtin.Int64) : $Builtin.Int1, scope 156 // user: %110
  cond_br %109, bb15, bb43, scope 156             // id: %110

bb15:                                             // Preds: bb14
  %111 = struct_extract %106 : $Bool, #Bool._value, scope 156 // user: %112
  cond_br %111, bb16, bb41, scope 156             // id: %112

bb16:                                             // Preds: bb15
  br bb17(%41 : $Int), scope 156                  // id: %113

// %114                                           // user: %116
bb17(%114 : $Int):                                // Preds: bb44 bb16
  %115 = integer_literal $Builtin.Int64, 1, scope 156 // user: %116
  br bb18(%115 : $Builtin.Int64, %114 : $Int, %21 : $Builtin.Int1), scope 156 // id: %116

// %117                                           // user: %120
// %118                                           // user: %122
// %119                                           // user: %124
bb18(%117 : $Builtin.Int64, %118 : $Int, %119 : $Builtin.Int1): // Preds: bb42 bb17
  %120 = struct $Int (%117 : $Builtin.Int64), scope 156 // user: %122
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %121 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 156 // user: %122
  %122 = apply %121(%118, %104, %120) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 156 // users: %205, %175, %173, %172, %126, %125, %123
  debug_value %122 : $_StringBuffer, scope 156    // id: %123
  cond_br %119, bb19, bb31, scope 156             // id: %124

bb19:                                             // Preds: bb18
  debug_value %122 : $_StringBuffer, scope 156    // id: %125
  %126 = struct_extract %122 : $_StringBuffer, #_StringBuffer._storage, scope 156 // users: %132, %131, %128, %127
  %127 = struct_extract %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 156 // users: %133, %136
  debug_value %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 156 // id: %128
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %129 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 156 // user: %130
  %130 = apply %129() : $@convention(thin) () -> Int, scope 156 // users: %139, %138
  debug_value %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 156 // id: %131
  debug_value %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 156 // id: %132
  switch_enum %127 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb20, case #Optional.some!enumelt.1: bb21, scope 156 // id: %133

bb20:                                             // Preds: bb19
  cond_fail %21 : $Builtin.Int1, scope 156        // id: %134
  unreachable, scope 156                          // id: %135

bb21:                                             // Preds: bb19
  %136 = unchecked_enum_data %127 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 156 // user: %137
  %137 = ref_to_raw_pointer %136 : $Builtin.NativeObject to $Builtin.RawPointer, scope 156 // user: %141
  %138 = struct_extract %130 : $Int, #Int._value, scope 156 // user: %140
  debug_value %130 : $Int, scope 156              // id: %139
  %140 = builtin "truncOrBitCast_Int64_Word"(%138 : $Builtin.Int64) : $Builtin.Word, scope 156 // user: %141
  %141 = index_raw_pointer %137 : $Builtin.RawPointer, %140 : $Builtin.Word, scope 156 // user: %147
  debug_value %42 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %142
  %143 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // users: %170, %149, %145
  %144 = alloc_stack $UTF8, scope 156             // users: %169, %149, %146
  store %42 to %143 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %145
  store %51 to %144 : $*UTF8, scope 156           // id: %146
  br bb22(%141 : $Builtin.RawPointer), scope 156  // id: %147

// %148                                           // users: %166, %164
bb22(%148 : $Builtin.RawPointer):                 // Preds: bb23 bb21
  %149 = apply %53(%143, %144) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 156 // user: %150
  switch_enum %149 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb23, case #UnicodeDecodingResult.emptyInput!enumelt: bb24, case #UnicodeDecodingResult.error!enumelt: bb30, scope 156 // id: %150

// %151                                           // users: %156, %155, %154, %153, %152
bb23(%151 : $UnicodeScalar):                      // Preds: bb22
  debug_value %151 : $UnicodeScalar, scope 156    // id: %152
  debug_value %151 : $UnicodeScalar, scope 156    // id: %153
  debug_value %151 : $UnicodeScalar, scope 156    // id: %154
  debug_value %151 : $UnicodeScalar, scope 156    // id: %155
  %156 = struct_extract %151 : $UnicodeScalar, #UnicodeScalar._value, scope 156 // users: %158, %157
  debug_value %156 : $UInt32, scope 156           // id: %157
  %158 = struct_extract %156 : $UInt32, #UInt32._value, scope 156 // user: %159
  %159 = builtin "u_to_u_checked_trunc_Int32_Int8"(%158 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 156 // users: %161, %160
  %160 = tuple_extract %159 : $(Builtin.Int8, Builtin.Int1), 0, scope 156 // user: %163
  %161 = tuple_extract %159 : $(Builtin.Int8, Builtin.Int1), 1, scope 156 // user: %162
  cond_fail %161 : $Builtin.Int1, scope 156       // id: %162
  %163 = struct $UInt8 (%160 : $Builtin.Int8), scope 156 // user: %165
  %164 = pointer_to_address %148 : $Builtin.RawPointer to [strict] $*UInt8, scope 156 // user: %165
  store %163 to %164 : $*UInt8, scope 156         // id: %165
  %166 = index_raw_pointer %148 : $Builtin.RawPointer, %28 : $Builtin.Word, scope 156 // user: %167
  br bb22(%166 : $Builtin.RawPointer), scope 156  // id: %167

bb24:                                             // Preds: bb22
  br bb25, scope 156                              // id: %168

bb25:                                             // Preds: bb30 bb24
  dealloc_stack %144 : $*UTF8, scope 156          // id: %169
  dealloc_stack %143 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %170
  br bb26, scope 156                              // id: %171

bb26:                                             // Preds: bb39 bb25
  debug_value %122 : $_StringBuffer, scope 156    // id: %172
  debug_value %122 : $_StringBuffer, scope 156    // id: %173
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %174 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 156 // user: %175
  %175 = apply %174(%122) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 156 // users: %200, %195, %196, %197, %176
  %176 = struct $String (%175 : $_StringCore), scope 156 // users: %191, %180, %178
  debug_value_addr %4 : $*String, scope 161       // id: %177
  debug_value %176 : $String, scope 161           // id: %178
  debug_value_addr %4 : $*String, scope 161       // id: %179
  debug_value %176 : $String, scope 161           // id: %180
  %181 = struct_element_addr %4 : $*String, #String._core, scope 161 // users: %199, %189, %182
  %182 = struct_element_addr %181 : $*_StringCore, #_StringCore._countAndFlags, scope 161 // user: %183
  %183 = struct_element_addr %182 : $*UInt, #UInt._value, scope 161 // user: %184
  %184 = load %183 : $*Builtin.Int64, scope 161   // user: %186
  %185 = integer_literal $Builtin.Int64, 4611686018427387903, scope 161 // user: %186
  %186 = builtin "and_Int64"(%184 : $Builtin.Int64, %185 : $Builtin.Int64) : $Builtin.Int64, scope 161 // user: %187
  %187 = builtin "cmp_eq_Int64"(%186 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1, scope 161 // user: %188
  cond_br %187, bb27, bb28, scope 161             // id: %188

bb27:                                             // Preds: bb26
  %189 = struct_element_addr %181 : $*_StringCore, #_StringCore._owner, scope 161 // user: %190
  %190 = load %189 : $*Optional<AnyObject>, scope 161 // user: %192
  store %176 to %4 : $*String, scope 161          // id: %191
  release_value %190 : $Optional<AnyObject>, scope 156 // id: %192
  br bb29, scope 161                              // id: %193

bb28:                                             // Preds: bb26
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %194 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 161 // user: %199
  %195 = struct_extract %175 : $_StringCore, #_StringCore._owner, scope 161 // user: %199
  %196 = struct_extract %175 : $_StringCore, #_StringCore._countAndFlags, scope 161 // user: %198
  %197 = struct_extract %175 : $_StringCore, #_StringCore._baseAddress, scope 161 // user: %199
  %198 = struct_extract %196 : $UInt, #UInt._value, scope 161 // user: %199
  %199 = apply %194(%197, %198, %195, %181) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 161
  release_value %175 : $_StringCore, scope 156    // id: %200
  br bb29, scope 161                              // id: %201

bb29:                                             // Preds: bb28 bb27
  %202 = tuple (), scope 156                      // user: %203
  return %202 : $(), scope 156                    // id: %203

bb30:                                             // Preds: bb22
  br bb25, scope 156                              // id: %204

bb31:                                             // Preds: bb18
  %205 = struct_extract %122 : $_StringBuffer, #_StringBuffer._storage, scope 156 // users: %211, %210, %207, %206
  %206 = struct_extract %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 156 // users: %212, %215
  debug_value %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 156 // id: %207
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %208 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 156 // user: %209
  %209 = apply %208() : $@convention(thin) () -> Int, scope 156 // users: %218, %217
  debug_value %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 156 // id: %210
  debug_value %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 156 // id: %211
  switch_enum %206 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb32, case #Optional.some!enumelt.1: bb33, scope 156 // id: %212

bb32:                                             // Preds: bb31
  cond_fail %21 : $Builtin.Int1, scope 156        // id: %213
  unreachable, scope 156                          // id: %214

bb33:                                             // Preds: bb31
  %215 = unchecked_enum_data %206 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 156 // user: %216
  %216 = ref_to_raw_pointer %215 : $Builtin.NativeObject to $Builtin.RawPointer, scope 156 // user: %220
  %217 = struct_extract %209 : $Int, #Int._value, scope 156 // user: %219
  debug_value %209 : $Int, scope 156              // id: %218
  %219 = builtin "truncOrBitCast_Int64_Word"(%217 : $Builtin.Int64) : $Builtin.Word, scope 156 // user: %220
  %220 = index_raw_pointer %216 : $Builtin.RawPointer, %219 : $Builtin.Word, scope 156 // user: %226
  debug_value %42 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %221
  %222 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // users: %290, %228, %224
  %223 = alloc_stack $UTF8, scope 156             // users: %289, %228, %225
  store %42 to %222 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %224
  store %51 to %223 : $*UTF8, scope 156           // id: %225
  br bb34(%220 : $Builtin.RawPointer), scope 156  // id: %226

// %227                                           // users: %270, %266, %251, %247
bb34(%227 : $Builtin.RawPointer):                 // Preds: bb37 bb36 bb33
  %228 = apply %53(%222, %223) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 156 // user: %229
  switch_enum %228 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb35, case #UnicodeDecodingResult.emptyInput!enumelt: bb38, case #UnicodeDecodingResult.error!enumelt: bb40, scope 156 // id: %229

// %230                                           // users: %235, %234, %233, %232, %231
bb35(%230 : $UnicodeScalar):                      // Preds: bb34
  debug_value %230 : $UnicodeScalar, scope 156    // id: %231
  debug_value %230 : $UnicodeScalar, scope 156    // id: %232
  debug_value %230 : $UnicodeScalar, scope 156    // id: %233
  debug_value %230 : $UnicodeScalar, scope 156    // id: %234
  %235 = struct_extract %230 : $UnicodeScalar, #UnicodeScalar._value, scope 156 // users: %238, %236
  debug_value %235 : $UInt32, scope 156           // id: %236
  %237 = integer_literal $Builtin.Int32, 65535, scope 156 // user: %239
  %238 = struct_extract %235 : $UInt32, #UInt32._value, scope 156 // users: %273, %255, %241, %239
  %239 = builtin "cmp_ule_Int32"(%238 : $Builtin.Int32, %237 : $Builtin.Int32) : $Builtin.Int1, scope 156 // user: %240
  cond_br %239, bb36, bb37, scope 156             // id: %240

bb36:                                             // Preds: bb35
  %241 = builtin "u_to_u_checked_trunc_Int32_Int16"(%238 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 156 // users: %243, %242
  %242 = tuple_extract %241 : $(Builtin.Int16, Builtin.Int1), 0, scope 156 // user: %245
  %243 = tuple_extract %241 : $(Builtin.Int16, Builtin.Int1), 1, scope 156 // user: %244
  cond_fail %243 : $Builtin.Int1, scope 156       // id: %244
  %245 = struct $UInt16 (%242 : $Builtin.Int16), scope 156 // users: %248, %246
  debug_value %245 : $UInt16, scope 156           // id: %246
  %247 = pointer_to_address %227 : $Builtin.RawPointer to [strict] $*UInt16, scope 156 // user: %248
  store %245 to %247 : $*UInt16, scope 156        // id: %248
  %249 = metatype $@thick UInt16.Type, scope 156  // user: %250
  %250 = builtin "strideof_nonzero"<UInt16>(%249 : $@thick UInt16.Type) : $Builtin.Word, scope 156 // user: %251
  %251 = index_raw_pointer %227 : $Builtin.RawPointer, %250 : $Builtin.Word, scope 156 // user: %252
  br bb34(%251 : $Builtin.RawPointer), scope 156  // id: %252

bb37:                                             // Preds: bb35
  %253 = integer_literal $Builtin.Int32, 55232, scope 156 // user: %256
  %254 = integer_literal $Builtin.Int32, 10, scope 156 // user: %255
  %255 = builtin "lshr_Int32"(%238 : $Builtin.Int32, %254 : $Builtin.Int32) : $Builtin.Int32, scope 156 // user: %256
  %256 = builtin "uadd_with_overflow_Int32"(%253 : $Builtin.Int32, %255 : $Builtin.Int32, %21 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 156 // users: %258, %257
  %257 = tuple_extract %256 : $(Builtin.Int32, Builtin.Int1), 0, scope 156 // user: %260
  %258 = tuple_extract %256 : $(Builtin.Int32, Builtin.Int1), 1, scope 156 // user: %259
  cond_fail %258 : $Builtin.Int1, scope 156       // id: %259
  %260 = builtin "u_to_u_checked_trunc_Int32_Int16"(%257 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 156 // users: %262, %261
  %261 = tuple_extract %260 : $(Builtin.Int16, Builtin.Int1), 0, scope 156 // user: %264
  %262 = tuple_extract %260 : $(Builtin.Int16, Builtin.Int1), 1, scope 156 // user: %263
  cond_fail %262 : $Builtin.Int1, scope 156       // id: %263
  %264 = struct $UInt16 (%261 : $Builtin.Int16), scope 156 // users: %267, %265
  debug_value %264 : $UInt16, scope 156           // id: %265
  %266 = pointer_to_address %227 : $Builtin.RawPointer to [strict] $*UInt16, scope 156 // user: %267
  store %264 to %266 : $*UInt16, scope 156        // id: %267
  %268 = metatype $@thick UInt16.Type, scope 156  // user: %269
  %269 = builtin "strideof_nonzero"<UInt16>(%268 : $@thick UInt16.Type) : $Builtin.Word, scope 156 // users: %286, %270
  %270 = index_raw_pointer %227 : $Builtin.RawPointer, %269 : $Builtin.Word, scope 156 // users: %286, %284
  %271 = integer_literal $Builtin.Int32, 56320, scope 156 // user: %274
  %272 = integer_literal $Builtin.Int32, 1023, scope 156 // user: %273
  %273 = builtin "and_Int32"(%238 : $Builtin.Int32, %272 : $Builtin.Int32) : $Builtin.Int32, scope 156 // user: %274
  %274 = builtin "uadd_with_overflow_Int32"(%271 : $Builtin.Int32, %273 : $Builtin.Int32, %21 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 156 // users: %276, %275
  %275 = tuple_extract %274 : $(Builtin.Int32, Builtin.Int1), 0, scope 156 // user: %278
  %276 = tuple_extract %274 : $(Builtin.Int32, Builtin.Int1), 1, scope 156 // user: %277
  cond_fail %276 : $Builtin.Int1, scope 156       // id: %277
  %278 = builtin "u_to_u_checked_trunc_Int32_Int16"(%275 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 156 // users: %280, %279
  %279 = tuple_extract %278 : $(Builtin.Int16, Builtin.Int1), 0, scope 156 // user: %282
  %280 = tuple_extract %278 : $(Builtin.Int16, Builtin.Int1), 1, scope 156 // user: %281
  cond_fail %280 : $Builtin.Int1, scope 156       // id: %281
  %282 = struct $UInt16 (%279 : $Builtin.Int16), scope 156 // users: %285, %283
  debug_value %282 : $UInt16, scope 156           // id: %283
  %284 = pointer_to_address %270 : $Builtin.RawPointer to [strict] $*UInt16, scope 156 // user: %285
  store %282 to %284 : $*UInt16, scope 156        // id: %285
  %286 = index_raw_pointer %270 : $Builtin.RawPointer, %269 : $Builtin.Word, scope 156 // user: %287
  br bb34(%286 : $Builtin.RawPointer), scope 156  // id: %287

bb38:                                             // Preds: bb34
  br bb39, scope 156                              // id: %288

bb39:                                             // Preds: bb40 bb38
  dealloc_stack %223 : $*UTF8, scope 156          // id: %289
  dealloc_stack %222 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 156 // id: %290
  br bb26, scope 156                              // id: %291

bb40:                                             // Preds: bb34
  br bb39, scope 156                              // id: %292

bb41:                                             // Preds: bb15
  br bb42(%41 : $Int), scope 156                  // id: %293

// %294                                           // user: %296
bb42(%294 : $Int):                                // Preds: bb45 bb41
  %295 = integer_literal $Builtin.Int64, 2, scope 156 // user: %296
  br bb18(%295 : $Builtin.Int64, %294 : $Int, %30 : $Builtin.Int1), scope 156 // id: %296

bb43:                                             // Preds: bb14
  %297 = struct_extract %106 : $Bool, #Bool._value, scope 156 // user: %298
  cond_br %297, bb44, bb45, scope 156             // id: %298

bb44:                                             // Preds: bb43
  br bb17(%104 : $Int), scope 156                 // id: %299

bb45:                                             // Preds: bb43
  br bb42(%104 : $Int), scope 156                 // id: %300

bb46:                                             // Preds: bb13
  cond_fail %21 : $Builtin.Int1, scope 156        // id: %301
  unreachable, scope 156                          // id: %302

bb47:                                             // Preds: bb1
  %303 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 156 // user: %304
  br bb13(%303 : $Optional<(count: Int, isASCII: Bool)>), scope 156 // id: %304
}

sil_scope 162 {  parent @_TTSf4n_gs_n_n___TTSg5P__SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@in Any, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> () }
sil_scope 163 {  parent 162 }
sil_scope 164 {  parent 52 inlined_at 163 }
sil_scope 165 {  parent 162 }
sil_scope 166 {  parent 52 inlined_at 165 }
sil_scope 167 {  parent 162 }
sil_scope 168 {  parent 52 inlined_at 167 }
sil_scope 169 {  parent @_TTSg5P__SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @owned @box String, Bool) -> () }
sil_scope 170 {  parent 162 }
sil_scope 171 {  parent 169 inlined_at 170 }
sil_scope 172 {  parent 162 }
sil_scope 173 {  parent 52 inlined_at 172 }
sil_scope 174 {  parent 162 }
sil_scope 175 {  parent 52 inlined_at 174 }
sil_scope 176 {  parent 162 }
sil_scope 177 {  parent 52 inlined_at 176 }
sil_scope 178 {  parent 162 }
sil_scope 179 {  parent 52 inlined_at 178 }
sil_scope 180 {  parent 162 }
sil_scope 181 {  parent 52 inlined_at 180 }
sil_scope 182 {  parent 162 }
sil_scope 183 {  parent 157 inlined_at 182 }
sil_scope 184 {  parent 162 }
sil_scope 185 {  parent 169 inlined_at 184 }
sil_scope 186 {  parent 162 }
sil_scope 187 {  parent 52 inlined_at 186 }
sil_scope 188 {  parent 162 }
sil_scope 189 {  parent 52 inlined_at 188 }
sil_scope 190 {  parent 162 }
sil_scope 191 {  parent 52 inlined_at 190 }
sil_scope 192 {  parent 162 }
sil_scope 193 {  parent 52 inlined_at 192 }
sil_scope 194 {  parent 162 }
sil_scope 195 {  parent 169 inlined_at 194 }
sil_scope 196 {  parent 162 }
sil_scope 197 {  parent 157 inlined_at 196 }
sil_scope 198 {  parent 162 }
sil_scope 199 {  parent 52 inlined_at 198 }
sil_scope 200 {  parent 162 }
sil_scope 201 {  parent 169 inlined_at 200 }
sil_scope 202 {  parent 162 }
sil_scope 203 {  parent 157 inlined_at 202 }
sil_scope 204 {  parent 162 }
sil_scope 205 {  parent 52 inlined_at 204 }
sil_scope 206 {  parent 162 }
sil_scope 207 {  parent 157 inlined_at 206 }
sil_scope 208 {  parent 162 }
sil_scope 209 {  parent 52 inlined_at 208 }

// specialized specialized _adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()
sil shared @_TTSf4n_gs_n_n___TTSg5P__SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@in Any, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> () {
// %0                                             // users: %920, %16, %405, %192, %1221, %1219, %438, %6
// %1                                             // users: %1236, %1550, %926, %914, %627, %226
// %2                                             // users: %1870, %1852, %30, %123, %1850, %273, %1868, %697, %1886, %1885, %687, %262, %112, %1847, %1845, %19
// %3                                             // user: %12
// %4                                             // users: %51, %56, %9
// %5                                             // users: %627, %914, %1230, %226, %622, %11
bb0(%0 : $*Any, %1 : $@thick Any.Type, %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, %3 : $Optional<Mirror.DisplayStyle>, %4 : $*String, %5 : $Bool):
  debug_value_addr %0 : $*Any, scope 162          // id: %6
  %7 = alloc_box $String, scope 162               // users: %1231, %915, %628, %227, %57, %225, %626, %913, %1229, %627, %914, %1230, %226, %8
  %8 = project_box %7 : $@box String, scope 162   // users: %674, %664, %662, %660, %654, %644, %642, %640, %395, %387, %385, %360, %352, %350, %325, %317, %315, %1730, %1720, %1718, %1716, %1434, %1424, %1422, %1420, %186, %178, %176, %1106, %1096, %1094, %1092, %800, %792, %790, %770, %759, %757, %755, %427, %419, %417, %214, %206, %204, %256, %245, %243, %241, %104, %93, %91, %89, %780, %739, %367, %161, %74, %45, %50, %10
  %9 = load %4 : $*String, scope 162              // users: %29, %1846, %105, %109, %224, %437, %925, %1220, %10
  store %9 to %8 : $*String, scope 162            // id: %10
  debug_value %5 : $Bool, scope 162               // id: %11
  switch_enum %3 : $Optional<Mirror.DisplayStyle>, case #Optional.some!enumelt.1: bb1, case #Optional.none!enumelt: bb171, scope 162 // id: %12

// %13                                            // users: %15, %14
bb1(%13 : $Mirror.DisplayStyle):                  // Preds: bb0
  debug_value %13 : $Mirror.DisplayStyle, scope 162 // id: %14
  switch_enum %13 : $Mirror.DisplayStyle, case #Mirror.DisplayStyle.optional!enumelt: bb2, case #Mirror.DisplayStyle.tuple!enumelt: bb7, case #Mirror.DisplayStyle.struct!enumelt: bb26, case #Mirror.DisplayStyle.enum!enumelt: bb54, default bb124, scope 162 // id: %15

bb2:                                              // Preds: bb1
  destroy_addr %0 : $*Any, scope 162              // id: %16
  %17 = alloc_stack $(label: Optional<String>, value: Any), scope 162 // users: %61, %48, %47, %34, %33
  %18 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 162 // users: %1847, %1848, %60, %41, %35
  checked_cast_br [exact] %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb3, bb269, scope 162 // id: %19

bb3(%20 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb2
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %21 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 162 // user: %31
  %22 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 162 // user: %24
  %23 = integer_literal $Builtin.Word, 183, scope 162 // user: %26
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word, scope 162 // user: %26
  %25 = integer_literal $Builtin.Int8, 2, scope 162 // user: %26
  %26 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %25 : $Builtin.Int8), scope 162 // user: %31
  %27 = integer_literal $Builtin.Int64, 304, scope 162 // user: %28
  %28 = struct $UInt (%27 : $Builtin.Int64), scope 162 // user: %31
  retain_value %9 : $String, scope 162            // id: %29
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %30
  %31 = apply %21(%26, %28) : $@convention(thin) (StaticString, UInt) -> Never, scope 162
  unreachable, scope 162                          // id: %32

bb4:                                              // Preds: bb269
  %33 = tuple_element_addr %17 : $*(label: Optional<String>, value: Any), 0, scope 162 // user: %39
  %34 = tuple_element_addr %17 : $*(label: Optional<String>, value: Any), 1, scope 162 // users: %43, %40
  %35 = unchecked_take_enum_data_addr %18 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 162 // users: %37, %36
  %36 = tuple_element_addr %35 : $*(label: Optional<String>, value: Any), 0, scope 162 // user: %38
  %37 = tuple_element_addr %35 : $*(label: Optional<String>, value: Any), 1, scope 162 // user: %40
  %38 = load %36 : $*Optional<String>, scope 162  // user: %39
  store %38 to %33 : $*Optional<String>, scope 162 // id: %39
  copy_addr [take] %37 to [initialization] %34 : $*Any, scope 162 // id: %40
  dealloc_stack %18 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %41
  %42 = alloc_stack $Any, scope 162               // users: %45, %46, %43
  copy_addr %34 to [initialization] %42 : $*Any, scope 162 // id: %43
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %44 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 162 // user: %45
  %45 = apply %44(%42, %8) : $@convention(thin) (@in Any, @inout String) -> (), scope 162
  dealloc_stack %42 : $*Any, scope 162            // id: %46
  destroy_addr %17 : $*(label: Optional<String>, value: Any), scope 162 // id: %47
  dealloc_stack %17 : $*(label: Optional<String>, value: Any), scope 162 // id: %48
  br bb5, scope 162                               // id: %49

bb5:                                              // Preds: bb24 bb52 bb152 bb202 bb248 bb247 bb201 bb172 bb151 bb103 bb95 bb51 bb23 bb6 bb4
  %50 = load %8 : $*String, scope 162             // users: %54, %56
  %51 = struct_element_addr %4 : $*String, #String._core, scope 162 // user: %52
  %52 = struct_element_addr %51 : $*_StringCore, #_StringCore._owner, scope 162 // user: %53
  %53 = load %52 : $*Optional<AnyObject>, scope 162 // user: %55
  retain_value %50 : $String, scope 162           // id: %54
  release_value %53 : $Optional<AnyObject>, scope 162 // id: %55
  store %50 to %4 : $*String, scope 162           // id: %56
  strong_release %7 : $@box String, scope 162     // id: %57
  %58 = tuple (), scope 162                       // user: %59
  return %58 : $(), scope 162                     // id: %59

bb6:                                              // Preds: bb269
  dealloc_stack %18 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %60
  dealloc_stack %17 : $*(label: Optional<String>, value: Any), scope 162 // id: %61
  %62 = string_literal utf8 "nil", scope 162      // users: %64, %63
  debug_value %62 : $Builtin.RawPointer, scope 162 // id: %63
  %64 = struct $UnsafeMutableRawPointer (%62 : $Builtin.RawPointer), scope 162 // user: %65
  %65 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %64 : $UnsafeMutableRawPointer, scope 162 // users: %72, %67
  %66 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 162 // users: %72, %68
  debug_value %65 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %67
  debug_value %66 : $Optional<AnyObject>, scope 162 // id: %68
  %69 = integer_literal $Builtin.Int64, 3, scope 162 // user: %71
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %70 = function_ref @_TTSg5SS_SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@owned String, @inout String) -> (), scope 162 // user: %74
  %71 = struct $UInt (%69 : $Builtin.Int64), scope 162 // user: %72
  %72 = struct $_StringCore (%65 : $Optional<UnsafeMutableRawPointer>, %71 : $UInt, %66 : $Optional<AnyObject>), scope 162 // user: %73
  %73 = struct $String (%72 : $_StringCore), scope 162 // user: %74
  %74 = apply %70(%73, %8) : $@convention(thin) (@owned String, @inout String) -> (), scope 162
  br bb5, scope 162                               // id: %75

bb7:                                              // Preds: bb1
  %76 = string_literal utf8 "(", scope 162        // users: %80, %78
  %77 = integer_literal $Builtin.Int1, -1, scope 162 // users: %1861, %197, %167, %150, %1865, %79
  debug_value %76 : $Builtin.RawPointer, scope 162 // id: %78
  debug_value %77 : $Builtin.Int1, scope 162      // id: %79
  %80 = struct $UnsafeMutableRawPointer (%76 : $Builtin.RawPointer), scope 162 // user: %81
  %81 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %80 : $UnsafeMutableRawPointer, scope 162 // users: %110, %87, %83
  %82 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 162 // users: %218, %110, %190, %202, %201, %174, %171, %87, %84
  debug_value %81 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %83
  debug_value %82 : $Optional<AnyObject>, scope 162 // id: %84
  %85 = integer_literal $Builtin.Int64, 1, scope 162 // users: %218, %110, %86
  %86 = struct $UInt (%85 : $Builtin.Int64), scope 162 // users: %202, %87
  %87 = struct $_StringCore (%81 : $Optional<UnsafeMutableRawPointer>, %86 : $UInt, %82 : $Optional<AnyObject>), scope 162 // user: %88
  %88 = struct $String (%87 : $_StringCore), scope 162 // users: %104, %92, %90
  debug_value_addr %8 : $*String, scope 164       // id: %89
  debug_value %88 : $String, scope 164            // id: %90
  debug_value_addr %8 : $*String, scope 164       // id: %91
  debug_value %88 : $String, scope 164            // id: %92
  %93 = struct_element_addr %8 : $*String, #String._core, scope 164 // users: %212, %218, %184, %190, %110, %102, %94
  %94 = struct_element_addr %93 : $*_StringCore, #_StringCore._countAndFlags, scope 164 // user: %95
  %95 = struct_element_addr %94 : $*UInt, #UInt._value, scope 164 // users: %208, %180, %96
  %96 = load %95 : $*Builtin.Int64, scope 164     // user: %98
  %97 = integer_literal $Builtin.Int64, 4611686018427387903, scope 164 // users: %209, %181, %98
  %98 = builtin "and_Int64"(%96 : $Builtin.Int64, %97 : $Builtin.Int64) : $Builtin.Int64, scope 164 // user: %100
  %99 = integer_literal $Builtin.Int64, 0, scope 164 // users: %210, %182, %100
  %100 = builtin "cmp_eq_Int64"(%98 : $Builtin.Int64, %99 : $Builtin.Int64) : $Builtin.Int1, scope 164 // user: %101
  cond_br %100, bb8, bb9, scope 164               // id: %101

bb8:                                              // Preds: bb7
  %102 = struct_element_addr %93 : $*_StringCore, #_StringCore._owner, scope 164 // user: %103
  %103 = load %102 : $*Optional<AnyObject>, scope 164 // user: %106
  store %88 to %8 : $*String, scope 164           // id: %104
  retain_value %9 : $String, scope 162            // id: %105
  release_value %103 : $Optional<AnyObject>, scope 162 // id: %106
  br bb10, scope 164                              // id: %107

bb9:                                              // Preds: bb7
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %108 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 164 // user: %110
  retain_value %9 : $String, scope 162            // id: %109
  %110 = apply %108(%81, %85, %82, %93) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 164
  br bb10, scope 164                              // id: %111

bb10:                                             // Preds: bb9 bb8
  %112 = upcast %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnySequenceBox<(label: Optional<String>, value: Any)>, scope 162 // users: %113, %1849, %1851
  checked_cast_br [exact] %112 : $_AnySequenceBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb11, bb270, scope 162 // id: %113

bb11(%114 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb10
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %115 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 162 // user: %124
  %116 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 162 // user: %118
  %117 = integer_literal $Builtin.Word, 183, scope 162 // user: %120
  %118 = builtin "ptrtoint_Word"(%116 : $Builtin.RawPointer) : $Builtin.Word, scope 162 // user: %120
  %119 = integer_literal $Builtin.Int8, 2, scope 162 // user: %120
  %120 = struct $StaticString (%118 : $Builtin.Word, %117 : $Builtin.Word, %119 : $Builtin.Int8), scope 162 // user: %124
  %121 = integer_literal $Builtin.Int64, 141, scope 162 // user: %122
  %122 = struct $UInt (%121 : $Builtin.Int64), scope 162 // user: %124
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %123
  %124 = apply %115(%120, %122) : $@convention(thin) (StaticString, UInt) -> Never, scope 162
  unreachable, scope 162                          // id: %125

// %126                                           // user: %158
bb12(%126 : $Builtin.Int1):                       // Preds: bb18 bb270
  %127 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 162 // users: %1863, %220, %148, %141, %1865
  checked_cast_br [exact] %1857 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)> to $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, bb13, bb271, scope 162 // id: %128

bb13(%129 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>): // Preds: bb12
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %130 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 162 // user: %139
  %131 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 162 // user: %133
  %132 = integer_literal $Builtin.Word, 183, scope 162 // user: %135
  %133 = builtin "ptrtoint_Word"(%131 : $Builtin.RawPointer) : $Builtin.Word, scope 162 // user: %135
  %134 = integer_literal $Builtin.Int8, 2, scope 162 // user: %135
  %135 = struct $StaticString (%133 : $Builtin.Word, %132 : $Builtin.Word, %134 : $Builtin.Int8), scope 162 // user: %139
  %136 = integer_literal $Builtin.Int64, 119, scope 162 // user: %137
  %137 = struct $UInt (%136 : $Builtin.Int64), scope 162 // user: %139
  retain_value %1851 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %138
  %139 = apply %130(%135, %137) : $@convention(thin) (StaticString, UInt) -> Never, scope 162
  unreachable, scope 162                          // id: %140

bb14:                                             // Preds: bb271
  %141 = unchecked_take_enum_data_addr %127 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 162 // users: %144, %142
  %142 = tuple_element_addr %141 : $*(label: Optional<String>, value: Any), 0, scope 162 // user: %143
  %143 = load %142 : $*Optional<String>, scope 162 // user: %145
  %144 = tuple_element_addr %141 : $*(label: Optional<String>, value: Any), 1, scope 162 // user: %146
  store %143 to %1855 : $*Optional<String>, scope 162 // id: %145
  copy_addr [take] %144 to [initialization] %1856 : $*Any, scope 162 // id: %146
  inject_enum_addr %1853 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 162 // id: %147
  dealloc_stack %127 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %148
  br bb15, scope 162                              // id: %149

bb15:                                             // Preds: bb25 bb14
  %150 = select_enum_addr %1853 : $*Optional<(Optional<String>, Any)>, case #Optional.some!enumelt.1: %77, case #Optional.none!enumelt: %1860 : $Builtin.Int1, scope 162 // user: %151
  cond_br %150, bb16, bb22, scope 162             // id: %151

bb16:                                             // Preds: bb15
  %152 = alloc_stack $Any, scope 162              // users: %161, %163, %157
  %153 = unchecked_take_enum_data_addr %1853 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 162 // users: %156, %154
  %154 = tuple_element_addr %153 : $*(Optional<String>, Any), 0, scope 162 // user: %155
  %155 = load %154 : $*Optional<String>, scope 162 // user: %162
  %156 = tuple_element_addr %153 : $*(Optional<String>, Any), 1, scope 162 // user: %157
  copy_addr [take] %156 to [initialization] %152 : $*Any, scope 162 // id: %157
  cond_br %126, bb17, bb19, scope 162             // id: %158

bb17:                                             // Preds: bb16
  br bb18, scope 162                              // id: %159

bb18:                                             // Preds: bb17 bb21 bb20
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %160 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 162 // user: %161
  %161 = apply %160(%152, %8) : $@convention(thin) (@in Any, @inout String) -> (), scope 162
  release_value %155 : $Optional<String>, scope 162 // id: %162
  dealloc_stack %152 : $*Any, scope 162           // id: %163
  br bb12(%1860 : $Builtin.Int1), scope 162       // id: %164

bb19:                                             // Preds: bb16
  %165 = string_literal utf8 ", ", scope 162      // users: %168, %166
  debug_value %165 : $Builtin.RawPointer, scope 162 // id: %166
  debug_value %77 : $Builtin.Int1, scope 162      // id: %167
  %168 = struct $UnsafeMutableRawPointer (%165 : $Builtin.RawPointer), scope 162 // user: %169
  %169 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %168 : $UnsafeMutableRawPointer, scope 162 // users: %190, %174, %170
  debug_value %169 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %170
  debug_value %82 : $Optional<AnyObject>, scope 162 // id: %171
  %172 = integer_literal $Builtin.Int64, 2, scope 162 // users: %190, %173
  %173 = struct $UInt (%172 : $Builtin.Int64), scope 162 // user: %174
  %174 = struct $_StringCore (%169 : $Optional<UnsafeMutableRawPointer>, %173 : $UInt, %82 : $Optional<AnyObject>), scope 162 // user: %175
  %175 = struct $String (%174 : $_StringCore), scope 162 // users: %186, %179, %177
  debug_value_addr %8 : $*String, scope 166       // id: %176
  debug_value %175 : $String, scope 166           // id: %177
  debug_value_addr %8 : $*String, scope 166       // id: %178
  debug_value %175 : $String, scope 166           // id: %179
  %180 = load %95 : $*Builtin.Int64, scope 166    // user: %181
  %181 = builtin "and_Int64"(%180 : $Builtin.Int64, %97 : $Builtin.Int64) : $Builtin.Int64, scope 166 // user: %182
  %182 = builtin "cmp_eq_Int64"(%181 : $Builtin.Int64, %99 : $Builtin.Int64) : $Builtin.Int1, scope 166 // user: %183
  cond_br %182, bb20, bb21, scope 166             // id: %183

bb20:                                             // Preds: bb19
  %184 = struct_element_addr %93 : $*_StringCore, #_StringCore._owner, scope 166 // user: %185
  %185 = load %184 : $*Optional<AnyObject>, scope 166 // user: %187
  store %175 to %8 : $*String, scope 166          // id: %186
  release_value %185 : $Optional<AnyObject>, scope 162 // id: %187
  br bb18, scope 162                              // id: %188

bb21:                                             // Preds: bb19
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %189 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 166 // user: %190
  %190 = apply %189(%169, %172, %82, %93) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 166
  br bb18, scope 166                              // id: %191

bb22:                                             // Preds: bb15
  destroy_addr %0 : $*Any, scope 162              // id: %192
  dealloc_stack %1853 : $*Optional<(Optional<String>, Any)>, scope 162 // id: %193
  release_value %1851 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %194
  %195 = string_literal utf8 ")", scope 162       // users: %198, %196
  debug_value %195 : $Builtin.RawPointer, scope 162 // id: %196
  debug_value %77 : $Builtin.Int1, scope 162      // id: %197
  %198 = struct $UnsafeMutableRawPointer (%195 : $Builtin.RawPointer), scope 162 // user: %199
  %199 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %198 : $UnsafeMutableRawPointer, scope 162 // users: %218, %202, %200
  debug_value %199 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %200
  debug_value %82 : $Optional<AnyObject>, scope 162 // id: %201
  %202 = struct $_StringCore (%199 : $Optional<UnsafeMutableRawPointer>, %86 : $UInt, %82 : $Optional<AnyObject>), scope 162 // user: %203
  %203 = struct $String (%202 : $_StringCore), scope 162 // users: %214, %207, %205
  debug_value_addr %8 : $*String, scope 168       // id: %204
  debug_value %203 : $String, scope 168           // id: %205
  debug_value_addr %8 : $*String, scope 168       // id: %206
  debug_value %203 : $String, scope 168           // id: %207
  %208 = load %95 : $*Builtin.Int64, scope 168    // user: %209
  %209 = builtin "and_Int64"(%208 : $Builtin.Int64, %97 : $Builtin.Int64) : $Builtin.Int64, scope 168 // user: %210
  %210 = builtin "cmp_eq_Int64"(%209 : $Builtin.Int64, %99 : $Builtin.Int64) : $Builtin.Int1, scope 168 // user: %211
  cond_br %210, bb23, bb24, scope 168             // id: %211

bb23:                                             // Preds: bb22
  %212 = struct_element_addr %93 : $*_StringCore, #_StringCore._owner, scope 168 // user: %213
  %213 = load %212 : $*Optional<AnyObject>, scope 168 // user: %215
  store %203 to %8 : $*String, scope 168          // id: %214
  release_value %213 : $Optional<AnyObject>, scope 162 // id: %215
  br bb5, scope 162                               // id: %216

bb24:                                             // Preds: bb22
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %217 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 168 // user: %218
  %218 = apply %217(%199, %85, %82, %93) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 168
  br bb5, scope 168                               // id: %219

bb25:                                             // Preds: bb271
  dealloc_stack %127 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %220
  inject_enum_addr %1853 : $*Optional<(Optional<String>, Any)>, #Optional.none!enumelt, scope 162 // id: %221
  br bb15, scope 162                              // id: %222

bb26:                                             // Preds: bb1
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %223 = function_ref @_TTSf4n_g_n___TTSg5P__SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 171 // user: %226
  retain_value %9 : $String, scope 162            // id: %224
  strong_retain %7 : $@box String, scope 162      // id: %225
  %226 = apply %223(%1, %7, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 171
  strong_release %7 : $@box String, scope 162     // id: %227
  %228 = string_literal utf8 "(", scope 162       // users: %232, %230
  %229 = integer_literal $Builtin.Int1, -1, scope 162 // users: %1879, %410, %376, %341, %300, %1883, %231
  debug_value %228 : $Builtin.RawPointer, scope 162 // id: %230
  debug_value %229 : $Builtin.Int1, scope 162     // id: %231
  %232 = struct $UnsafeMutableRawPointer (%228 : $Builtin.RawPointer), scope 162 // user: %233
  %233 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %232 : $UnsafeMutableRawPointer, scope 162 // users: %260, %239, %235
  %234 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 162 // users: %431, %364, %260, %401, %415, %414, %383, %380, %348, %345, %239, %236
  debug_value %233 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %235
  debug_value %234 : $Optional<AnyObject>, scope 162 // id: %236
  %237 = integer_literal $Builtin.Int64, 1, scope 162 // users: %431, %260, %238
  %238 = struct $UInt (%237 : $Builtin.Int64), scope 162 // users: %415, %239
  %239 = struct $_StringCore (%233 : $Optional<UnsafeMutableRawPointer>, %238 : $UInt, %234 : $Optional<AnyObject>), scope 162 // user: %240
  %240 = struct $String (%239 : $_StringCore), scope 162 // users: %256, %244, %242
  debug_value_addr %8 : $*String, scope 173       // id: %241
  debug_value %240 : $String, scope 173           // id: %242
  debug_value_addr %8 : $*String, scope 173       // id: %243
  debug_value %240 : $String, scope 173           // id: %244
  %245 = struct_element_addr %8 : $*String, #String._core, scope 173 // users: %425, %431, %393, %401, %358, %364, %323, %336, %260, %254, %246
  %246 = struct_element_addr %245 : $*_StringCore, #_StringCore._countAndFlags, scope 173 // user: %247
  %247 = struct_element_addr %246 : $*UInt, #UInt._value, scope 173 // users: %421, %389, %354, %319, %248
  %248 = load %247 : $*Builtin.Int64, scope 173   // user: %250
  %249 = integer_literal $Builtin.Int64, 4611686018427387903, scope 173 // users: %422, %390, %355, %320, %250
  %250 = builtin "and_Int64"(%248 : $Builtin.Int64, %249 : $Builtin.Int64) : $Builtin.Int64, scope 173 // user: %252
  %251 = integer_literal $Builtin.Int64, 0, scope 173 // users: %423, %391, %356, %321, %252
  %252 = builtin "cmp_eq_Int64"(%250 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int1, scope 173 // user: %253
  cond_br %252, bb27, bb28, scope 173             // id: %253

bb27:                                             // Preds: bb26
  %254 = struct_element_addr %245 : $*_StringCore, #_StringCore._owner, scope 173 // user: %255
  %255 = load %254 : $*Optional<AnyObject>, scope 173 // user: %257
  store %240 to %8 : $*String, scope 173          // id: %256
  release_value %255 : $Optional<AnyObject>, scope 162 // id: %257
  br bb29, scope 173                              // id: %258

bb28:                                             // Preds: bb26
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %259 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 173 // user: %260
  %260 = apply %259(%233, %237, %234, %245) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 173
  br bb29, scope 173                              // id: %261

bb29:                                             // Preds: bb28 bb27
  %262 = upcast %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnySequenceBox<(label: Optional<String>, value: Any)>, scope 162 // users: %263, %1867, %1869
  checked_cast_br [exact] %262 : $_AnySequenceBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb30, bb272, scope 162 // id: %263

bb30(%264 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb29
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %265 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 162 // user: %274
  %266 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 162 // user: %268
  %267 = integer_literal $Builtin.Word, 183, scope 162 // user: %270
  %268 = builtin "ptrtoint_Word"(%266 : $Builtin.RawPointer) : $Builtin.Word, scope 162 // user: %270
  %269 = integer_literal $Builtin.Int8, 2, scope 162 // user: %270
  %270 = struct $StaticString (%268 : $Builtin.Word, %267 : $Builtin.Word, %269 : $Builtin.Int8), scope 162 // user: %274
  %271 = integer_literal $Builtin.Int64, 141, scope 162 // user: %272
  %272 = struct $UInt (%271 : $Builtin.Int64), scope 162 // user: %274
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %273
  %274 = apply %265(%270, %272) : $@convention(thin) (StaticString, UInt) -> Never, scope 162
  unreachable, scope 162                          // id: %275

// %276                                           // users: %404, %312
bb31(%276 : $Builtin.Int1):                       // Preds: bb45 bb272
  %277 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 162 // users: %1881, %433, %298, %291, %1883
  checked_cast_br [exact] %1875 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)> to $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, bb32, bb273, scope 162 // id: %278

bb32(%279 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>): // Preds: bb31
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %280 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 162 // user: %289
  %281 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 162 // user: %283
  %282 = integer_literal $Builtin.Word, 183, scope 162 // user: %285
  %283 = builtin "ptrtoint_Word"(%281 : $Builtin.RawPointer) : $Builtin.Word, scope 162 // user: %285
  %284 = integer_literal $Builtin.Int8, 2, scope 162 // user: %285
  %285 = struct $StaticString (%283 : $Builtin.Word, %282 : $Builtin.Word, %284 : $Builtin.Int8), scope 162 // user: %289
  %286 = integer_literal $Builtin.Int64, 119, scope 162 // user: %287
  %287 = struct $UInt (%286 : $Builtin.Int64), scope 162 // user: %289
  retain_value %1869 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %288
  %289 = apply %280(%285, %287) : $@convention(thin) (StaticString, UInt) -> Never, scope 162
  unreachable, scope 162                          // id: %290

bb33:                                             // Preds: bb273
  %291 = unchecked_take_enum_data_addr %277 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 162 // users: %294, %292
  %292 = tuple_element_addr %291 : $*(label: Optional<String>, value: Any), 0, scope 162 // user: %293
  %293 = load %292 : $*Optional<String>, scope 162 // user: %295
  %294 = tuple_element_addr %291 : $*(label: Optional<String>, value: Any), 1, scope 162 // user: %296
  store %293 to %1873 : $*Optional<String>, scope 162 // id: %295
  copy_addr [take] %294 to [initialization] %1874 : $*Any, scope 162 // id: %296
  inject_enum_addr %1871 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 162 // id: %297
  dealloc_stack %277 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %298
  br bb34, scope 162                              // id: %299

bb34:                                             // Preds: bb53 bb33
  %300 = select_enum_addr %1871 : $*Optional<(Optional<String>, Any)>, case #Optional.some!enumelt.1: %229, case #Optional.none!enumelt: %1878 : $Builtin.Int1, scope 162 // user: %301
  cond_br %300, bb35, bb50, scope 162             // id: %301

bb35:                                             // Preds: bb34
  %302 = alloc_stack $Any, scope 162              // users: %367, %403, %371, %308
  %303 = unchecked_take_enum_data_addr %1871 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 162 // users: %306, %304
  %304 = tuple_element_addr %303 : $*(Optional<String>, Any), 0, scope 162 // user: %305
  %305 = load %304 : $*Optional<String>, scope 162 // users: %337, %368, %372, %326, %335, %313, %396, %400, %309, %307
  %306 = tuple_element_addr %303 : $*(Optional<String>, Any), 1, scope 162 // user: %308
  debug_value %305 : $Optional<String>, scope 162 // id: %307
  copy_addr [take] %306 to [initialization] %302 : $*Any, scope 162 // id: %308
  switch_enum %305 : $Optional<String>, case #Optional.some!enumelt.1: bb36, case #Optional.none!enumelt: bb49, scope 162 // id: %309

// %310                                           // users: %329, %325, %318, %316, %311
bb36(%310 : $String):                             // Preds: bb35
  debug_value %310 : $String, scope 162           // id: %311
  cond_br %276, bb37, bb46, scope 162             // id: %312

bb37:                                             // Preds: bb36
  retain_value %305 : $Optional<String>, scope 162 // id: %313
  br bb38, scope 162                              // id: %314

bb38:                                             // Preds: bb48 bb47 bb37
  debug_value_addr %8 : $*String, scope 175       // id: %315
  debug_value %310 : $String, scope 175           // id: %316
  debug_value_addr %8 : $*String, scope 175       // id: %317
  debug_value %310 : $String, scope 175           // id: %318
  %319 = load %247 : $*Builtin.Int64, scope 175   // user: %320
  %320 = builtin "and_Int64"(%319 : $Builtin.Int64, %249 : $Builtin.Int64) : $Builtin.Int64, scope 175 // user: %321
  %321 = builtin "cmp_eq_Int64"(%320 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int1, scope 175 // user: %322
  cond_br %321, bb39, bb40, scope 175             // id: %322

bb39:                                             // Preds: bb38
  %323 = struct_element_addr %245 : $*_StringCore, #_StringCore._owner, scope 175 // user: %324
  %324 = load %323 : $*Optional<AnyObject>, scope 175 // user: %327
  store %310 to %8 : $*String, scope 175          // id: %325
  retain_value %305 : $Optional<String>, scope 162 // id: %326
  release_value %324 : $Optional<AnyObject>, scope 162 // id: %327
  br bb41, scope 175                              // id: %328

bb40:                                             // Preds: bb38
  %329 = struct_extract %310 : $String, #String._core, scope 175 // users: %333, %332, %331
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %330 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 175 // user: %336
  %331 = struct_extract %329 : $_StringCore, #_StringCore._owner, scope 175 // user: %336
  %332 = struct_extract %329 : $_StringCore, #_StringCore._countAndFlags, scope 175 // user: %334
  %333 = struct_extract %329 : $_StringCore, #_StringCore._baseAddress, scope 175 // user: %336
  %334 = struct_extract %332 : $UInt, #UInt._value, scope 175 // user: %336
  retain_value %305 : $Optional<String>, scope 162 // id: %335
  %336 = apply %330(%333, %334, %331, %245) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 175
  release_value %305 : $Optional<String>, scope 162 // id: %337
  br bb41, scope 175                              // id: %338

bb41:                                             // Preds: bb40 bb39
  %339 = string_literal utf8 ": ", scope 162      // users: %342, %340
  debug_value %339 : $Builtin.RawPointer, scope 162 // id: %340
  debug_value %229 : $Builtin.Int1, scope 162     // id: %341
  %342 = struct $UnsafeMutableRawPointer (%339 : $Builtin.RawPointer), scope 162 // user: %343
  %343 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %342 : $UnsafeMutableRawPointer, scope 162 // users: %364, %348, %344
  debug_value %343 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %344
  debug_value %234 : $Optional<AnyObject>, scope 162 // id: %345
  %346 = integer_literal $Builtin.Int64, 2, scope 162 // users: %364, %347
  %347 = struct $UInt (%346 : $Builtin.Int64), scope 162 // user: %348
  %348 = struct $_StringCore (%343 : $Optional<UnsafeMutableRawPointer>, %347 : $UInt, %234 : $Optional<AnyObject>), scope 162 // user: %349
  %349 = struct $String (%348 : $_StringCore), scope 162 // users: %360, %353, %351
  debug_value_addr %8 : $*String, scope 177       // id: %350
  debug_value %349 : $String, scope 177           // id: %351
  debug_value_addr %8 : $*String, scope 177       // id: %352
  debug_value %349 : $String, scope 177           // id: %353
  %354 = load %247 : $*Builtin.Int64, scope 177   // user: %355
  %355 = builtin "and_Int64"(%354 : $Builtin.Int64, %249 : $Builtin.Int64) : $Builtin.Int64, scope 177 // user: %356
  %356 = builtin "cmp_eq_Int64"(%355 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int1, scope 177 // user: %357
  cond_br %356, bb42, bb43, scope 177             // id: %357

bb42:                                             // Preds: bb41
  %358 = struct_element_addr %245 : $*_StringCore, #_StringCore._owner, scope 177 // user: %359
  %359 = load %358 : $*Optional<AnyObject>, scope 177 // user: %361
  store %349 to %8 : $*String, scope 177          // id: %360
  release_value %359 : $Optional<AnyObject>, scope 162 // id: %361
  br bb44, scope 177                              // id: %362

bb43:                                             // Preds: bb41
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %363 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 177 // user: %364
  %364 = apply %363(%343, %346, %234, %245) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 177
  br bb44, scope 177                              // id: %365

bb44:                                             // Preds: bb43 bb42
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %366 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 162 // user: %367
  %367 = apply %366(%302, %8) : $@convention(thin) (@in Any, @inout String) -> (), scope 162
  release_value %305 : $Optional<String>, scope 162 // id: %368
  br bb45(%1878 : $Builtin.Int1), scope 162       // id: %369

// %370                                           // user: %373
bb45(%370 : $Builtin.Int1):                       // Preds: bb49 bb44
  dealloc_stack %302 : $*Any, scope 162           // id: %371
  release_value %305 : $Optional<String>, scope 162 // id: %372
  br bb31(%370 : $Builtin.Int1), scope 162        // id: %373

bb46:                                             // Preds: bb36
  %374 = string_literal utf8 ", ", scope 162      // users: %377, %375
  debug_value %374 : $Builtin.RawPointer, scope 162 // id: %375
  debug_value %229 : $Builtin.Int1, scope 162     // id: %376
  %377 = struct $UnsafeMutableRawPointer (%374 : $Builtin.RawPointer), scope 162 // user: %378
  %378 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %377 : $UnsafeMutableRawPointer, scope 162 // users: %401, %383, %379
  debug_value %378 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %379
  debug_value %234 : $Optional<AnyObject>, scope 162 // id: %380
  %381 = integer_literal $Builtin.Int64, 2, scope 162 // users: %401, %382
  %382 = struct $UInt (%381 : $Builtin.Int64), scope 162 // user: %383
  %383 = struct $_StringCore (%378 : $Optional<UnsafeMutableRawPointer>, %382 : $UInt, %234 : $Optional<AnyObject>), scope 162 // user: %384
  %384 = struct $String (%383 : $_StringCore), scope 162 // users: %395, %388, %386
  debug_value_addr %8 : $*String, scope 179       // id: %385
  debug_value %384 : $String, scope 179           // id: %386
  debug_value_addr %8 : $*String, scope 179       // id: %387
  debug_value %384 : $String, scope 179           // id: %388
  %389 = load %247 : $*Builtin.Int64, scope 179   // user: %390
  %390 = builtin "and_Int64"(%389 : $Builtin.Int64, %249 : $Builtin.Int64) : $Builtin.Int64, scope 179 // user: %391
  %391 = builtin "cmp_eq_Int64"(%390 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int1, scope 179 // user: %392
  cond_br %391, bb47, bb48, scope 179             // id: %392

bb47:                                             // Preds: bb46
  %393 = struct_element_addr %245 : $*_StringCore, #_StringCore._owner, scope 179 // user: %394
  %394 = load %393 : $*Optional<AnyObject>, scope 179 // user: %397
  store %384 to %8 : $*String, scope 179          // id: %395
  retain_value %305 : $Optional<String>, scope 162 // id: %396
  release_value %394 : $Optional<AnyObject>, scope 162 // id: %397
  br bb38, scope 162                              // id: %398

bb48:                                             // Preds: bb46
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %399 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 179 // user: %401
  retain_value %305 : $Optional<String>, scope 162 // id: %400
  %401 = apply %399(%378, %381, %234, %245) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 179
  br bb38, scope 179                              // id: %402

bb49:                                             // Preds: bb35
  destroy_addr %302 : $*Any, scope 162            // id: %403
  br bb45(%276 : $Builtin.Int1), scope 162        // id: %404

bb50:                                             // Preds: bb34
  destroy_addr %0 : $*Any, scope 162              // id: %405
  dealloc_stack %1871 : $*Optional<(Optional<String>, Any)>, scope 162 // id: %406
  release_value %1869 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %407
  %408 = string_literal utf8 ")", scope 162       // users: %411, %409
  debug_value %408 : $Builtin.RawPointer, scope 162 // id: %409
  debug_value %229 : $Builtin.Int1, scope 162     // id: %410
  %411 = struct $UnsafeMutableRawPointer (%408 : $Builtin.RawPointer), scope 162 // user: %412
  %412 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %411 : $UnsafeMutableRawPointer, scope 162 // users: %431, %415, %413
  debug_value %412 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %413
  debug_value %234 : $Optional<AnyObject>, scope 162 // id: %414
  %415 = struct $_StringCore (%412 : $Optional<UnsafeMutableRawPointer>, %238 : $UInt, %234 : $Optional<AnyObject>), scope 162 // user: %416
  %416 = struct $String (%415 : $_StringCore), scope 162 // users: %427, %420, %418
  debug_value_addr %8 : $*String, scope 181       // id: %417
  debug_value %416 : $String, scope 181           // id: %418
  debug_value_addr %8 : $*String, scope 181       // id: %419
  debug_value %416 : $String, scope 181           // id: %420
  %421 = load %247 : $*Builtin.Int64, scope 181   // user: %422
  %422 = builtin "and_Int64"(%421 : $Builtin.Int64, %249 : $Builtin.Int64) : $Builtin.Int64, scope 181 // user: %423
  %423 = builtin "cmp_eq_Int64"(%422 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int1, scope 181 // user: %424
  cond_br %423, bb51, bb52, scope 181             // id: %424

bb51:                                             // Preds: bb50
  %425 = struct_element_addr %245 : $*_StringCore, #_StringCore._owner, scope 181 // user: %426
  %426 = load %425 : $*Optional<AnyObject>, scope 181 // user: %428
  store %416 to %8 : $*String, scope 181          // id: %427
  release_value %426 : $Optional<AnyObject>, scope 162 // id: %428
  br bb5, scope 162                               // id: %429

bb52:                                             // Preds: bb50
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %430 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 181 // user: %431
  %431 = apply %430(%412, %237, %234, %245) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 181
  br bb5, scope 181                               // id: %432

bb53:                                             // Preds: bb273
  dealloc_stack %277 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %433
  inject_enum_addr %1871 : $*Optional<(Optional<String>, Any)>, #Optional.none!enumelt, scope 162 // id: %434
  br bb34, scope 162                              // id: %435

bb54:                                             // Preds: bb1
  // function_ref swift_EnumCaseName
  %436 = function_ref @swift_EnumCaseName : $@convention(thin) <τ_0_0> (@in τ_0_0) -> Optional<UnsafePointer<Int8>>, scope 162 // user: %438
  retain_value %9 : $String, scope 162            // id: %437
  %438 = apply %436<Any>(%0) : $@convention(thin) <τ_0_0> (@in τ_0_0) -> Optional<UnsafePointer<Int8>>, scope 162 // user: %439
  switch_enum %438 : $Optional<UnsafePointer<Int8>>, case #Optional.some!enumelt.1: bb55, case #Optional.none!enumelt: bb123, scope 162 // id: %439

// %440                                           // users: %908, %617, %450, %449, %445, %443, %442, %441
bb55(%440 : $UnsafePointer<Int8>):                // Preds: bb54
  debug_value %440 : $UnsafePointer<Int8>, scope 162 // id: %441
  debug_value %440 : $UnsafePointer<Int8>, scope 162 // id: %442
  debug_value %440 : $UnsafePointer<Int8>, scope 162 // id: %443
  // function_ref _swift_stdlib_strlen
  %444 = function_ref @_swift_stdlib_strlen : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 162 // user: %446
  %445 = enum $ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>, #ImplicitlyUnwrappedOptional.some!enumelt.1, %440 : $UnsafePointer<Int8>, scope 162 // user: %446
  %446 = apply %444(%445) : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 162 // users: %909, %618, %467, %460, %457, %454, %451, %448, %447
  debug_value %446 : $Int, scope 162              // id: %447
  debug_value %446 : $Int, scope 162              // id: %448
  debug_value %440 : $UnsafePointer<Int8>, scope 162 // id: %449
  %450 = struct_extract %440 : $UnsafePointer<Int8>, #UnsafePointer._rawValue, scope 162 // users: %910, %619, %475, %455, %453
  %451 = struct_extract %446 : $Int, #Int._value, scope 162 // users: %472, %462, %452
  %452 = builtin "truncOrBitCast_Int64_Word"(%451 : $Builtin.Int64) : $Builtin.Word, scope 162 // users: %910, %619, %453
  bind_memory %450 : $Builtin.RawPointer, %452 : $Builtin.Word to $*UInt8, scope 162 // id: %453
  debug_value %446 : $Int, scope 162              // id: %454
  %455 = struct $UnsafePointer<UInt8> (%450 : $Builtin.RawPointer), scope 162 // users: %466, %458, %456
  debug_value %455 : $UnsafePointer<UInt8>, scope 162 // id: %456
  debug_value %446 : $Int, scope 162              // id: %457
  %458 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %455 : $UnsafePointer<UInt8>, scope 162 // users: %478, %459
  debug_value %458 : $Optional<UnsafePointer<UInt8>>, scope 183 // id: %459
  debug_value %446 : $Int, scope 183              // id: %460
  %461 = integer_literal $Builtin.Int64, 0, scope 183 // users: %670, %650, %494, %549, %481, %462
  %462 = builtin "cmp_sge_Int64"(%451 : $Builtin.Int64, %461 : $Builtin.Int64) : $Builtin.Int1, scope 183 // user: %464
  %463 = integer_literal $Builtin.Int1, -1, scope 183 // users: %556, %494, %881, %863, %820, %574, %518, %464
  %464 = builtin "xor_Int1"(%462 : $Builtin.Int1, %463 : $Builtin.Int1) : $Builtin.Int1, scope 183 // user: %465
  cond_fail %464 : $Builtin.Int1, scope 183       // id: %465
  debug_value %455 : $UnsafePointer<UInt8>, scope 183 // id: %466
  debug_value %446 : $Int, scope 183              // id: %467
  %468 = metatype $@thick UInt8.Type, scope 183   // user: %469
  %469 = builtin "strideof_nonzero"<UInt8>(%468 : $@thick UInt8.Type) : $Builtin.Word, scope 183 // users: %606, %470
  %470 = builtin "zextOrBitCast_Word_Int64"(%469 : $Builtin.Word) : $Builtin.Int64, scope 183 // user: %472
  %471 = integer_literal $Builtin.Int1, 0, scope 183 // users: %903, %523, %512, %472
  %472 = builtin "smul_with_overflow_Int64"(%451 : $Builtin.Int64, %470 : $Builtin.Int64, %471 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 183 // user: %473
  %473 = tuple_extract %472 : $(Builtin.Int64, Builtin.Int1), 0, scope 183 // user: %474
  %474 = builtin "truncOrBitCast_Int64_Word"(%473 : $Builtin.Int64) : $Builtin.Word, scope 183 // user: %475
  %475 = index_raw_pointer %450 : $Builtin.RawPointer, %474 : $Builtin.Word, scope 183 // user: %476
  %476 = struct $UnsafePointer<UInt8> (%475 : $Builtin.RawPointer), scope 183 // user: %477
  %477 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %476 : $UnsafePointer<UInt8>, scope 183 // user: %478
  %478 = struct $UnsafeBufferPointer<UInt8> (%458 : $Optional<UnsafePointer<UInt8>>, %477 : $Optional<UnsafePointer<UInt8>>), scope 183 // users: %482, %480, %479
  debug_value %478 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %479
  debug_value %478 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %480
  %481 = struct $Int (%461 : $Builtin.Int64), scope 162 // users: %900, %553, %482
  %482 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%478 : $UnsafeBufferPointer<UInt8>, %481 : $Int), scope 162 // users: %831, %828, %585, %582, %486, %483
  debug_value %482 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %483
  %484 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %541, %497, %486
  %485 = alloc_stack $UTF8, scope 162             // users: %540, %497, %492
  store %482 to %484 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %486
  %487 = integer_literal $Builtin.Int32, 0, scope 162 // user: %488
  %488 = struct $UInt32 (%487 : $Builtin.Int32), scope 162 // user: %491
  %489 = integer_literal $Builtin.Int8, 0, scope 162 // user: %490
  %490 = struct $UInt8 (%489 : $Builtin.Int8), scope 162 // user: %491
  %491 = struct $UTF8 (%488 : $UInt32, %490 : $UInt8), scope 162 // users: %832, %586, %492
  store %491 to %485 : $*UTF8, scope 162          // id: %492
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %493 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // users: %835, %589, %497
  br bb56(%461 : $Builtin.Int64, %463 : $Builtin.Int1), scope 162 // id: %494

// %495                                           // users: %534, %518
// %496                                           // users: %533, %532, %535
bb56(%495 : $Builtin.Int64, %496 : $Builtin.Int1): // Preds: bb61 bb55
  %497 = apply %493(%484, %485) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %498
  switch_enum %497 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb57, case #UnicodeDecodingResult.emptyInput!enumelt: bb67, case #UnicodeDecodingResult.error!enumelt: bb122, scope 162 // id: %498

// %499                                           // users: %528, %527, %508, %507, %502, %501, %500
bb57(%499 : $UnicodeScalar):                      // Preds: bb56
  debug_value %499 : $UnicodeScalar, scope 162    // id: %500
  debug_value %499 : $UnicodeScalar, scope 162    // id: %501
  %502 = struct_extract %499 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // user: %504
  %503 = integer_literal $Builtin.Int32, 127, scope 162 // user: %505
  %504 = struct_extract %502 : $UInt32, #UInt32._value, scope 162 // users: %530, %510, %505
  %505 = builtin "cmp_ugt_Int32"(%504 : $Builtin.Int32, %503 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %506
  cond_br %505, bb58, bb64, scope 162             // id: %506

bb58:                                             // Preds: bb57
  debug_value %499 : $UnicodeScalar, scope 162    // id: %507
  debug_value %499 : $UnicodeScalar, scope 162    // id: %508
  %509 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %510
  %510 = builtin "cmp_ule_Int32"(%504 : $Builtin.Int32, %509 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %511
  cond_br %510, bb59, bb62, scope 162             // id: %511

bb59:                                             // Preds: bb58
  br bb60(%471 : $Builtin.Int1), scope 162        // id: %512

// %513                                           // user: %515
bb60(%513 : $Builtin.Int1):                       // Preds: bb65 bb59
  %514 = integer_literal $Builtin.Int64, 1, scope 162 // user: %515
  br bb61(%514 : $Builtin.Int64, %513 : $Builtin.Int1), scope 162 // id: %515

// %516                                           // user: %518
// %517                                           // user: %522
bb61(%516 : $Builtin.Int64, %517 : $Builtin.Int1): // Preds: bb63 bb60
  %518 = builtin "sadd_with_overflow_Int64"(%495 : $Builtin.Int64, %516 : $Builtin.Int64, %463 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 162 // users: %520, %519
  %519 = tuple_extract %518 : $(Builtin.Int64, Builtin.Int1), 0, scope 162 // user: %522
  %520 = tuple_extract %518 : $(Builtin.Int64, Builtin.Int1), 1, scope 162 // user: %521
  cond_fail %520 : $Builtin.Int1, scope 162       // id: %521
  br bb56(%519 : $Builtin.Int64, %517 : $Builtin.Int1), scope 162 // id: %522

bb62:                                             // Preds: bb58
  br bb63(%471 : $Builtin.Int1), scope 162        // id: %523

// %524                                           // user: %526
bb63(%524 : $Builtin.Int1):                       // Preds: bb66 bb62
  %525 = integer_literal $Builtin.Int64, 2, scope 162 // user: %526
  br bb61(%525 : $Builtin.Int64, %524 : $Builtin.Int1), scope 162 // id: %526

bb64:                                             // Preds: bb57
  debug_value %499 : $UnicodeScalar, scope 162    // id: %527
  debug_value %499 : $UnicodeScalar, scope 162    // id: %528
  %529 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %530
  %530 = builtin "cmp_ule_Int32"(%504 : $Builtin.Int32, %529 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %531
  cond_br %530, bb65, bb66, scope 162             // id: %531

bb65:                                             // Preds: bb64
  br bb60(%496 : $Builtin.Int1), scope 162        // id: %532

bb66:                                             // Preds: bb64
  br bb63(%496 : $Builtin.Int1), scope 162        // id: %533

bb67:                                             // Preds: bb56
  %534 = struct $Int (%495 : $Builtin.Int64), scope 162 // user: %536
  %535 = struct $Bool (%496 : $Builtin.Int1), scope 162 // user: %536
  %536 = tuple $(count: Int, isASCII: Bool) (%534, %535), scope 162 // user: %537
  %537 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %536 : $(count: Int, isASCII: Bool), scope 162 // user: %538
  br bb68(%537 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %538

// %539                                           // user: %542
bb68(%539 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb122 bb67
  dealloc_stack %485 : $*UTF8, scope 162          // id: %540
  dealloc_stack %484 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %541
  switch_enum %539 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb69, case #Optional.none!enumelt: bb120, scope 162 // id: %542

// %543                                           // users: %546, %544
bb69(%543 : $(count: Int, isASCII: Bool)):        // Preds: bb68
  %544 = tuple_extract %543 : $(count: Int, isASCII: Bool), 0, scope 162 // users: %907, %906, %562, %548, %545
  debug_value %544 : $Int, scope 162              // id: %545
  %546 = tuple_extract %543 : $(count: Int, isASCII: Bool), 1, scope 162 // users: %904, %551, %547
  debug_value %546 : $Bool, scope 162             // id: %547
  %548 = struct_extract %544 : $Int, #Int._value, scope 162 // user: %549
  %549 = builtin "cmp_sge_Int64"(%461 : $Builtin.Int64, %548 : $Builtin.Int64) : $Builtin.Int1, scope 162 // user: %550
  cond_br %549, bb70, bb117, scope 162            // id: %550

bb70:                                             // Preds: bb69
  %551 = struct_extract %546 : $Bool, #Bool._value, scope 162 // user: %552
  cond_br %551, bb71, bb115, scope 162            // id: %552

bb71:                                             // Preds: bb70
  br bb72(%481 : $Int), scope 162                 // id: %553

// %554                                           // user: %556
bb72(%554 : $Int):                                // Preds: bb118 bb71
  %555 = integer_literal $Builtin.Int64, 1, scope 162 // user: %556
  br bb73(%555 : $Builtin.Int64, %554 : $Int, %463 : $Builtin.Int1), scope 162 // id: %556

// %557                                           // user: %560
// %558                                           // user: %562
// %559                                           // user: %564
bb73(%557 : $Builtin.Int64, %558 : $Int, %559 : $Builtin.Int1): // Preds: bb116 bb72
  %560 = struct $Int (%557 : $Builtin.Int64), scope 162 // user: %562
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %561 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // user: %562
  %562 = apply %561(%558, %544, %560) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // users: %812, %615, %613, %612, %566, %565, %563
  debug_value %562 : $_StringBuffer, scope 162    // id: %563
  cond_br %559, bb74, bb105, scope 162            // id: %564

bb74:                                             // Preds: bb73
  debug_value %562 : $_StringBuffer, scope 162    // id: %565
  %566 = struct_extract %562 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %572, %571, %568, %567
  %567 = struct_extract %566 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %573, %576
  debug_value %566 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %568
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %569 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %570
  %570 = apply %569() : $@convention(thin) () -> Int, scope 162 // users: %579, %578
  debug_value %566 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %571
  debug_value %566 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %572
  switch_enum %567 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb75, case #Optional.some!enumelt.1: bb76, scope 162 // id: %573

bb75:                                             // Preds: bb74
  cond_fail %463 : $Builtin.Int1, scope 162       // id: %574
  unreachable, scope 162                          // id: %575

bb76:                                             // Preds: bb74
  %576 = unchecked_enum_data %567 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %577
  %577 = ref_to_raw_pointer %576 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %581
  %578 = struct_extract %570 : $Int, #Int._value, scope 162 // user: %580
  debug_value %570 : $Int, scope 162              // id: %579
  %580 = builtin "truncOrBitCast_Int64_Word"(%578 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %581
  %581 = index_raw_pointer %577 : $Builtin.RawPointer, %580 : $Builtin.Word, scope 162 // user: %587
  debug_value %482 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %582
  %583 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %610, %589, %585
  %584 = alloc_stack $UTF8, scope 162             // users: %609, %589, %586
  store %482 to %583 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %585
  store %491 to %584 : $*UTF8, scope 162          // id: %586
  br bb77(%581 : $Builtin.RawPointer), scope 162  // id: %587

// %588                                           // users: %606, %604
bb77(%588 : $Builtin.RawPointer):                 // Preds: bb78 bb76
  %589 = apply %493(%583, %584) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %590
  switch_enum %589 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb78, case #UnicodeDecodingResult.emptyInput!enumelt: bb79, case #UnicodeDecodingResult.error!enumelt: bb104, scope 162 // id: %590

// %591                                           // users: %596, %595, %594, %593, %592
bb78(%591 : $UnicodeScalar):                      // Preds: bb77
  debug_value %591 : $UnicodeScalar, scope 162    // id: %592
  debug_value %591 : $UnicodeScalar, scope 162    // id: %593
  debug_value %591 : $UnicodeScalar, scope 162    // id: %594
  debug_value %591 : $UnicodeScalar, scope 162    // id: %595
  %596 = struct_extract %591 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %598, %597
  debug_value %596 : $UInt32, scope 162           // id: %597
  %598 = struct_extract %596 : $UInt32, #UInt32._value, scope 162 // user: %599
  %599 = builtin "u_to_u_checked_trunc_Int32_Int8"(%598 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 162 // users: %601, %600
  %600 = tuple_extract %599 : $(Builtin.Int8, Builtin.Int1), 0, scope 162 // user: %603
  %601 = tuple_extract %599 : $(Builtin.Int8, Builtin.Int1), 1, scope 162 // user: %602
  cond_fail %601 : $Builtin.Int1, scope 162       // id: %602
  %603 = struct $UInt8 (%600 : $Builtin.Int8), scope 162 // user: %605
  %604 = pointer_to_address %588 : $Builtin.RawPointer to [strict] $*UInt8, scope 162 // user: %605
  store %603 to %604 : $*UInt8, scope 162         // id: %605
  %606 = index_raw_pointer %588 : $Builtin.RawPointer, %469 : $Builtin.Word, scope 162 // user: %607
  br bb77(%606 : $Builtin.RawPointer), scope 162  // id: %607

bb79:                                             // Preds: bb77
  br bb80, scope 162                              // id: %608

bb80:                                             // Preds: bb104 bb79
  dealloc_stack %584 : $*UTF8, scope 162          // id: %609
  dealloc_stack %583 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %610
  br bb81, scope 162                              // id: %611

bb81:                                             // Preds: bb113 bb80
  debug_value %562 : $_StringBuffer, scope 162    // id: %612
  debug_value %562 : $_StringBuffer, scope 162    // id: %613
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %614 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // user: %615
  %615 = apply %614(%562) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // users: %683, %678, %679, %680, %616
  %616 = struct $String (%615 : $_StringCore), scope 162 // users: %674, %663, %661, %621, %620
  debug_value %440 : $UnsafePointer<Int8>, scope 162 // id: %617
  debug_value %446 : $Int, scope 162              // id: %618
  bind_memory %450 : $Builtin.RawPointer, %452 : $Builtin.Word to $*Int8, scope 162 // id: %619
  debug_value %616 : $String, scope 162           // id: %620
  debug_value %616 : $String, scope 162           // id: %621
  %622 = struct_extract %5 : $Bool, #Bool._value, scope 162 // user: %623
  cond_br %622, bb83, bb82, scope 162             // id: %623

bb82:                                             // Preds: bb81
  br bb86, scope 162                              // id: %624

bb83:                                             // Preds: bb81
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %625 = function_ref @_TTSf4n_g_n___TTSg5P__SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 185 // user: %627
  strong_retain %7 : $@box String, scope 162      // id: %626
  %627 = apply %625(%1, %7, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 185
  strong_release %7 : $@box String, scope 162     // id: %628
  %629 = string_literal utf8 ".", scope 162       // users: %631, %630
  debug_value %629 : $Builtin.RawPointer, scope 162 // id: %630
  %631 = struct $UnsafeMutableRawPointer (%629 : $Builtin.RawPointer), scope 162 // user: %632
  %632 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %631 : $UnsafeMutableRawPointer, scope 162 // users: %658, %638, %634
  %633 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 162 // users: %658, %638, %635
  debug_value %632 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %634
  debug_value %633 : $Optional<AnyObject>, scope 162 // id: %635
  %636 = integer_literal $Builtin.Int64, 1, scope 162 // users: %658, %637
  %637 = struct $UInt (%636 : $Builtin.Int64), scope 162 // user: %638
  %638 = struct $_StringCore (%632 : $Optional<UnsafeMutableRawPointer>, %637 : $UInt, %633 : $Optional<AnyObject>), scope 162 // user: %639
  %639 = struct $String (%638 : $_StringCore), scope 162 // users: %654, %643, %641
  debug_value_addr %8 : $*String, scope 187       // id: %640
  debug_value %639 : $String, scope 187           // id: %641
  debug_value_addr %8 : $*String, scope 187       // id: %642
  debug_value %639 : $String, scope 187           // id: %643
  %644 = struct_element_addr %8 : $*String, #String._core, scope 187 // users: %658, %652, %645
  %645 = struct_element_addr %644 : $*_StringCore, #_StringCore._countAndFlags, scope 187 // user: %646
  %646 = struct_element_addr %645 : $*UInt, #UInt._value, scope 187 // user: %647
  %647 = load %646 : $*Builtin.Int64, scope 187   // user: %649
  %648 = integer_literal $Builtin.Int64, 4611686018427387903, scope 187 // user: %649
  %649 = builtin "and_Int64"(%647 : $Builtin.Int64, %648 : $Builtin.Int64) : $Builtin.Int64, scope 187 // user: %650
  %650 = builtin "cmp_eq_Int64"(%649 : $Builtin.Int64, %461 : $Builtin.Int64) : $Builtin.Int1, scope 187 // user: %651
  cond_br %650, bb84, bb85, scope 187             // id: %651

bb84:                                             // Preds: bb83
  %652 = struct_element_addr %644 : $*_StringCore, #_StringCore._owner, scope 187 // user: %653
  %653 = load %652 : $*Optional<AnyObject>, scope 187 // user: %655
  store %639 to %8 : $*String, scope 187          // id: %654
  release_value %653 : $Optional<AnyObject>, scope 162 // id: %655
  br bb86, scope 162                              // id: %656

bb85:                                             // Preds: bb83
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %657 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 187 // user: %658
  %658 = apply %657(%632, %636, %633, %644) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 187
  br bb86, scope 187                              // id: %659

bb86:                                             // Preds: bb82 bb85 bb84
  debug_value_addr %8 : $*String, scope 189       // id: %660
  debug_value %616 : $String, scope 189           // id: %661
  debug_value_addr %8 : $*String, scope 189       // id: %662
  debug_value %616 : $String, scope 189           // id: %663
  %664 = struct_element_addr %8 : $*String, #String._core, scope 189 // users: %682, %672, %665
  %665 = struct_element_addr %664 : $*_StringCore, #_StringCore._countAndFlags, scope 189 // user: %666
  %666 = struct_element_addr %665 : $*UInt, #UInt._value, scope 189 // user: %667
  %667 = load %666 : $*Builtin.Int64, scope 189   // user: %669
  %668 = integer_literal $Builtin.Int64, 4611686018427387903, scope 189 // user: %669
  %669 = builtin "and_Int64"(%667 : $Builtin.Int64, %668 : $Builtin.Int64) : $Builtin.Int64, scope 189 // user: %670
  %670 = builtin "cmp_eq_Int64"(%669 : $Builtin.Int64, %461 : $Builtin.Int64) : $Builtin.Int1, scope 189 // user: %671
  cond_br %670, bb87, bb88, scope 189             // id: %671

bb87:                                             // Preds: bb86
  %672 = struct_element_addr %664 : $*_StringCore, #_StringCore._owner, scope 189 // user: %673
  %673 = load %672 : $*Optional<AnyObject>, scope 189 // user: %675
  store %616 to %8 : $*String, scope 189          // id: %674
  release_value %673 : $Optional<AnyObject>, scope 162 // id: %675
  br bb89, scope 162                              // id: %676

bb88:                                             // Preds: bb86
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %677 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 189 // user: %682
  %678 = struct_extract %615 : $_StringCore, #_StringCore._owner, scope 189 // user: %682
  %679 = struct_extract %615 : $_StringCore, #_StringCore._countAndFlags, scope 189 // user: %681
  %680 = struct_extract %615 : $_StringCore, #_StringCore._baseAddress, scope 189 // user: %682
  %681 = struct_extract %679 : $UInt, #UInt._value, scope 189 // user: %682
  %682 = apply %677(%680, %681, %678, %664) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 189
  release_value %615 : $_StringCore, scope 162    // id: %683
  br bb89, scope 189                              // id: %684

bb89:                                             // Preds: bb88 bb121 bb87
  %685 = alloc_stack $Any, scope 162              // users: %809, %778, %777, %742, %737, %736, %708, %704
  %686 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 162 // users: %1886, %1887, %808, %706, %700
  checked_cast_br [exact] %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb90, bb274, scope 162 // id: %687

bb90(%688 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb89
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %689 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 162 // user: %698
  %690 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 162 // user: %692
  %691 = integer_literal $Builtin.Word, 183, scope 162 // user: %694
  %692 = builtin "ptrtoint_Word"(%690 : $Builtin.RawPointer) : $Builtin.Word, scope 162 // user: %694
  %693 = integer_literal $Builtin.Int8, 2, scope 162 // user: %694
  %694 = struct $StaticString (%692 : $Builtin.Word, %691 : $Builtin.Word, %693 : $Builtin.Int8), scope 162 // user: %698
  %695 = integer_literal $Builtin.Int64, 304, scope 162 // user: %696
  %696 = struct $UInt (%695 : $Builtin.Int64), scope 162 // user: %698
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %697
  %698 = apply %689(%694, %696) : $@convention(thin) (StaticString, UInt) -> Never, scope 162
  unreachable, scope 162                          // id: %699

bb91:                                             // Preds: bb274
  %700 = unchecked_take_enum_data_addr %686 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 162 // users: %703, %701
  %701 = tuple_element_addr %700 : $*(label: Optional<String>, value: Any), 0, scope 162 // user: %702
  %702 = load %701 : $*Optional<String>, scope 162 // user: %705
  %703 = tuple_element_addr %700 : $*(label: Optional<String>, value: Any), 1, scope 162 // user: %704
  copy_addr [take] %703 to [initialization] %685 : $*Any, scope 162 // id: %704
  release_value %702 : $Optional<String>, scope 162 // id: %705
  dealloc_stack %686 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %706
  %707 = alloc_stack $Any, scope 162              // users: %733, %710, %708
  copy_addr %685 to [initialization] %707 : $*Any, scope 162 // id: %708
  // function_ref specialized Mirror.init(reflecting : Any) -> Mirror
  %709 = function_ref @_TTSfq4n_d___TFVs6MirrorCfT10reflectingP__S_ : $@convention(thin) (@in Any) -> @owned Mirror, scope 162 // user: %710
  %710 = apply %709(%707) : $@convention(thin) (@in Any) -> @owned Mirror, scope 162 // users: %731, %729, %711
  %711 = struct_extract %710 : $Mirror, #Mirror.displayStyle, scope 162 // users: %714, %715, %713, %712
  debug_value %711 : $Optional<Mirror.DisplayStyle>, scope 162 // id: %712
  debug_value %711 : $Optional<Mirror.DisplayStyle>, scope 162 // id: %713
  switch_enum %711 : $Optional<Mirror.DisplayStyle>, case #Optional.some!enumelt.1: bb92, case #Optional.none!enumelt: bb102, scope 162 // id: %714

bb92:                                             // Preds: bb91
  %715 = unchecked_enum_data %711 : $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, scope 162 // users: %725, %716
  debug_value %715 : $Mirror.DisplayStyle, scope 162 // id: %716
  %717 = integer_literal $Builtin.Int64, 0, scope 162 // user: %725
  %718 = integer_literal $Builtin.Int64, 1, scope 162 // user: %725
  %719 = integer_literal $Builtin.Int64, 2, scope 162 // user: %725
  %720 = integer_literal $Builtin.Int64, 3, scope 162 // users: %726, %725
  %721 = integer_literal $Builtin.Int64, 4, scope 162 // user: %725
  %722 = integer_literal $Builtin.Int64, 5, scope 162 // user: %725
  %723 = integer_literal $Builtin.Int64, 6, scope 162 // user: %725
  %724 = integer_literal $Builtin.Int64, 7, scope 162 // user: %725
  %725 = select_enum %715 : $Mirror.DisplayStyle, case #Mirror.DisplayStyle.struct!enumelt: %717, case #Mirror.DisplayStyle.class!enumelt: %718, case #Mirror.DisplayStyle.enum!enumelt: %719, case #Mirror.DisplayStyle.tuple!enumelt: %720, case #Mirror.DisplayStyle.optional!enumelt: %721, case #Mirror.DisplayStyle.collection!enumelt: %722, case #Mirror.DisplayStyle.dictionary!enumelt: %723, case #Mirror.DisplayStyle.set!enumelt: %724 : $Builtin.Int64, scope 162 // user: %726
  %726 = builtin "cmp_eq_Int64"(%725 : $Builtin.Int64, %720 : $Builtin.Int64) : $Builtin.Int1, scope 162 // user: %727
  br bb93(%726 : $Builtin.Int1), scope 162        // id: %727

// %728                                           // user: %734
bb93(%728 : $Builtin.Int1):                       // Preds: bb102 bb92
  %729 = struct_extract %710 : $Mirror, #Mirror.children, scope 162 // user: %730
  release_value %729 : $AnyCollection<(label: Optional<String>, value: Any)>, scope 162 // id: %730
  %731 = struct_extract %710 : $Mirror, #Mirror._makeSuperclassMirror, scope 162 // user: %732
  strong_release %731 : $@callee_owned () -> @owned Optional<Mirror>, scope 162 // id: %732
  dealloc_stack %707 : $*Any, scope 162           // id: %733
  cond_br %728, bb94, bb96, scope 162             // id: %734

bb94:                                             // Preds: bb93
  %735 = alloc_stack $Any, scope 162              // users: %739, %740, %736
  copy_addr %685 to [initialization] %735 : $*Any, scope 162 // id: %736
  destroy_addr %685 : $*Any, scope 162            // id: %737
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %738 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 162 // user: %739
  %739 = apply %738(%735, %8) : $@convention(thin) (@in Any, @inout String) -> (), scope 162
  dealloc_stack %735 : $*Any, scope 162           // id: %740
  br bb95, scope 162                              // id: %741

bb95:                                             // Preds: bb101 bb100 bb94
  dealloc_stack %685 : $*Any, scope 162           // id: %742
  br bb5, scope 162                               // id: %743

bb96:                                             // Preds: bb93
  %744 = string_literal utf8 "(", scope 162       // users: %746, %745
  debug_value %744 : $Builtin.RawPointer, scope 162 // id: %745
  %746 = struct $UnsafeMutableRawPointer (%744 : $Builtin.RawPointer), scope 162 // user: %747
  %747 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %746 : $UnsafeMutableRawPointer, scope 162 // users: %774, %753, %749
  %748 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 162 // users: %804, %774, %788, %787, %753, %750
  debug_value %747 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %749
  debug_value %748 : $Optional<AnyObject>, scope 162 // id: %750
  %751 = integer_literal $Builtin.Int64, 1, scope 162 // users: %804, %774, %752
  %752 = struct $UInt (%751 : $Builtin.Int64), scope 162 // users: %788, %753
  %753 = struct $_StringCore (%747 : $Optional<UnsafeMutableRawPointer>, %752 : $UInt, %748 : $Optional<AnyObject>), scope 162 // user: %754
  %754 = struct $String (%753 : $_StringCore), scope 162 // users: %770, %758, %756
  debug_value_addr %8 : $*String, scope 191       // id: %755
  debug_value %754 : $String, scope 191           // id: %756
  debug_value_addr %8 : $*String, scope 191       // id: %757
  debug_value %754 : $String, scope 191           // id: %758
  %759 = struct_element_addr %8 : $*String, #String._core, scope 191 // users: %798, %804, %774, %768, %760
  %760 = struct_element_addr %759 : $*_StringCore, #_StringCore._countAndFlags, scope 191 // user: %761
  %761 = struct_element_addr %760 : $*UInt, #UInt._value, scope 191 // users: %794, %762
  %762 = load %761 : $*Builtin.Int64, scope 191   // user: %764
  %763 = integer_literal $Builtin.Int64, 4611686018427387903, scope 191 // users: %795, %764
  %764 = builtin "and_Int64"(%762 : $Builtin.Int64, %763 : $Builtin.Int64) : $Builtin.Int64, scope 191 // user: %766
  %765 = integer_literal $Builtin.Int64, 0, scope 191 // users: %796, %766
  %766 = builtin "cmp_eq_Int64"(%764 : $Builtin.Int64, %765 : $Builtin.Int64) : $Builtin.Int1, scope 191 // user: %767
  cond_br %766, bb97, bb98, scope 191             // id: %767

bb97:                                             // Preds: bb96
  %768 = struct_element_addr %759 : $*_StringCore, #_StringCore._owner, scope 191 // user: %769
  %769 = load %768 : $*Optional<AnyObject>, scope 191 // user: %771
  store %754 to %8 : $*String, scope 191          // id: %770
  release_value %769 : $Optional<AnyObject>, scope 162 // id: %771
  br bb99, scope 191                              // id: %772

bb98:                                             // Preds: bb96
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %773 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 191 // user: %774
  %774 = apply %773(%747, %751, %748, %759) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 191
  br bb99, scope 191                              // id: %775

bb99:                                             // Preds: bb98 bb97
  %776 = alloc_stack $Any, scope 162              // users: %780, %781, %777
  copy_addr %685 to [initialization] %776 : $*Any, scope 162 // id: %777
  destroy_addr %685 : $*Any, scope 162            // id: %778
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %779 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 162 // user: %780
  %780 = apply %779(%776, %8) : $@convention(thin) (@in Any, @inout String) -> (), scope 162
  dealloc_stack %776 : $*Any, scope 162           // id: %781
  %782 = string_literal utf8 ")", scope 162       // users: %784, %783
  debug_value %782 : $Builtin.RawPointer, scope 162 // id: %783
  %784 = struct $UnsafeMutableRawPointer (%782 : $Builtin.RawPointer), scope 162 // user: %785
  %785 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %784 : $UnsafeMutableRawPointer, scope 162 // users: %804, %788, %786
  debug_value %785 : $Optional<UnsafeMutableRawPointer>, scope 162 // id: %786
  debug_value %748 : $Optional<AnyObject>, scope 162 // id: %787
  %788 = struct $_StringCore (%785 : $Optional<UnsafeMutableRawPointer>, %752 : $UInt, %748 : $Optional<AnyObject>), scope 162 // user: %789
  %789 = struct $String (%788 : $_StringCore), scope 162 // users: %800, %793, %791
  debug_value_addr %8 : $*String, scope 193       // id: %790
  debug_value %789 : $String, scope 193           // id: %791
  debug_value_addr %8 : $*String, scope 193       // id: %792
  debug_value %789 : $String, scope 193           // id: %793
  %794 = load %761 : $*Builtin.Int64, scope 193   // user: %795
  %795 = builtin "and_Int64"(%794 : $Builtin.Int64, %763 : $Builtin.Int64) : $Builtin.Int64, scope 193 // user: %796
  %796 = builtin "cmp_eq_Int64"(%795 : $Builtin.Int64, %765 : $Builtin.Int64) : $Builtin.Int1, scope 193 // user: %797
  cond_br %796, bb100, bb101, scope 193           // id: %797

bb100:                                            // Preds: bb99
  %798 = struct_element_addr %759 : $*_StringCore, #_StringCore._owner, scope 193 // user: %799
  %799 = load %798 : $*Optional<AnyObject>, scope 193 // user: %801
  store %789 to %8 : $*String, scope 193          // id: %800
  release_value %799 : $Optional<AnyObject>, scope 162 // id: %801
  br bb95, scope 162                              // id: %802

bb101:                                            // Preds: bb99
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %803 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 193 // user: %804
  %804 = apply %803(%785, %751, %748, %759) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 193
  br bb95, scope 193                              // id: %805

bb102:                                            // Preds: bb91
  %806 = integer_literal $Builtin.Int1, 0, scope 162 // user: %807
  br bb93(%806 : $Builtin.Int1), scope 162        // id: %807

bb103:                                            // Preds: bb274
  dealloc_stack %686 : $*Optional<(label: Optional<String>, value: Any)>, scope 162 // id: %808
  dealloc_stack %685 : $*Any, scope 162           // id: %809
  br bb5, scope 162                               // id: %810

bb104:                                            // Preds: bb77
  br bb80, scope 162                              // id: %811

bb105:                                            // Preds: bb73
  %812 = struct_extract %562 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %818, %817, %814, %813
  %813 = struct_extract %812 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %819, %822
  debug_value %812 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %814
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %815 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %816
  %816 = apply %815() : $@convention(thin) () -> Int, scope 162 // users: %825, %824
  debug_value %812 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %817
  debug_value %812 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %818
  switch_enum %813 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb106, case #Optional.some!enumelt.1: bb107, scope 162 // id: %819

bb106:                                            // Preds: bb105
  cond_fail %463 : $Builtin.Int1, scope 162       // id: %820
  unreachable, scope 162                          // id: %821

bb107:                                            // Preds: bb105
  %822 = unchecked_enum_data %813 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %823
  %823 = ref_to_raw_pointer %822 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %827
  %824 = struct_extract %816 : $Int, #Int._value, scope 162 // user: %826
  debug_value %816 : $Int, scope 162              // id: %825
  %826 = builtin "truncOrBitCast_Int64_Word"(%824 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %827
  %827 = index_raw_pointer %823 : $Builtin.RawPointer, %826 : $Builtin.Word, scope 162 // user: %833
  debug_value %482 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %828
  %829 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %897, %835, %831
  %830 = alloc_stack $UTF8, scope 162             // users: %896, %835, %832
  store %482 to %829 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %831
  store %491 to %830 : $*UTF8, scope 162          // id: %832
  br bb108(%827 : $Builtin.RawPointer), scope 162 // id: %833

// %834                                           // users: %877, %873, %858, %854
bb108(%834 : $Builtin.RawPointer):                // Preds: bb111 bb110 bb107
  %835 = apply %493(%829, %830) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %836
  switch_enum %835 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb109, case #UnicodeDecodingResult.emptyInput!enumelt: bb112, case #UnicodeDecodingResult.error!enumelt: bb114, scope 162 // id: %836

// %837                                           // users: %842, %841, %840, %839, %838
bb109(%837 : $UnicodeScalar):                     // Preds: bb108
  debug_value %837 : $UnicodeScalar, scope 162    // id: %838
  debug_value %837 : $UnicodeScalar, scope 162    // id: %839
  debug_value %837 : $UnicodeScalar, scope 162    // id: %840
  debug_value %837 : $UnicodeScalar, scope 162    // id: %841
  %842 = struct_extract %837 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %845, %843
  debug_value %842 : $UInt32, scope 162           // id: %843
  %844 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %846
  %845 = struct_extract %842 : $UInt32, #UInt32._value, scope 162 // users: %880, %862, %848, %846
  %846 = builtin "cmp_ule_Int32"(%845 : $Builtin.Int32, %844 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %847
  cond_br %846, bb110, bb111, scope 162           // id: %847

bb110:                                            // Preds: bb109
  %848 = builtin "u_to_u_checked_trunc_Int32_Int16"(%845 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %850, %849
  %849 = tuple_extract %848 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %852
  %850 = tuple_extract %848 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %851
  cond_fail %850 : $Builtin.Int1, scope 162       // id: %851
  %852 = struct $UInt16 (%849 : $Builtin.Int16), scope 162 // users: %855, %853
  debug_value %852 : $UInt16, scope 162           // id: %853
  %854 = pointer_to_address %834 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %855
  store %852 to %854 : $*UInt16, scope 162        // id: %855
  %856 = metatype $@thick UInt16.Type, scope 162  // user: %857
  %857 = builtin "strideof_nonzero"<UInt16>(%856 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // user: %858
  %858 = index_raw_pointer %834 : $Builtin.RawPointer, %857 : $Builtin.Word, scope 162 // user: %859
  br bb108(%858 : $Builtin.RawPointer), scope 162 // id: %859

bb111:                                            // Preds: bb109
  %860 = integer_literal $Builtin.Int32, 55232, scope 162 // user: %863
  %861 = integer_literal $Builtin.Int32, 10, scope 162 // user: %862
  %862 = builtin "lshr_Int32"(%845 : $Builtin.Int32, %861 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %863
  %863 = builtin "uadd_with_overflow_Int32"(%860 : $Builtin.Int32, %862 : $Builtin.Int32, %463 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %865, %864
  %864 = tuple_extract %863 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %867
  %865 = tuple_extract %863 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %866
  cond_fail %865 : $Builtin.Int1, scope 162       // id: %866
  %867 = builtin "u_to_u_checked_trunc_Int32_Int16"(%864 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %869, %868
  %868 = tuple_extract %867 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %871
  %869 = tuple_extract %867 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %870
  cond_fail %869 : $Builtin.Int1, scope 162       // id: %870
  %871 = struct $UInt16 (%868 : $Builtin.Int16), scope 162 // users: %874, %872
  debug_value %871 : $UInt16, scope 162           // id: %872
  %873 = pointer_to_address %834 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %874
  store %871 to %873 : $*UInt16, scope 162        // id: %874
  %875 = metatype $@thick UInt16.Type, scope 162  // user: %876
  %876 = builtin "strideof_nonzero"<UInt16>(%875 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // users: %893, %877
  %877 = index_raw_pointer %834 : $Builtin.RawPointer, %876 : $Builtin.Word, scope 162 // users: %893, %891
  %878 = integer_literal $Builtin.Int32, 56320, scope 162 // user: %881
  %879 = integer_literal $Builtin.Int32, 1023, scope 162 // user: %880
  %880 = builtin "and_Int32"(%845 : $Builtin.Int32, %879 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %881
  %881 = builtin "uadd_with_overflow_Int32"(%878 : $Builtin.Int32, %880 : $Builtin.Int32, %463 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %883, %882
  %882 = tuple_extract %881 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %885
  %883 = tuple_extract %881 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %884
  cond_fail %883 : $Builtin.Int1, scope 162       // id: %884
  %885 = builtin "u_to_u_checked_trunc_Int32_Int16"(%882 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %887, %886
  %886 = tuple_extract %885 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %889
  %887 = tuple_extract %885 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %888
  cond_fail %887 : $Builtin.Int1, scope 162       // id: %888
  %889 = struct $UInt16 (%886 : $Builtin.Int16), scope 162 // users: %892, %890
  debug_value %889 : $UInt16, scope 162           // id: %890
  %891 = pointer_to_address %877 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %892
  store %889 to %891 : $*UInt16, scope 162        // id: %892
  %893 = index_raw_pointer %877 : $Builtin.RawPointer, %876 : $Builtin.Word, scope 162 // user: %894
  br bb108(%893 : $Builtin.RawPointer), scope 162 // id: %894

bb112:                                            // Preds: bb108
  br bb113, scope 162                             // id: %895

bb113:                                            // Preds: bb114 bb112
  dealloc_stack %830 : $*UTF8, scope 162          // id: %896
  dealloc_stack %829 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %897
  br bb81, scope 162                              // id: %898

bb114:                                            // Preds: bb108
  br bb113, scope 162                             // id: %899

bb115:                                            // Preds: bb70
  br bb116(%481 : $Int), scope 162                // id: %900

// %901                                           // user: %903
bb116(%901 : $Int):                               // Preds: bb119 bb115
  %902 = integer_literal $Builtin.Int64, 2, scope 162 // user: %903
  br bb73(%902 : $Builtin.Int64, %901 : $Int, %471 : $Builtin.Int1), scope 162 // id: %903

bb117:                                            // Preds: bb69
  %904 = struct_extract %546 : $Bool, #Bool._value, scope 162 // user: %905
  cond_br %904, bb118, bb119, scope 162           // id: %905

bb118:                                            // Preds: bb117
  br bb72(%544 : $Int), scope 162                 // id: %906

bb119:                                            // Preds: bb117
  br bb116(%544 : $Int), scope 162                // id: %907

bb120:                                            // Preds: bb68
  debug_value %440 : $UnsafePointer<Int8>, scope 162 // id: %908
  debug_value %446 : $Int, scope 162              // id: %909
  bind_memory %450 : $Builtin.RawPointer, %452 : $Builtin.Word to $*Int8, scope 162 // id: %910
  br bb121, scope 162                             // id: %911

bb121:                                            // Preds: bb123 bb120
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %912 = function_ref @_TTSf4n_g_n___TTSg5P__SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 195 // user: %914
  strong_retain %7 : $@box String, scope 162      // id: %913
  %914 = apply %912(%1, %7, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 195
  strong_release %7 : $@box String, scope 162     // id: %915
  br bb89, scope 162                              // id: %916

bb122:                                            // Preds: bb56
  %917 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 162 // user: %918
  br bb68(%917 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %918

bb123:                                            // Preds: bb54
  br bb121, scope 162                             // id: %919

bb124:                                            // Preds: bb1
  destroy_addr %0 : $*Any, scope 162              // id: %920
  %921 = integer_literal $Builtin.Int1, -1, scope 162 // users: %1031, %969, %1214, %1187, %1169, %1126, %1049, %993, %937, %922
  %922 = struct $Bool (%921 : $Builtin.Int1), scope 162 // users: %926, %923
  debug_value %922 : $Bool, scope 162             // id: %923
  // function_ref swift_getTypeName
  %924 = function_ref @swift_getTypeName : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 162 // user: %926
  retain_value %9 : $String, scope 162            // id: %925
  %926 = apply %924(%1, %922) : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 162 // users: %928, %927
  %927 = tuple_extract %926 : $(UnsafePointer<UInt8>, Int), 0, scope 162 // users: %941, %939, %931, %929
  %928 = tuple_extract %926 : $(UnsafePointer<UInt8>, Int), 1, scope 162 // users: %940, %935, %933, %930
  debug_value %927 : $UnsafePointer<UInt8>, scope 162 // id: %929
  debug_value %928 : $Int, scope 162              // id: %930
  %931 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %927 : $UnsafePointer<UInt8>, scope 162 // users: %952, %932
  debug_value %931 : $Optional<UnsafePointer<UInt8>>, scope 197 // id: %932
  debug_value %928 : $Int, scope 197              // id: %933
  %934 = integer_literal $Builtin.Int64, 0, scope 197 // users: %1102, %969, %1024, %956, %936
  %935 = struct_extract %928 : $Int, #Int._value, scope 197 // users: %946, %936
  %936 = builtin "cmp_sge_Int64"(%935 : $Builtin.Int64, %934 : $Builtin.Int64) : $Builtin.Int1, scope 197 // user: %937
  %937 = builtin "xor_Int1"(%936 : $Builtin.Int1, %921 : $Builtin.Int1) : $Builtin.Int1, scope 197 // user: %938
  cond_fail %937 : $Builtin.Int1, scope 197       // id: %938
  debug_value %927 : $UnsafePointer<UInt8>, scope 197 // id: %939
  debug_value %928 : $Int, scope 197              // id: %940
  %941 = struct_extract %927 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 197 // user: %949
  %942 = metatype $@thick UInt8.Type, scope 197   // user: %943
  %943 = builtin "strideof_nonzero"<UInt8>(%942 : $@thick UInt8.Type) : $Builtin.Word, scope 197 // users: %1081, %944
  %944 = builtin "zextOrBitCast_Word_Int64"(%943 : $Builtin.Word) : $Builtin.Int64, scope 197 // user: %946
  %945 = integer_literal $Builtin.Int1, 0, scope 197 // users: %1209, %998, %987, %946
  %946 = builtin "smul_with_overflow_Int64"(%935 : $Builtin.Int64, %944 : $Builtin.Int64, %945 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 197 // user: %947
  %947 = tuple_extract %946 : $(Builtin.Int64, Builtin.Int1), 0, scope 197 // user: %948
  %948 = builtin "truncOrBitCast_Int64_Word"(%947 : $Builtin.Int64) : $Builtin.Word, scope 197 // user: %949
  %949 = index_raw_pointer %941 : $Builtin.RawPointer, %948 : $Builtin.Word, scope 197 // user: %950
  %950 = struct $UnsafePointer<UInt8> (%949 : $Builtin.RawPointer), scope 197 // user: %951
  %951 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %950 : $UnsafePointer<UInt8>, scope 197 // user: %952
  %952 = struct $UnsafeBufferPointer<UInt8> (%931 : $Optional<UnsafePointer<UInt8>>, %951 : $Optional<UnsafePointer<UInt8>>), scope 197 // users: %957, %955, %954, %953
  debug_value %952 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %953
  debug_value %952 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %954
  debug_value %952 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %955
  %956 = struct $Int (%934 : $Builtin.Int64), scope 162 // users: %1206, %1028, %957
  %957 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%952 : $UnsafeBufferPointer<UInt8>, %956 : $Int), scope 162 // users: %1137, %1134, %1060, %1057, %961, %958
  debug_value %957 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %958
  %959 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1016, %972, %961
  %960 = alloc_stack $UTF8, scope 162             // users: %1015, %972, %967
  store %957 to %959 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %961
  %962 = integer_literal $Builtin.Int32, 0, scope 162 // user: %963
  %963 = struct $UInt32 (%962 : $Builtin.Int32), scope 162 // user: %966
  %964 = integer_literal $Builtin.Int8, 0, scope 162 // user: %965
  %965 = struct $UInt8 (%964 : $Builtin.Int8), scope 162 // user: %966
  %966 = struct $UTF8 (%963 : $UInt32, %965 : $UInt8), scope 162 // users: %1138, %1061, %967
  store %966 to %960 : $*UTF8, scope 162          // id: %967
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %968 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // users: %1141, %1064, %972
  br bb125(%934 : $Builtin.Int64, %921 : $Builtin.Int1), scope 162 // id: %969

// %970                                           // users: %1009, %993
// %971                                           // users: %1008, %1007, %1010
bb125(%970 : $Builtin.Int64, %971 : $Builtin.Int1): // Preds: bb130 bb124
  %972 = apply %968(%959, %960) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %973
  switch_enum %972 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb126, case #UnicodeDecodingResult.emptyInput!enumelt: bb136, case #UnicodeDecodingResult.error!enumelt: bb170, scope 162 // id: %973

// %974                                           // users: %1003, %1002, %983, %982, %977, %976, %975
bb126(%974 : $UnicodeScalar):                     // Preds: bb125
  debug_value %974 : $UnicodeScalar, scope 162    // id: %975
  debug_value %974 : $UnicodeScalar, scope 162    // id: %976
  %977 = struct_extract %974 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // user: %979
  %978 = integer_literal $Builtin.Int32, 127, scope 162 // user: %980
  %979 = struct_extract %977 : $UInt32, #UInt32._value, scope 162 // users: %1005, %985, %980
  %980 = builtin "cmp_ugt_Int32"(%979 : $Builtin.Int32, %978 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %981
  cond_br %980, bb127, bb133, scope 162           // id: %981

bb127:                                            // Preds: bb126
  debug_value %974 : $UnicodeScalar, scope 162    // id: %982
  debug_value %974 : $UnicodeScalar, scope 162    // id: %983
  %984 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %985
  %985 = builtin "cmp_ule_Int32"(%979 : $Builtin.Int32, %984 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %986
  cond_br %985, bb128, bb131, scope 162           // id: %986

bb128:                                            // Preds: bb127
  br bb129(%945 : $Builtin.Int1), scope 162       // id: %987

// %988                                           // user: %990
bb129(%988 : $Builtin.Int1):                      // Preds: bb134 bb128
  %989 = integer_literal $Builtin.Int64, 1, scope 162 // user: %990
  br bb130(%989 : $Builtin.Int64, %988 : $Builtin.Int1), scope 162 // id: %990

// %991                                           // user: %993
// %992                                           // user: %997
bb130(%991 : $Builtin.Int64, %992 : $Builtin.Int1): // Preds: bb132 bb129
  %993 = builtin "sadd_with_overflow_Int64"(%970 : $Builtin.Int64, %991 : $Builtin.Int64, %921 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 162 // users: %995, %994
  %994 = tuple_extract %993 : $(Builtin.Int64, Builtin.Int1), 0, scope 162 // user: %997
  %995 = tuple_extract %993 : $(Builtin.Int64, Builtin.Int1), 1, scope 162 // user: %996
  cond_fail %995 : $Builtin.Int1, scope 162       // id: %996
  br bb125(%994 : $Builtin.Int64, %992 : $Builtin.Int1), scope 162 // id: %997

bb131:                                            // Preds: bb127
  br bb132(%945 : $Builtin.Int1), scope 162       // id: %998

// %999                                           // user: %1001
bb132(%999 : $Builtin.Int1):                      // Preds: bb135 bb131
  %1000 = integer_literal $Builtin.Int64, 2, scope 162 // user: %1001
  br bb130(%1000 : $Builtin.Int64, %999 : $Builtin.Int1), scope 162 // id: %1001

bb133:                                            // Preds: bb126
  debug_value %974 : $UnicodeScalar, scope 162    // id: %1002
  debug_value %974 : $UnicodeScalar, scope 162    // id: %1003
  %1004 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1005
  %1005 = builtin "cmp_ule_Int32"(%979 : $Builtin.Int32, %1004 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1006
  cond_br %1005, bb134, bb135, scope 162          // id: %1006

bb134:                                            // Preds: bb133
  br bb129(%971 : $Builtin.Int1), scope 162       // id: %1007

bb135:                                            // Preds: bb133
  br bb132(%971 : $Builtin.Int1), scope 162       // id: %1008

bb136:                                            // Preds: bb125
  %1009 = struct $Int (%970 : $Builtin.Int64), scope 162 // user: %1011
  %1010 = struct $Bool (%971 : $Builtin.Int1), scope 162 // user: %1011
  %1011 = tuple $(count: Int, isASCII: Bool) (%1009, %1010), scope 162 // user: %1012
  %1012 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %1011 : $(count: Int, isASCII: Bool), scope 162 // user: %1013
  br bb137(%1012 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %1013

// %1014                                          // user: %1017
bb137(%1014 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb170 bb136
  dealloc_stack %960 : $*UTF8, scope 162          // id: %1015
  dealloc_stack %959 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1016
  switch_enum %1014 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb138, case #Optional.none!enumelt: bb169, scope 162 // id: %1017

// %1018                                          // users: %1021, %1019
bb138(%1018 : $(count: Int, isASCII: Bool)):      // Preds: bb137
  %1019 = tuple_extract %1018 : $(count: Int, isASCII: Bool), 0, scope 162 // users: %1213, %1212, %1037, %1023, %1020
  debug_value %1019 : $Int, scope 162             // id: %1020
  %1021 = tuple_extract %1018 : $(count: Int, isASCII: Bool), 1, scope 162 // users: %1210, %1026, %1022
  debug_value %1021 : $Bool, scope 162            // id: %1022
  %1023 = struct_extract %1019 : $Int, #Int._value, scope 162 // user: %1024
  %1024 = builtin "cmp_sge_Int64"(%934 : $Builtin.Int64, %1023 : $Builtin.Int64) : $Builtin.Int1, scope 162 // user: %1025
  cond_br %1024, bb139, bb166, scope 162          // id: %1025

bb139:                                            // Preds: bb138
  %1026 = struct_extract %1021 : $Bool, #Bool._value, scope 162 // user: %1027
  cond_br %1026, bb140, bb164, scope 162          // id: %1027

bb140:                                            // Preds: bb139
  br bb141(%956 : $Int), scope 162                // id: %1028

// %1029                                          // user: %1031
bb141(%1029 : $Int):                              // Preds: bb167 bb140
  %1030 = integer_literal $Builtin.Int64, 1, scope 162 // user: %1031
  br bb142(%1030 : $Builtin.Int64, %1029 : $Int, %921 : $Builtin.Int1), scope 162 // id: %1031

// %1032                                          // user: %1035
// %1033                                          // user: %1037
// %1034                                          // user: %1039
bb142(%1032 : $Builtin.Int64, %1033 : $Int, %1034 : $Builtin.Int1): // Preds: bb165 bb141
  %1035 = struct $Int (%1032 : $Builtin.Int64), scope 162 // user: %1037
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %1036 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // user: %1037
  %1037 = apply %1036(%1033, %1019, %1035) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // users: %1118, %1090, %1088, %1087, %1041, %1040, %1038
  debug_value %1037 : $_StringBuffer, scope 162   // id: %1038
  cond_br %1034, bb143, bb154, scope 162          // id: %1039

bb143:                                            // Preds: bb142
  debug_value %1037 : $_StringBuffer, scope 162   // id: %1040
  %1041 = struct_extract %1037 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %1047, %1046, %1043, %1042
  %1042 = struct_extract %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %1048, %1051
  debug_value %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1043
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1044 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %1045
  %1045 = apply %1044() : $@convention(thin) () -> Int, scope 162 // users: %1054, %1053
  debug_value %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1046
  debug_value %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1047
  switch_enum %1042 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb144, case #Optional.some!enumelt.1: bb145, scope 162 // id: %1048

bb144:                                            // Preds: bb143
  cond_fail %921 : $Builtin.Int1, scope 162       // id: %1049
  unreachable, scope 162                          // id: %1050

bb145:                                            // Preds: bb143
  %1051 = unchecked_enum_data %1042 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %1052
  %1052 = ref_to_raw_pointer %1051 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %1056
  %1053 = struct_extract %1045 : $Int, #Int._value, scope 162 // user: %1055
  debug_value %1045 : $Int, scope 162             // id: %1054
  %1055 = builtin "truncOrBitCast_Int64_Word"(%1053 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %1056
  %1056 = index_raw_pointer %1052 : $Builtin.RawPointer, %1055 : $Builtin.Word, scope 162 // user: %1062
  debug_value %957 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1057
  %1058 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1085, %1064, %1060
  %1059 = alloc_stack $UTF8, scope 162            // users: %1084, %1064, %1061
  store %957 to %1058 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1060
  store %966 to %1059 : $*UTF8, scope 162         // id: %1061
  br bb146(%1056 : $Builtin.RawPointer), scope 162 // id: %1062

// %1063                                          // users: %1081, %1079
bb146(%1063 : $Builtin.RawPointer):               // Preds: bb147 bb145
  %1064 = apply %968(%1058, %1059) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1065
  switch_enum %1064 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb147, case #UnicodeDecodingResult.emptyInput!enumelt: bb148, case #UnicodeDecodingResult.error!enumelt: bb153, scope 162 // id: %1065

// %1066                                          // users: %1071, %1070, %1069, %1068, %1067
bb147(%1066 : $UnicodeScalar):                    // Preds: bb146
  debug_value %1066 : $UnicodeScalar, scope 162   // id: %1067
  debug_value %1066 : $UnicodeScalar, scope 162   // id: %1068
  debug_value %1066 : $UnicodeScalar, scope 162   // id: %1069
  debug_value %1066 : $UnicodeScalar, scope 162   // id: %1070
  %1071 = struct_extract %1066 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %1073, %1072
  debug_value %1071 : $UInt32, scope 162          // id: %1072
  %1073 = struct_extract %1071 : $UInt32, #UInt32._value, scope 162 // user: %1074
  %1074 = builtin "u_to_u_checked_trunc_Int32_Int8"(%1073 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 162 // users: %1076, %1075
  %1075 = tuple_extract %1074 : $(Builtin.Int8, Builtin.Int1), 0, scope 162 // user: %1078
  %1076 = tuple_extract %1074 : $(Builtin.Int8, Builtin.Int1), 1, scope 162 // user: %1077
  cond_fail %1076 : $Builtin.Int1, scope 162      // id: %1077
  %1078 = struct $UInt8 (%1075 : $Builtin.Int8), scope 162 // user: %1080
  %1079 = pointer_to_address %1063 : $Builtin.RawPointer to [strict] $*UInt8, scope 162 // user: %1080
  store %1078 to %1079 : $*UInt8, scope 162       // id: %1080
  %1081 = index_raw_pointer %1063 : $Builtin.RawPointer, %943 : $Builtin.Word, scope 162 // user: %1082
  br bb146(%1081 : $Builtin.RawPointer), scope 162 // id: %1082

bb148:                                            // Preds: bb146
  br bb149, scope 162                             // id: %1083

bb149:                                            // Preds: bb153 bb148
  dealloc_stack %1059 : $*UTF8, scope 162         // id: %1084
  dealloc_stack %1058 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1085
  br bb150, scope 162                             // id: %1086

bb150:                                            // Preds: bb162 bb149
  debug_value %1037 : $_StringBuffer, scope 162   // id: %1087
  debug_value %1037 : $_StringBuffer, scope 162   // id: %1088
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %1089 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // user: %1090
  %1090 = apply %1089(%1037) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // users: %1115, %1110, %1111, %1112, %1091
  %1091 = struct $String (%1090 : $_StringCore), scope 162 // users: %1106, %1095, %1093
  debug_value_addr %8 : $*String, scope 199       // id: %1092
  debug_value %1091 : $String, scope 199          // id: %1093
  debug_value_addr %8 : $*String, scope 199       // id: %1094
  debug_value %1091 : $String, scope 199          // id: %1095
  %1096 = struct_element_addr %8 : $*String, #String._core, scope 199 // users: %1114, %1104, %1097
  %1097 = struct_element_addr %1096 : $*_StringCore, #_StringCore._countAndFlags, scope 199 // user: %1098
  %1098 = struct_element_addr %1097 : $*UInt, #UInt._value, scope 199 // user: %1099
  %1099 = load %1098 : $*Builtin.Int64, scope 199 // user: %1101
  %1100 = integer_literal $Builtin.Int64, 4611686018427387903, scope 199 // user: %1101
  %1101 = builtin "and_Int64"(%1099 : $Builtin.Int64, %1100 : $Builtin.Int64) : $Builtin.Int64, scope 199 // user: %1102
  %1102 = builtin "cmp_eq_Int64"(%1101 : $Builtin.Int64, %934 : $Builtin.Int64) : $Builtin.Int1, scope 199 // user: %1103
  cond_br %1102, bb151, bb152, scope 199          // id: %1103

bb151:                                            // Preds: bb150
  %1104 = struct_element_addr %1096 : $*_StringCore, #_StringCore._owner, scope 199 // user: %1105
  %1105 = load %1104 : $*Optional<AnyObject>, scope 199 // user: %1107
  store %1091 to %8 : $*String, scope 199         // id: %1106
  release_value %1105 : $Optional<AnyObject>, scope 162 // id: %1107
  br bb5, scope 162                               // id: %1108

bb152:                                            // Preds: bb150
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %1109 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 199 // user: %1114
  %1110 = struct_extract %1090 : $_StringCore, #_StringCore._owner, scope 199 // user: %1114
  %1111 = struct_extract %1090 : $_StringCore, #_StringCore._countAndFlags, scope 199 // user: %1113
  %1112 = struct_extract %1090 : $_StringCore, #_StringCore._baseAddress, scope 199 // user: %1114
  %1113 = struct_extract %1111 : $UInt, #UInt._value, scope 199 // user: %1114
  %1114 = apply %1109(%1112, %1113, %1110, %1096) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 199
  release_value %1090 : $_StringCore, scope 162   // id: %1115
  br bb5, scope 199                               // id: %1116

bb153:                                            // Preds: bb146
  br bb149, scope 162                             // id: %1117

bb154:                                            // Preds: bb142
  %1118 = struct_extract %1037 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %1124, %1123, %1120, %1119
  %1119 = struct_extract %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %1125, %1128
  debug_value %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1120
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1121 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %1122
  %1122 = apply %1121() : $@convention(thin) () -> Int, scope 162 // users: %1131, %1130
  debug_value %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1123
  debug_value %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1124
  switch_enum %1119 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb155, case #Optional.some!enumelt.1: bb156, scope 162 // id: %1125

bb155:                                            // Preds: bb154
  cond_fail %921 : $Builtin.Int1, scope 162       // id: %1126
  unreachable, scope 162                          // id: %1127

bb156:                                            // Preds: bb154
  %1128 = unchecked_enum_data %1119 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %1129
  %1129 = ref_to_raw_pointer %1128 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %1133
  %1130 = struct_extract %1122 : $Int, #Int._value, scope 162 // user: %1132
  debug_value %1122 : $Int, scope 162             // id: %1131
  %1132 = builtin "truncOrBitCast_Int64_Word"(%1130 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %1133
  %1133 = index_raw_pointer %1129 : $Builtin.RawPointer, %1132 : $Builtin.Word, scope 162 // user: %1139
  debug_value %957 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1134
  %1135 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1203, %1141, %1137
  %1136 = alloc_stack $UTF8, scope 162            // users: %1202, %1141, %1138
  store %957 to %1135 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1137
  store %966 to %1136 : $*UTF8, scope 162         // id: %1138
  br bb157(%1133 : $Builtin.RawPointer), scope 162 // id: %1139

// %1140                                          // users: %1183, %1179, %1164, %1160
bb157(%1140 : $Builtin.RawPointer):               // Preds: bb160 bb159 bb156
  %1141 = apply %968(%1135, %1136) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1142
  switch_enum %1141 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb158, case #UnicodeDecodingResult.emptyInput!enumelt: bb161, case #UnicodeDecodingResult.error!enumelt: bb163, scope 162 // id: %1142

// %1143                                          // users: %1148, %1147, %1146, %1145, %1144
bb158(%1143 : $UnicodeScalar):                    // Preds: bb157
  debug_value %1143 : $UnicodeScalar, scope 162   // id: %1144
  debug_value %1143 : $UnicodeScalar, scope 162   // id: %1145
  debug_value %1143 : $UnicodeScalar, scope 162   // id: %1146
  debug_value %1143 : $UnicodeScalar, scope 162   // id: %1147
  %1148 = struct_extract %1143 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %1151, %1149
  debug_value %1148 : $UInt32, scope 162          // id: %1149
  %1150 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1152
  %1151 = struct_extract %1148 : $UInt32, #UInt32._value, scope 162 // users: %1186, %1168, %1154, %1152
  %1152 = builtin "cmp_ule_Int32"(%1151 : $Builtin.Int32, %1150 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1153
  cond_br %1152, bb159, bb160, scope 162          // id: %1153

bb159:                                            // Preds: bb158
  %1154 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1151 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1156, %1155
  %1155 = tuple_extract %1154 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1158
  %1156 = tuple_extract %1154 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1157
  cond_fail %1156 : $Builtin.Int1, scope 162      // id: %1157
  %1158 = struct $UInt16 (%1155 : $Builtin.Int16), scope 162 // users: %1161, %1159
  debug_value %1158 : $UInt16, scope 162          // id: %1159
  %1160 = pointer_to_address %1140 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1161
  store %1158 to %1160 : $*UInt16, scope 162      // id: %1161
  %1162 = metatype $@thick UInt16.Type, scope 162 // user: %1163
  %1163 = builtin "strideof_nonzero"<UInt16>(%1162 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // user: %1164
  %1164 = index_raw_pointer %1140 : $Builtin.RawPointer, %1163 : $Builtin.Word, scope 162 // user: %1165
  br bb157(%1164 : $Builtin.RawPointer), scope 162 // id: %1165

bb160:                                            // Preds: bb158
  %1166 = integer_literal $Builtin.Int32, 55232, scope 162 // user: %1169
  %1167 = integer_literal $Builtin.Int32, 10, scope 162 // user: %1168
  %1168 = builtin "lshr_Int32"(%1151 : $Builtin.Int32, %1167 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %1169
  %1169 = builtin "uadd_with_overflow_Int32"(%1166 : $Builtin.Int32, %1168 : $Builtin.Int32, %921 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %1171, %1170
  %1170 = tuple_extract %1169 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %1173
  %1171 = tuple_extract %1169 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %1172
  cond_fail %1171 : $Builtin.Int1, scope 162      // id: %1172
  %1173 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1170 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1175, %1174
  %1174 = tuple_extract %1173 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1177
  %1175 = tuple_extract %1173 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1176
  cond_fail %1175 : $Builtin.Int1, scope 162      // id: %1176
  %1177 = struct $UInt16 (%1174 : $Builtin.Int16), scope 162 // users: %1180, %1178
  debug_value %1177 : $UInt16, scope 162          // id: %1178
  %1179 = pointer_to_address %1140 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1180
  store %1177 to %1179 : $*UInt16, scope 162      // id: %1180
  %1181 = metatype $@thick UInt16.Type, scope 162 // user: %1182
  %1182 = builtin "strideof_nonzero"<UInt16>(%1181 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // users: %1199, %1183
  %1183 = index_raw_pointer %1140 : $Builtin.RawPointer, %1182 : $Builtin.Word, scope 162 // users: %1199, %1197
  %1184 = integer_literal $Builtin.Int32, 56320, scope 162 // user: %1187
  %1185 = integer_literal $Builtin.Int32, 1023, scope 162 // user: %1186
  %1186 = builtin "and_Int32"(%1151 : $Builtin.Int32, %1185 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %1187
  %1187 = builtin "uadd_with_overflow_Int32"(%1184 : $Builtin.Int32, %1186 : $Builtin.Int32, %921 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %1189, %1188
  %1188 = tuple_extract %1187 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %1191
  %1189 = tuple_extract %1187 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %1190
  cond_fail %1189 : $Builtin.Int1, scope 162      // id: %1190
  %1191 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1188 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1193, %1192
  %1192 = tuple_extract %1191 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1195
  %1193 = tuple_extract %1191 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1194
  cond_fail %1193 : $Builtin.Int1, scope 162      // id: %1194
  %1195 = struct $UInt16 (%1192 : $Builtin.Int16), scope 162 // users: %1198, %1196
  debug_value %1195 : $UInt16, scope 162          // id: %1196
  %1197 = pointer_to_address %1183 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1198
  store %1195 to %1197 : $*UInt16, scope 162      // id: %1198
  %1199 = index_raw_pointer %1183 : $Builtin.RawPointer, %1182 : $Builtin.Word, scope 162 // user: %1200
  br bb157(%1199 : $Builtin.RawPointer), scope 162 // id: %1200

bb161:                                            // Preds: bb157
  br bb162, scope 162                             // id: %1201

bb162:                                            // Preds: bb163 bb161
  dealloc_stack %1136 : $*UTF8, scope 162         // id: %1202
  dealloc_stack %1135 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1203
  br bb150, scope 162                             // id: %1204

bb163:                                            // Preds: bb157
  br bb162, scope 162                             // id: %1205

bb164:                                            // Preds: bb139
  br bb165(%956 : $Int), scope 162                // id: %1206

// %1207                                          // user: %1209
bb165(%1207 : $Int):                              // Preds: bb168 bb164
  %1208 = integer_literal $Builtin.Int64, 2, scope 162 // user: %1209
  br bb142(%1208 : $Builtin.Int64, %1207 : $Int, %945 : $Builtin.Int1), scope 162 // id: %1209

bb166:                                            // Preds: bb138
  %1210 = struct_extract %1021 : $Bool, #Bool._value, scope 162 // user: %1211
  cond_br %1210, bb167, bb168, scope 162          // id: %1211

bb167:                                            // Preds: bb166
  br bb141(%1019 : $Int), scope 162               // id: %1212

bb168:                                            // Preds: bb166
  br bb165(%1019 : $Int), scope 162               // id: %1213

bb169:                                            // Preds: bb137
  cond_fail %921 : $Builtin.Int1, scope 162       // id: %1214
  unreachable, scope 162                          // id: %1215

bb170:                                            // Preds: bb125
  %1216 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 162 // user: %1217
  br bb137(%1216 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %1217

bb171:                                            // Preds: bb0
  %1218 = alloc_stack $Any, scope 162             // users: %1223, %1234, %1227, %1219
  copy_addr %0 to [initialization] %1218 : $*Any, scope 162 // id: %1219
  retain_value %9 : $String, scope 162            // id: %1220
  destroy_addr %0 : $*Any, scope 162              // id: %1221
  %1222 = alloc_stack $@thick Any.Type, scope 162 // users: %1223, %1233, %1225, %1224
  checked_cast_addr_br take_always Any in %1218 : $*Any to Any.Type in %1222 : $*@thick Any.Type, bb172, bb173, scope 162 // id: %1223

bb172:                                            // Preds: bb171
  %1224 = load %1222 : $*@thick Any.Type, scope 162 // users: %1230, %1226
  dealloc_stack %1222 : $*@thick Any.Type, scope 162 // id: %1225
  debug_value %1224 : $@thick Any.Type, scope 162 // id: %1226
  dealloc_stack %1218 : $*Any, scope 162          // id: %1227
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %1228 = function_ref @_TTSf4n_g_n___TTSg5P__SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 201 // user: %1230
  strong_retain %7 : $@box String, scope 162      // id: %1229
  %1230 = apply %1228(%1224, %7, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 201
  strong_release %7 : $@box String, scope 162     // id: %1231
  br bb5, scope 162                               // id: %1232

bb173:                                            // Preds: bb171
  dealloc_stack %1222 : $*@thick Any.Type, scope 162 // id: %1233
  dealloc_stack %1218 : $*Any, scope 162          // id: %1234
  // function_ref swift_OpaqueSummary
  %1235 = function_ref @swift_OpaqueSummary : $@convention(thin) (@thick Any.Type) -> Optional<UnsafePointer<Int8>>, scope 162 // user: %1236
  %1236 = apply %1235(%1) : $@convention(thin) (@thick Any.Type) -> Optional<UnsafePointer<Int8>>, scope 162 // user: %1237
  switch_enum %1236 : $Optional<UnsafePointer<Int8>>, case #Optional.some!enumelt.1: bb174, case #Optional.none!enumelt: bb268, scope 162 // id: %1237

// %1238                                          // users: %1542, %1415, %1248, %1247, %1243, %1241, %1240, %1239
bb174(%1238 : $UnsafePointer<Int8>):              // Preds: bb173
  debug_value %1238 : $UnsafePointer<Int8>, scope 162 // id: %1239
  debug_value %1238 : $UnsafePointer<Int8>, scope 162 // id: %1240
  debug_value %1238 : $UnsafePointer<Int8>, scope 162 // id: %1241
  // function_ref _swift_stdlib_strlen
  %1242 = function_ref @_swift_stdlib_strlen : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 162 // user: %1244
  %1243 = enum $ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>, #ImplicitlyUnwrappedOptional.some!enumelt.1, %1238 : $UnsafePointer<Int8>, scope 162 // user: %1244
  %1244 = apply %1242(%1243) : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 162 // users: %1543, %1416, %1265, %1258, %1255, %1252, %1249, %1246, %1245
  debug_value %1244 : $Int, scope 162             // id: %1245
  debug_value %1244 : $Int, scope 162             // id: %1246
  debug_value %1238 : $UnsafePointer<Int8>, scope 162 // id: %1247
  %1248 = struct_extract %1238 : $UnsafePointer<Int8>, #UnsafePointer._rawValue, scope 162 // users: %1544, %1417, %1273, %1253, %1251
  %1249 = struct_extract %1244 : $Int, #Int._value, scope 162 // users: %1270, %1260, %1250
  %1250 = builtin "truncOrBitCast_Int64_Word"(%1249 : $Builtin.Int64) : $Builtin.Word, scope 162 // users: %1544, %1417, %1251
  bind_memory %1248 : $Builtin.RawPointer, %1250 : $Builtin.Word to $*UInt8, scope 162 // id: %1251
  debug_value %1244 : $Int, scope 162             // id: %1252
  %1253 = struct $UnsafePointer<UInt8> (%1248 : $Builtin.RawPointer), scope 162 // users: %1264, %1256, %1254
  debug_value %1253 : $UnsafePointer<UInt8>, scope 162 // id: %1254
  debug_value %1244 : $Int, scope 162             // id: %1255
  %1256 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1253 : $UnsafePointer<UInt8>, scope 162 // users: %1276, %1257
  debug_value %1256 : $Optional<UnsafePointer<UInt8>>, scope 203 // id: %1257
  debug_value %1244 : $Int, scope 203             // id: %1258
  %1259 = integer_literal $Builtin.Int64, 0, scope 203 // users: %1430, %1292, %1347, %1279, %1260
  %1260 = builtin "cmp_sge_Int64"(%1249 : $Builtin.Int64, %1259 : $Builtin.Int64) : $Builtin.Int1, scope 203 // user: %1262
  %1261 = integer_literal $Builtin.Int1, -1, scope 203 // users: %1354, %1292, %1515, %1497, %1454, %1372, %1316, %1262
  %1262 = builtin "xor_Int1"(%1260 : $Builtin.Int1, %1261 : $Builtin.Int1) : $Builtin.Int1, scope 203 // user: %1263
  cond_fail %1262 : $Builtin.Int1, scope 203      // id: %1263
  debug_value %1253 : $UnsafePointer<UInt8>, scope 203 // id: %1264
  debug_value %1244 : $Int, scope 203             // id: %1265
  %1266 = metatype $@thick UInt8.Type, scope 203  // user: %1267
  %1267 = builtin "strideof_nonzero"<UInt8>(%1266 : $@thick UInt8.Type) : $Builtin.Word, scope 203 // users: %1404, %1268
  %1268 = builtin "zextOrBitCast_Word_Int64"(%1267 : $Builtin.Word) : $Builtin.Int64, scope 203 // user: %1270
  %1269 = integer_literal $Builtin.Int1, 0, scope 203 // users: %1537, %1321, %1310, %1270
  %1270 = builtin "smul_with_overflow_Int64"(%1249 : $Builtin.Int64, %1268 : $Builtin.Int64, %1269 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 203 // user: %1271
  %1271 = tuple_extract %1270 : $(Builtin.Int64, Builtin.Int1), 0, scope 203 // user: %1272
  %1272 = builtin "truncOrBitCast_Int64_Word"(%1271 : $Builtin.Int64) : $Builtin.Word, scope 203 // user: %1273
  %1273 = index_raw_pointer %1248 : $Builtin.RawPointer, %1272 : $Builtin.Word, scope 203 // user: %1274
  %1274 = struct $UnsafePointer<UInt8> (%1273 : $Builtin.RawPointer), scope 203 // user: %1275
  %1275 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1274 : $UnsafePointer<UInt8>, scope 203 // user: %1276
  %1276 = struct $UnsafeBufferPointer<UInt8> (%1256 : $Optional<UnsafePointer<UInt8>>, %1275 : $Optional<UnsafePointer<UInt8>>), scope 203 // users: %1280, %1278, %1277
  debug_value %1276 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %1277
  debug_value %1276 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %1278
  %1279 = struct $Int (%1259 : $Builtin.Int64), scope 162 // users: %1534, %1351, %1280
  %1280 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%1276 : $UnsafeBufferPointer<UInt8>, %1279 : $Int), scope 162 // users: %1465, %1462, %1383, %1380, %1284, %1281
  debug_value %1280 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1281
  %1282 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1339, %1295, %1284
  %1283 = alloc_stack $UTF8, scope 162            // users: %1338, %1295, %1290
  store %1280 to %1282 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1284
  %1285 = integer_literal $Builtin.Int32, 0, scope 162 // user: %1286
  %1286 = struct $UInt32 (%1285 : $Builtin.Int32), scope 162 // user: %1289
  %1287 = integer_literal $Builtin.Int8, 0, scope 162 // user: %1288
  %1288 = struct $UInt8 (%1287 : $Builtin.Int8), scope 162 // user: %1289
  %1289 = struct $UTF8 (%1286 : $UInt32, %1288 : $UInt8), scope 162 // users: %1466, %1384, %1290
  store %1289 to %1283 : $*UTF8, scope 162        // id: %1290
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %1291 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // users: %1469, %1387, %1295
  br bb175(%1259 : $Builtin.Int64, %1261 : $Builtin.Int1), scope 162 // id: %1292

// %1293                                          // users: %1332, %1316
// %1294                                          // users: %1331, %1330, %1333
bb175(%1293 : $Builtin.Int64, %1294 : $Builtin.Int1): // Preds: bb180 bb174
  %1295 = apply %1291(%1282, %1283) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1296
  switch_enum %1295 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb176, case #UnicodeDecodingResult.emptyInput!enumelt: bb186, case #UnicodeDecodingResult.error!enumelt: bb267, scope 162 // id: %1296

// %1297                                          // users: %1326, %1325, %1306, %1305, %1300, %1299, %1298
bb176(%1297 : $UnicodeScalar):                    // Preds: bb175
  debug_value %1297 : $UnicodeScalar, scope 162   // id: %1298
  debug_value %1297 : $UnicodeScalar, scope 162   // id: %1299
  %1300 = struct_extract %1297 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // user: %1302
  %1301 = integer_literal $Builtin.Int32, 127, scope 162 // user: %1303
  %1302 = struct_extract %1300 : $UInt32, #UInt32._value, scope 162 // users: %1328, %1308, %1303
  %1303 = builtin "cmp_ugt_Int32"(%1302 : $Builtin.Int32, %1301 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1304
  cond_br %1303, bb177, bb183, scope 162          // id: %1304

bb177:                                            // Preds: bb176
  debug_value %1297 : $UnicodeScalar, scope 162   // id: %1305
  debug_value %1297 : $UnicodeScalar, scope 162   // id: %1306
  %1307 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1308
  %1308 = builtin "cmp_ule_Int32"(%1302 : $Builtin.Int32, %1307 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1309
  cond_br %1308, bb178, bb181, scope 162          // id: %1309

bb178:                                            // Preds: bb177
  br bb179(%1269 : $Builtin.Int1), scope 162      // id: %1310

// %1311                                          // user: %1313
bb179(%1311 : $Builtin.Int1):                     // Preds: bb184 bb178
  %1312 = integer_literal $Builtin.Int64, 1, scope 162 // user: %1313
  br bb180(%1312 : $Builtin.Int64, %1311 : $Builtin.Int1), scope 162 // id: %1313

// %1314                                          // user: %1316
// %1315                                          // user: %1320
bb180(%1314 : $Builtin.Int64, %1315 : $Builtin.Int1): // Preds: bb182 bb179
  %1316 = builtin "sadd_with_overflow_Int64"(%1293 : $Builtin.Int64, %1314 : $Builtin.Int64, %1261 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 162 // users: %1318, %1317
  %1317 = tuple_extract %1316 : $(Builtin.Int64, Builtin.Int1), 0, scope 162 // user: %1320
  %1318 = tuple_extract %1316 : $(Builtin.Int64, Builtin.Int1), 1, scope 162 // user: %1319
  cond_fail %1318 : $Builtin.Int1, scope 162      // id: %1319
  br bb175(%1317 : $Builtin.Int64, %1315 : $Builtin.Int1), scope 162 // id: %1320

bb181:                                            // Preds: bb177
  br bb182(%1269 : $Builtin.Int1), scope 162      // id: %1321

// %1322                                          // user: %1324
bb182(%1322 : $Builtin.Int1):                     // Preds: bb185 bb181
  %1323 = integer_literal $Builtin.Int64, 2, scope 162 // user: %1324
  br bb180(%1323 : $Builtin.Int64, %1322 : $Builtin.Int1), scope 162 // id: %1324

bb183:                                            // Preds: bb176
  debug_value %1297 : $UnicodeScalar, scope 162   // id: %1325
  debug_value %1297 : $UnicodeScalar, scope 162   // id: %1326
  %1327 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1328
  %1328 = builtin "cmp_ule_Int32"(%1302 : $Builtin.Int32, %1327 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1329
  cond_br %1328, bb184, bb185, scope 162          // id: %1329

bb184:                                            // Preds: bb183
  br bb179(%1294 : $Builtin.Int1), scope 162      // id: %1330

bb185:                                            // Preds: bb183
  br bb182(%1294 : $Builtin.Int1), scope 162      // id: %1331

bb186:                                            // Preds: bb175
  %1332 = struct $Int (%1293 : $Builtin.Int64), scope 162 // user: %1334
  %1333 = struct $Bool (%1294 : $Builtin.Int1), scope 162 // user: %1334
  %1334 = tuple $(count: Int, isASCII: Bool) (%1332, %1333), scope 162 // user: %1335
  %1335 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %1334 : $(count: Int, isASCII: Bool), scope 162 // user: %1336
  br bb187(%1335 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %1336

// %1337                                          // user: %1340
bb187(%1337 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb267 bb186
  dealloc_stack %1283 : $*UTF8, scope 162         // id: %1338
  dealloc_stack %1282 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1339
  switch_enum %1337 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb188, case #Optional.none!enumelt: bb219, scope 162 // id: %1340

// %1341                                          // users: %1344, %1342
bb188(%1341 : $(count: Int, isASCII: Bool)):      // Preds: bb187
  %1342 = tuple_extract %1341 : $(count: Int, isASCII: Bool), 0, scope 162 // users: %1541, %1540, %1360, %1346, %1343
  debug_value %1342 : $Int, scope 162             // id: %1343
  %1344 = tuple_extract %1341 : $(count: Int, isASCII: Bool), 1, scope 162 // users: %1538, %1349, %1345
  debug_value %1344 : $Bool, scope 162            // id: %1345
  %1346 = struct_extract %1342 : $Int, #Int._value, scope 162 // user: %1347
  %1347 = builtin "cmp_sge_Int64"(%1259 : $Builtin.Int64, %1346 : $Builtin.Int64) : $Builtin.Int1, scope 162 // user: %1348
  cond_br %1347, bb189, bb216, scope 162          // id: %1348

bb189:                                            // Preds: bb188
  %1349 = struct_extract %1344 : $Bool, #Bool._value, scope 162 // user: %1350
  cond_br %1349, bb190, bb214, scope 162          // id: %1350

bb190:                                            // Preds: bb189
  br bb191(%1279 : $Int), scope 162               // id: %1351

// %1352                                          // user: %1354
bb191(%1352 : $Int):                              // Preds: bb217 bb190
  %1353 = integer_literal $Builtin.Int64, 1, scope 162 // user: %1354
  br bb192(%1353 : $Builtin.Int64, %1352 : $Int, %1261 : $Builtin.Int1), scope 162 // id: %1354

// %1355                                          // user: %1358
// %1356                                          // user: %1360
// %1357                                          // user: %1362
bb192(%1355 : $Builtin.Int64, %1356 : $Int, %1357 : $Builtin.Int1): // Preds: bb215 bb191
  %1358 = struct $Int (%1355 : $Builtin.Int64), scope 162 // user: %1360
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %1359 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // user: %1360
  %1360 = apply %1359(%1356, %1342, %1358) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // users: %1446, %1413, %1411, %1410, %1364, %1363, %1361
  debug_value %1360 : $_StringBuffer, scope 162   // id: %1361
  cond_br %1357, bb193, bb204, scope 162          // id: %1362

bb193:                                            // Preds: bb192
  debug_value %1360 : $_StringBuffer, scope 162   // id: %1363
  %1364 = struct_extract %1360 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %1370, %1369, %1366, %1365
  %1365 = struct_extract %1364 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %1371, %1374
  debug_value %1364 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1366
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1367 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %1368
  %1368 = apply %1367() : $@convention(thin) () -> Int, scope 162 // users: %1377, %1376
  debug_value %1364 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1369
  debug_value %1364 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1370
  switch_enum %1365 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb194, case #Optional.some!enumelt.1: bb195, scope 162 // id: %1371

bb194:                                            // Preds: bb193
  cond_fail %1261 : $Builtin.Int1, scope 162      // id: %1372
  unreachable, scope 162                          // id: %1373

bb195:                                            // Preds: bb193
  %1374 = unchecked_enum_data %1365 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %1375
  %1375 = ref_to_raw_pointer %1374 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %1379
  %1376 = struct_extract %1368 : $Int, #Int._value, scope 162 // user: %1378
  debug_value %1368 : $Int, scope 162             // id: %1377
  %1378 = builtin "truncOrBitCast_Int64_Word"(%1376 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %1379
  %1379 = index_raw_pointer %1375 : $Builtin.RawPointer, %1378 : $Builtin.Word, scope 162 // user: %1385
  debug_value %1280 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1380
  %1381 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1408, %1387, %1383
  %1382 = alloc_stack $UTF8, scope 162            // users: %1407, %1387, %1384
  store %1280 to %1381 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1383
  store %1289 to %1382 : $*UTF8, scope 162        // id: %1384
  br bb196(%1379 : $Builtin.RawPointer), scope 162 // id: %1385

// %1386                                          // users: %1404, %1402
bb196(%1386 : $Builtin.RawPointer):               // Preds: bb197 bb195
  %1387 = apply %1291(%1381, %1382) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1388
  switch_enum %1387 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb197, case #UnicodeDecodingResult.emptyInput!enumelt: bb198, case #UnicodeDecodingResult.error!enumelt: bb203, scope 162 // id: %1388

// %1389                                          // users: %1394, %1393, %1392, %1391, %1390
bb197(%1389 : $UnicodeScalar):                    // Preds: bb196
  debug_value %1389 : $UnicodeScalar, scope 162   // id: %1390
  debug_value %1389 : $UnicodeScalar, scope 162   // id: %1391
  debug_value %1389 : $UnicodeScalar, scope 162   // id: %1392
  debug_value %1389 : $UnicodeScalar, scope 162   // id: %1393
  %1394 = struct_extract %1389 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %1396, %1395
  debug_value %1394 : $UInt32, scope 162          // id: %1395
  %1396 = struct_extract %1394 : $UInt32, #UInt32._value, scope 162 // user: %1397
  %1397 = builtin "u_to_u_checked_trunc_Int32_Int8"(%1396 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 162 // users: %1399, %1398
  %1398 = tuple_extract %1397 : $(Builtin.Int8, Builtin.Int1), 0, scope 162 // user: %1401
  %1399 = tuple_extract %1397 : $(Builtin.Int8, Builtin.Int1), 1, scope 162 // user: %1400
  cond_fail %1399 : $Builtin.Int1, scope 162      // id: %1400
  %1401 = struct $UInt8 (%1398 : $Builtin.Int8), scope 162 // user: %1403
  %1402 = pointer_to_address %1386 : $Builtin.RawPointer to [strict] $*UInt8, scope 162 // user: %1403
  store %1401 to %1402 : $*UInt8, scope 162       // id: %1403
  %1404 = index_raw_pointer %1386 : $Builtin.RawPointer, %1267 : $Builtin.Word, scope 162 // user: %1405
  br bb196(%1404 : $Builtin.RawPointer), scope 162 // id: %1405

bb198:                                            // Preds: bb196
  br bb199, scope 162                             // id: %1406

bb199:                                            // Preds: bb203 bb198
  dealloc_stack %1382 : $*UTF8, scope 162         // id: %1407
  dealloc_stack %1381 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1408
  br bb200, scope 162                             // id: %1409

bb200:                                            // Preds: bb212 bb199
  debug_value %1360 : $_StringBuffer, scope 162   // id: %1410
  debug_value %1360 : $_StringBuffer, scope 162   // id: %1411
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %1412 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // user: %1413
  %1413 = apply %1412(%1360) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // users: %1443, %1438, %1439, %1440, %1414
  %1414 = struct $String (%1413 : $_StringCore), scope 162 // users: %1434, %1423, %1421, %1419, %1418
  debug_value %1238 : $UnsafePointer<Int8>, scope 162 // id: %1415
  debug_value %1244 : $Int, scope 162             // id: %1416
  bind_memory %1248 : $Builtin.RawPointer, %1250 : $Builtin.Word to $*Int8, scope 162 // id: %1417
  debug_value %1414 : $String, scope 162          // id: %1418
  debug_value %1414 : $String, scope 162          // id: %1419
  debug_value_addr %8 : $*String, scope 205       // id: %1420
  debug_value %1414 : $String, scope 205          // id: %1421
  debug_value_addr %8 : $*String, scope 205       // id: %1422
  debug_value %1414 : $String, scope 205          // id: %1423
  %1424 = struct_element_addr %8 : $*String, #String._core, scope 205 // users: %1442, %1432, %1425
  %1425 = struct_element_addr %1424 : $*_StringCore, #_StringCore._countAndFlags, scope 205 // user: %1426
  %1426 = struct_element_addr %1425 : $*UInt, #UInt._value, scope 205 // user: %1427
  %1427 = load %1426 : $*Builtin.Int64, scope 205 // user: %1429
  %1428 = integer_literal $Builtin.Int64, 4611686018427387903, scope 205 // user: %1429
  %1429 = builtin "and_Int64"(%1427 : $Builtin.Int64, %1428 : $Builtin.Int64) : $Builtin.Int64, scope 205 // user: %1430
  %1430 = builtin "cmp_eq_Int64"(%1429 : $Builtin.Int64, %1259 : $Builtin.Int64) : $Builtin.Int1, scope 205 // user: %1431
  cond_br %1430, bb201, bb202, scope 205          // id: %1431

bb201:                                            // Preds: bb200
  %1432 = struct_element_addr %1424 : $*_StringCore, #_StringCore._owner, scope 205 // user: %1433
  %1433 = load %1432 : $*Optional<AnyObject>, scope 205 // user: %1435
  store %1414 to %8 : $*String, scope 205         // id: %1434
  release_value %1433 : $Optional<AnyObject>, scope 162 // id: %1435
  br bb5, scope 162                               // id: %1436

bb202:                                            // Preds: bb200
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %1437 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 205 // user: %1442
  %1438 = struct_extract %1413 : $_StringCore, #_StringCore._owner, scope 205 // user: %1442
  %1439 = struct_extract %1413 : $_StringCore, #_StringCore._countAndFlags, scope 205 // user: %1441
  %1440 = struct_extract %1413 : $_StringCore, #_StringCore._baseAddress, scope 205 // user: %1442
  %1441 = struct_extract %1439 : $UInt, #UInt._value, scope 205 // user: %1442
  %1442 = apply %1437(%1440, %1441, %1438, %1424) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 205
  release_value %1413 : $_StringCore, scope 162   // id: %1443
  br bb5, scope 205                               // id: %1444

bb203:                                            // Preds: bb196
  br bb199, scope 162                             // id: %1445

bb204:                                            // Preds: bb192
  %1446 = struct_extract %1360 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %1452, %1451, %1448, %1447
  %1447 = struct_extract %1446 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %1453, %1456
  debug_value %1446 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1448
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1449 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %1450
  %1450 = apply %1449() : $@convention(thin) () -> Int, scope 162 // users: %1459, %1458
  debug_value %1446 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1451
  debug_value %1446 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1452
  switch_enum %1447 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb205, case #Optional.some!enumelt.1: bb206, scope 162 // id: %1453

bb205:                                            // Preds: bb204
  cond_fail %1261 : $Builtin.Int1, scope 162      // id: %1454
  unreachable, scope 162                          // id: %1455

bb206:                                            // Preds: bb204
  %1456 = unchecked_enum_data %1447 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %1457
  %1457 = ref_to_raw_pointer %1456 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %1461
  %1458 = struct_extract %1450 : $Int, #Int._value, scope 162 // user: %1460
  debug_value %1450 : $Int, scope 162             // id: %1459
  %1460 = builtin "truncOrBitCast_Int64_Word"(%1458 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %1461
  %1461 = index_raw_pointer %1457 : $Builtin.RawPointer, %1460 : $Builtin.Word, scope 162 // user: %1467
  debug_value %1280 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1462
  %1463 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1531, %1469, %1465
  %1464 = alloc_stack $UTF8, scope 162            // users: %1530, %1469, %1466
  store %1280 to %1463 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1465
  store %1289 to %1464 : $*UTF8, scope 162        // id: %1466
  br bb207(%1461 : $Builtin.RawPointer), scope 162 // id: %1467

// %1468                                          // users: %1511, %1507, %1492, %1488
bb207(%1468 : $Builtin.RawPointer):               // Preds: bb210 bb209 bb206
  %1469 = apply %1291(%1463, %1464) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1470
  switch_enum %1469 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb208, case #UnicodeDecodingResult.emptyInput!enumelt: bb211, case #UnicodeDecodingResult.error!enumelt: bb213, scope 162 // id: %1470

// %1471                                          // users: %1476, %1475, %1474, %1473, %1472
bb208(%1471 : $UnicodeScalar):                    // Preds: bb207
  debug_value %1471 : $UnicodeScalar, scope 162   // id: %1472
  debug_value %1471 : $UnicodeScalar, scope 162   // id: %1473
  debug_value %1471 : $UnicodeScalar, scope 162   // id: %1474
  debug_value %1471 : $UnicodeScalar, scope 162   // id: %1475
  %1476 = struct_extract %1471 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %1479, %1477
  debug_value %1476 : $UInt32, scope 162          // id: %1477
  %1478 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1480
  %1479 = struct_extract %1476 : $UInt32, #UInt32._value, scope 162 // users: %1514, %1496, %1482, %1480
  %1480 = builtin "cmp_ule_Int32"(%1479 : $Builtin.Int32, %1478 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1481
  cond_br %1480, bb209, bb210, scope 162          // id: %1481

bb209:                                            // Preds: bb208
  %1482 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1479 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1484, %1483
  %1483 = tuple_extract %1482 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1486
  %1484 = tuple_extract %1482 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1485
  cond_fail %1484 : $Builtin.Int1, scope 162      // id: %1485
  %1486 = struct $UInt16 (%1483 : $Builtin.Int16), scope 162 // users: %1489, %1487
  debug_value %1486 : $UInt16, scope 162          // id: %1487
  %1488 = pointer_to_address %1468 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1489
  store %1486 to %1488 : $*UInt16, scope 162      // id: %1489
  %1490 = metatype $@thick UInt16.Type, scope 162 // user: %1491
  %1491 = builtin "strideof_nonzero"<UInt16>(%1490 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // user: %1492
  %1492 = index_raw_pointer %1468 : $Builtin.RawPointer, %1491 : $Builtin.Word, scope 162 // user: %1493
  br bb207(%1492 : $Builtin.RawPointer), scope 162 // id: %1493

bb210:                                            // Preds: bb208
  %1494 = integer_literal $Builtin.Int32, 55232, scope 162 // user: %1497
  %1495 = integer_literal $Builtin.Int32, 10, scope 162 // user: %1496
  %1496 = builtin "lshr_Int32"(%1479 : $Builtin.Int32, %1495 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %1497
  %1497 = builtin "uadd_with_overflow_Int32"(%1494 : $Builtin.Int32, %1496 : $Builtin.Int32, %1261 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %1499, %1498
  %1498 = tuple_extract %1497 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %1501
  %1499 = tuple_extract %1497 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %1500
  cond_fail %1499 : $Builtin.Int1, scope 162      // id: %1500
  %1501 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1498 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1503, %1502
  %1502 = tuple_extract %1501 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1505
  %1503 = tuple_extract %1501 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1504
  cond_fail %1503 : $Builtin.Int1, scope 162      // id: %1504
  %1505 = struct $UInt16 (%1502 : $Builtin.Int16), scope 162 // users: %1508, %1506
  debug_value %1505 : $UInt16, scope 162          // id: %1506
  %1507 = pointer_to_address %1468 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1508
  store %1505 to %1507 : $*UInt16, scope 162      // id: %1508
  %1509 = metatype $@thick UInt16.Type, scope 162 // user: %1510
  %1510 = builtin "strideof_nonzero"<UInt16>(%1509 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // users: %1527, %1511
  %1511 = index_raw_pointer %1468 : $Builtin.RawPointer, %1510 : $Builtin.Word, scope 162 // users: %1527, %1525
  %1512 = integer_literal $Builtin.Int32, 56320, scope 162 // user: %1515
  %1513 = integer_literal $Builtin.Int32, 1023, scope 162 // user: %1514
  %1514 = builtin "and_Int32"(%1479 : $Builtin.Int32, %1513 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %1515
  %1515 = builtin "uadd_with_overflow_Int32"(%1512 : $Builtin.Int32, %1514 : $Builtin.Int32, %1261 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %1517, %1516
  %1516 = tuple_extract %1515 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %1519
  %1517 = tuple_extract %1515 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %1518
  cond_fail %1517 : $Builtin.Int1, scope 162      // id: %1518
  %1519 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1516 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1521, %1520
  %1520 = tuple_extract %1519 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1523
  %1521 = tuple_extract %1519 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1522
  cond_fail %1521 : $Builtin.Int1, scope 162      // id: %1522
  %1523 = struct $UInt16 (%1520 : $Builtin.Int16), scope 162 // users: %1526, %1524
  debug_value %1523 : $UInt16, scope 162          // id: %1524
  %1525 = pointer_to_address %1511 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1526
  store %1523 to %1525 : $*UInt16, scope 162      // id: %1526
  %1527 = index_raw_pointer %1511 : $Builtin.RawPointer, %1510 : $Builtin.Word, scope 162 // user: %1528
  br bb207(%1527 : $Builtin.RawPointer), scope 162 // id: %1528

bb211:                                            // Preds: bb207
  br bb212, scope 162                             // id: %1529

bb212:                                            // Preds: bb213 bb211
  dealloc_stack %1464 : $*UTF8, scope 162         // id: %1530
  dealloc_stack %1463 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1531
  br bb200, scope 162                             // id: %1532

bb213:                                            // Preds: bb207
  br bb212, scope 162                             // id: %1533

bb214:                                            // Preds: bb189
  br bb215(%1279 : $Int), scope 162               // id: %1534

// %1535                                          // user: %1537
bb215(%1535 : $Int):                              // Preds: bb218 bb214
  %1536 = integer_literal $Builtin.Int64, 2, scope 162 // user: %1537
  br bb192(%1536 : $Builtin.Int64, %1535 : $Int, %1269 : $Builtin.Int1), scope 162 // id: %1537

bb216:                                            // Preds: bb188
  %1538 = struct_extract %1344 : $Bool, #Bool._value, scope 162 // user: %1539
  cond_br %1538, bb217, bb218, scope 162          // id: %1539

bb217:                                            // Preds: bb216
  br bb191(%1342 : $Int), scope 162               // id: %1540

bb218:                                            // Preds: bb216
  br bb215(%1342 : $Int), scope 162               // id: %1541

bb219:                                            // Preds: bb187
  debug_value %1238 : $UnsafePointer<Int8>, scope 162 // id: %1542
  debug_value %1244 : $Int, scope 162             // id: %1543
  bind_memory %1248 : $Builtin.RawPointer, %1250 : $Builtin.Word to $*Int8, scope 162 // id: %1544
  br bb220, scope 162                             // id: %1545

bb220:                                            // Preds: bb268 bb219
  %1546 = integer_literal $Builtin.Int1, -1, scope 162 // users: %1655, %1593, %1838, %1811, %1793, %1750, %1673, %1617, %1561, %1547
  %1547 = struct $Bool (%1546 : $Builtin.Int1), scope 162 // users: %1550, %1548
  debug_value %1547 : $Bool, scope 162            // id: %1548
  // function_ref swift_getTypeName
  %1549 = function_ref @swift_getTypeName : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 162 // user: %1550
  %1550 = apply %1549(%1, %1547) : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 162 // users: %1552, %1551
  %1551 = tuple_extract %1550 : $(UnsafePointer<UInt8>, Int), 0, scope 162 // users: %1565, %1563, %1555, %1553
  %1552 = tuple_extract %1550 : $(UnsafePointer<UInt8>, Int), 1, scope 162 // users: %1564, %1559, %1557, %1554
  debug_value %1551 : $UnsafePointer<UInt8>, scope 162 // id: %1553
  debug_value %1552 : $Int, scope 162             // id: %1554
  %1555 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1551 : $UnsafePointer<UInt8>, scope 162 // users: %1576, %1556
  debug_value %1555 : $Optional<UnsafePointer<UInt8>>, scope 207 // id: %1556
  debug_value %1552 : $Int, scope 207             // id: %1557
  %1558 = integer_literal $Builtin.Int64, 0, scope 207 // users: %1726, %1593, %1648, %1580, %1560
  %1559 = struct_extract %1552 : $Int, #Int._value, scope 207 // users: %1570, %1560
  %1560 = builtin "cmp_sge_Int64"(%1559 : $Builtin.Int64, %1558 : $Builtin.Int64) : $Builtin.Int1, scope 207 // user: %1561
  %1561 = builtin "xor_Int1"(%1560 : $Builtin.Int1, %1546 : $Builtin.Int1) : $Builtin.Int1, scope 207 // user: %1562
  cond_fail %1561 : $Builtin.Int1, scope 207      // id: %1562
  debug_value %1551 : $UnsafePointer<UInt8>, scope 207 // id: %1563
  debug_value %1552 : $Int, scope 207             // id: %1564
  %1565 = struct_extract %1551 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 207 // user: %1573
  %1566 = metatype $@thick UInt8.Type, scope 207  // user: %1567
  %1567 = builtin "strideof_nonzero"<UInt8>(%1566 : $@thick UInt8.Type) : $Builtin.Word, scope 207 // users: %1705, %1568
  %1568 = builtin "zextOrBitCast_Word_Int64"(%1567 : $Builtin.Word) : $Builtin.Int64, scope 207 // user: %1570
  %1569 = integer_literal $Builtin.Int1, 0, scope 207 // users: %1833, %1622, %1611, %1570
  %1570 = builtin "smul_with_overflow_Int64"(%1559 : $Builtin.Int64, %1568 : $Builtin.Int64, %1569 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 207 // user: %1571
  %1571 = tuple_extract %1570 : $(Builtin.Int64, Builtin.Int1), 0, scope 207 // user: %1572
  %1572 = builtin "truncOrBitCast_Int64_Word"(%1571 : $Builtin.Int64) : $Builtin.Word, scope 207 // user: %1573
  %1573 = index_raw_pointer %1565 : $Builtin.RawPointer, %1572 : $Builtin.Word, scope 207 // user: %1574
  %1574 = struct $UnsafePointer<UInt8> (%1573 : $Builtin.RawPointer), scope 207 // user: %1575
  %1575 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1574 : $UnsafePointer<UInt8>, scope 207 // user: %1576
  %1576 = struct $UnsafeBufferPointer<UInt8> (%1555 : $Optional<UnsafePointer<UInt8>>, %1575 : $Optional<UnsafePointer<UInt8>>), scope 207 // users: %1581, %1579, %1578, %1577
  debug_value %1576 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %1577
  debug_value %1576 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %1578
  debug_value %1576 : $UnsafeBufferPointer<UInt8>, scope 162 // id: %1579
  %1580 = struct $Int (%1558 : $Builtin.Int64), scope 162 // users: %1830, %1652, %1581
  %1581 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%1576 : $UnsafeBufferPointer<UInt8>, %1580 : $Int), scope 162 // users: %1761, %1758, %1684, %1681, %1585, %1582
  debug_value %1581 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1582
  %1583 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1640, %1596, %1585
  %1584 = alloc_stack $UTF8, scope 162            // users: %1639, %1596, %1591
  store %1581 to %1583 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1585
  %1586 = integer_literal $Builtin.Int32, 0, scope 162 // user: %1587
  %1587 = struct $UInt32 (%1586 : $Builtin.Int32), scope 162 // user: %1590
  %1588 = integer_literal $Builtin.Int8, 0, scope 162 // user: %1589
  %1589 = struct $UInt8 (%1588 : $Builtin.Int8), scope 162 // user: %1590
  %1590 = struct $UTF8 (%1587 : $UInt32, %1589 : $UInt8), scope 162 // users: %1762, %1685, %1591
  store %1590 to %1584 : $*UTF8, scope 162        // id: %1591
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %1592 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // users: %1765, %1688, %1596
  br bb221(%1558 : $Builtin.Int64, %1546 : $Builtin.Int1), scope 162 // id: %1593

// %1594                                          // users: %1633, %1617
// %1595                                          // users: %1632, %1631, %1634
bb221(%1594 : $Builtin.Int64, %1595 : $Builtin.Int1): // Preds: bb226 bb220
  %1596 = apply %1592(%1583, %1584) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1597
  switch_enum %1596 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb222, case #UnicodeDecodingResult.emptyInput!enumelt: bb232, case #UnicodeDecodingResult.error!enumelt: bb266, scope 162 // id: %1597

// %1598                                          // users: %1627, %1626, %1607, %1606, %1601, %1600, %1599
bb222(%1598 : $UnicodeScalar):                    // Preds: bb221
  debug_value %1598 : $UnicodeScalar, scope 162   // id: %1599
  debug_value %1598 : $UnicodeScalar, scope 162   // id: %1600
  %1601 = struct_extract %1598 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // user: %1603
  %1602 = integer_literal $Builtin.Int32, 127, scope 162 // user: %1604
  %1603 = struct_extract %1601 : $UInt32, #UInt32._value, scope 162 // users: %1629, %1609, %1604
  %1604 = builtin "cmp_ugt_Int32"(%1603 : $Builtin.Int32, %1602 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1605
  cond_br %1604, bb223, bb229, scope 162          // id: %1605

bb223:                                            // Preds: bb222
  debug_value %1598 : $UnicodeScalar, scope 162   // id: %1606
  debug_value %1598 : $UnicodeScalar, scope 162   // id: %1607
  %1608 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1609
  %1609 = builtin "cmp_ule_Int32"(%1603 : $Builtin.Int32, %1608 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1610
  cond_br %1609, bb224, bb227, scope 162          // id: %1610

bb224:                                            // Preds: bb223
  br bb225(%1569 : $Builtin.Int1), scope 162      // id: %1611

// %1612                                          // user: %1614
bb225(%1612 : $Builtin.Int1):                     // Preds: bb230 bb224
  %1613 = integer_literal $Builtin.Int64, 1, scope 162 // user: %1614
  br bb226(%1613 : $Builtin.Int64, %1612 : $Builtin.Int1), scope 162 // id: %1614

// %1615                                          // user: %1617
// %1616                                          // user: %1621
bb226(%1615 : $Builtin.Int64, %1616 : $Builtin.Int1): // Preds: bb228 bb225
  %1617 = builtin "sadd_with_overflow_Int64"(%1594 : $Builtin.Int64, %1615 : $Builtin.Int64, %1546 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 162 // users: %1619, %1618
  %1618 = tuple_extract %1617 : $(Builtin.Int64, Builtin.Int1), 0, scope 162 // user: %1621
  %1619 = tuple_extract %1617 : $(Builtin.Int64, Builtin.Int1), 1, scope 162 // user: %1620
  cond_fail %1619 : $Builtin.Int1, scope 162      // id: %1620
  br bb221(%1618 : $Builtin.Int64, %1616 : $Builtin.Int1), scope 162 // id: %1621

bb227:                                            // Preds: bb223
  br bb228(%1569 : $Builtin.Int1), scope 162      // id: %1622

// %1623                                          // user: %1625
bb228(%1623 : $Builtin.Int1):                     // Preds: bb231 bb227
  %1624 = integer_literal $Builtin.Int64, 2, scope 162 // user: %1625
  br bb226(%1624 : $Builtin.Int64, %1623 : $Builtin.Int1), scope 162 // id: %1625

bb229:                                            // Preds: bb222
  debug_value %1598 : $UnicodeScalar, scope 162   // id: %1626
  debug_value %1598 : $UnicodeScalar, scope 162   // id: %1627
  %1628 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1629
  %1629 = builtin "cmp_ule_Int32"(%1603 : $Builtin.Int32, %1628 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1630
  cond_br %1629, bb230, bb231, scope 162          // id: %1630

bb230:                                            // Preds: bb229
  br bb225(%1595 : $Builtin.Int1), scope 162      // id: %1631

bb231:                                            // Preds: bb229
  br bb228(%1595 : $Builtin.Int1), scope 162      // id: %1632

bb232:                                            // Preds: bb221
  %1633 = struct $Int (%1594 : $Builtin.Int64), scope 162 // user: %1635
  %1634 = struct $Bool (%1595 : $Builtin.Int1), scope 162 // user: %1635
  %1635 = tuple $(count: Int, isASCII: Bool) (%1633, %1634), scope 162 // user: %1636
  %1636 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %1635 : $(count: Int, isASCII: Bool), scope 162 // user: %1637
  br bb233(%1636 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %1637

// %1638                                          // user: %1641
bb233(%1638 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb266 bb232
  dealloc_stack %1584 : $*UTF8, scope 162         // id: %1639
  dealloc_stack %1583 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1640
  switch_enum %1638 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb234, case #Optional.none!enumelt: bb265, scope 162 // id: %1641

// %1642                                          // users: %1645, %1643
bb234(%1642 : $(count: Int, isASCII: Bool)):      // Preds: bb233
  %1643 = tuple_extract %1642 : $(count: Int, isASCII: Bool), 0, scope 162 // users: %1837, %1836, %1661, %1647, %1644
  debug_value %1643 : $Int, scope 162             // id: %1644
  %1645 = tuple_extract %1642 : $(count: Int, isASCII: Bool), 1, scope 162 // users: %1834, %1650, %1646
  debug_value %1645 : $Bool, scope 162            // id: %1646
  %1647 = struct_extract %1643 : $Int, #Int._value, scope 162 // user: %1648
  %1648 = builtin "cmp_sge_Int64"(%1558 : $Builtin.Int64, %1647 : $Builtin.Int64) : $Builtin.Int1, scope 162 // user: %1649
  cond_br %1648, bb235, bb262, scope 162          // id: %1649

bb235:                                            // Preds: bb234
  %1650 = struct_extract %1645 : $Bool, #Bool._value, scope 162 // user: %1651
  cond_br %1650, bb236, bb260, scope 162          // id: %1651

bb236:                                            // Preds: bb235
  br bb237(%1580 : $Int), scope 162               // id: %1652

// %1653                                          // user: %1655
bb237(%1653 : $Int):                              // Preds: bb263 bb236
  %1654 = integer_literal $Builtin.Int64, 1, scope 162 // user: %1655
  br bb238(%1654 : $Builtin.Int64, %1653 : $Int, %1546 : $Builtin.Int1), scope 162 // id: %1655

// %1656                                          // user: %1659
// %1657                                          // user: %1661
// %1658                                          // user: %1663
bb238(%1656 : $Builtin.Int64, %1657 : $Int, %1658 : $Builtin.Int1): // Preds: bb261 bb237
  %1659 = struct $Int (%1656 : $Builtin.Int64), scope 162 // user: %1661
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %1660 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // user: %1661
  %1661 = apply %1660(%1657, %1643, %1659) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 162 // users: %1742, %1714, %1712, %1711, %1665, %1664, %1662
  debug_value %1661 : $_StringBuffer, scope 162   // id: %1662
  cond_br %1658, bb239, bb250, scope 162          // id: %1663

bb239:                                            // Preds: bb238
  debug_value %1661 : $_StringBuffer, scope 162   // id: %1664
  %1665 = struct_extract %1661 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %1671, %1670, %1667, %1666
  %1666 = struct_extract %1665 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %1672, %1675
  debug_value %1665 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1667
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1668 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %1669
  %1669 = apply %1668() : $@convention(thin) () -> Int, scope 162 // users: %1678, %1677
  debug_value %1665 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1670
  debug_value %1665 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1671
  switch_enum %1666 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb240, case #Optional.some!enumelt.1: bb241, scope 162 // id: %1672

bb240:                                            // Preds: bb239
  cond_fail %1546 : $Builtin.Int1, scope 162      // id: %1673
  unreachable, scope 162                          // id: %1674

bb241:                                            // Preds: bb239
  %1675 = unchecked_enum_data %1666 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %1676
  %1676 = ref_to_raw_pointer %1675 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %1680
  %1677 = struct_extract %1669 : $Int, #Int._value, scope 162 // user: %1679
  debug_value %1669 : $Int, scope 162             // id: %1678
  %1679 = builtin "truncOrBitCast_Int64_Word"(%1677 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %1680
  %1680 = index_raw_pointer %1676 : $Builtin.RawPointer, %1679 : $Builtin.Word, scope 162 // user: %1686
  debug_value %1581 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1681
  %1682 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1709, %1688, %1684
  %1683 = alloc_stack $UTF8, scope 162            // users: %1708, %1688, %1685
  store %1581 to %1682 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1684
  store %1590 to %1683 : $*UTF8, scope 162        // id: %1685
  br bb242(%1680 : $Builtin.RawPointer), scope 162 // id: %1686

// %1687                                          // users: %1705, %1703
bb242(%1687 : $Builtin.RawPointer):               // Preds: bb243 bb241
  %1688 = apply %1592(%1682, %1683) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1689
  switch_enum %1688 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb243, case #UnicodeDecodingResult.emptyInput!enumelt: bb244, case #UnicodeDecodingResult.error!enumelt: bb249, scope 162 // id: %1689

// %1690                                          // users: %1695, %1694, %1693, %1692, %1691
bb243(%1690 : $UnicodeScalar):                    // Preds: bb242
  debug_value %1690 : $UnicodeScalar, scope 162   // id: %1691
  debug_value %1690 : $UnicodeScalar, scope 162   // id: %1692
  debug_value %1690 : $UnicodeScalar, scope 162   // id: %1693
  debug_value %1690 : $UnicodeScalar, scope 162   // id: %1694
  %1695 = struct_extract %1690 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %1697, %1696
  debug_value %1695 : $UInt32, scope 162          // id: %1696
  %1697 = struct_extract %1695 : $UInt32, #UInt32._value, scope 162 // user: %1698
  %1698 = builtin "u_to_u_checked_trunc_Int32_Int8"(%1697 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 162 // users: %1700, %1699
  %1699 = tuple_extract %1698 : $(Builtin.Int8, Builtin.Int1), 0, scope 162 // user: %1702
  %1700 = tuple_extract %1698 : $(Builtin.Int8, Builtin.Int1), 1, scope 162 // user: %1701
  cond_fail %1700 : $Builtin.Int1, scope 162      // id: %1701
  %1702 = struct $UInt8 (%1699 : $Builtin.Int8), scope 162 // user: %1704
  %1703 = pointer_to_address %1687 : $Builtin.RawPointer to [strict] $*UInt8, scope 162 // user: %1704
  store %1702 to %1703 : $*UInt8, scope 162       // id: %1704
  %1705 = index_raw_pointer %1687 : $Builtin.RawPointer, %1567 : $Builtin.Word, scope 162 // user: %1706
  br bb242(%1705 : $Builtin.RawPointer), scope 162 // id: %1706

bb244:                                            // Preds: bb242
  br bb245, scope 162                             // id: %1707

bb245:                                            // Preds: bb249 bb244
  dealloc_stack %1683 : $*UTF8, scope 162         // id: %1708
  dealloc_stack %1682 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1709
  br bb246, scope 162                             // id: %1710

bb246:                                            // Preds: bb258 bb245
  debug_value %1661 : $_StringBuffer, scope 162   // id: %1711
  debug_value %1661 : $_StringBuffer, scope 162   // id: %1712
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %1713 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // user: %1714
  %1714 = apply %1713(%1661) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 162 // users: %1739, %1734, %1735, %1736, %1715
  %1715 = struct $String (%1714 : $_StringCore), scope 162 // users: %1730, %1719, %1717
  debug_value_addr %8 : $*String, scope 209       // id: %1716
  debug_value %1715 : $String, scope 209          // id: %1717
  debug_value_addr %8 : $*String, scope 209       // id: %1718
  debug_value %1715 : $String, scope 209          // id: %1719
  %1720 = struct_element_addr %8 : $*String, #String._core, scope 209 // users: %1738, %1728, %1721
  %1721 = struct_element_addr %1720 : $*_StringCore, #_StringCore._countAndFlags, scope 209 // user: %1722
  %1722 = struct_element_addr %1721 : $*UInt, #UInt._value, scope 209 // user: %1723
  %1723 = load %1722 : $*Builtin.Int64, scope 209 // user: %1725
  %1724 = integer_literal $Builtin.Int64, 4611686018427387903, scope 209 // user: %1725
  %1725 = builtin "and_Int64"(%1723 : $Builtin.Int64, %1724 : $Builtin.Int64) : $Builtin.Int64, scope 209 // user: %1726
  %1726 = builtin "cmp_eq_Int64"(%1725 : $Builtin.Int64, %1558 : $Builtin.Int64) : $Builtin.Int1, scope 209 // user: %1727
  cond_br %1726, bb247, bb248, scope 209          // id: %1727

bb247:                                            // Preds: bb246
  %1728 = struct_element_addr %1720 : $*_StringCore, #_StringCore._owner, scope 209 // user: %1729
  %1729 = load %1728 : $*Optional<AnyObject>, scope 209 // user: %1731
  store %1715 to %8 : $*String, scope 209         // id: %1730
  release_value %1729 : $Optional<AnyObject>, scope 162 // id: %1731
  br bb5, scope 162                               // id: %1732

bb248:                                            // Preds: bb246
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %1733 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 209 // user: %1738
  %1734 = struct_extract %1714 : $_StringCore, #_StringCore._owner, scope 209 // user: %1738
  %1735 = struct_extract %1714 : $_StringCore, #_StringCore._countAndFlags, scope 209 // user: %1737
  %1736 = struct_extract %1714 : $_StringCore, #_StringCore._baseAddress, scope 209 // user: %1738
  %1737 = struct_extract %1735 : $UInt, #UInt._value, scope 209 // user: %1738
  %1738 = apply %1733(%1736, %1737, %1734, %1720) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 209
  release_value %1714 : $_StringCore, scope 162   // id: %1739
  br bb5, scope 209                               // id: %1740

bb249:                                            // Preds: bb242
  br bb245, scope 162                             // id: %1741

bb250:                                            // Preds: bb238
  %1742 = struct_extract %1661 : $_StringBuffer, #_StringBuffer._storage, scope 162 // users: %1748, %1747, %1744, %1743
  %1743 = struct_extract %1742 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 162 // users: %1749, %1752
  debug_value %1742 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1744
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1745 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 162 // user: %1746
  %1746 = apply %1745() : $@convention(thin) () -> Int, scope 162 // users: %1755, %1754
  debug_value %1742 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1747
  debug_value %1742 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 162 // id: %1748
  switch_enum %1743 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb251, case #Optional.some!enumelt.1: bb252, scope 162 // id: %1749

bb251:                                            // Preds: bb250
  cond_fail %1546 : $Builtin.Int1, scope 162      // id: %1750
  unreachable, scope 162                          // id: %1751

bb252:                                            // Preds: bb250
  %1752 = unchecked_enum_data %1743 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 162 // user: %1753
  %1753 = ref_to_raw_pointer %1752 : $Builtin.NativeObject to $Builtin.RawPointer, scope 162 // user: %1757
  %1754 = struct_extract %1746 : $Int, #Int._value, scope 162 // user: %1756
  debug_value %1746 : $Int, scope 162             // id: %1755
  %1756 = builtin "truncOrBitCast_Int64_Word"(%1754 : $Builtin.Int64) : $Builtin.Word, scope 162 // user: %1757
  %1757 = index_raw_pointer %1753 : $Builtin.RawPointer, %1756 : $Builtin.Word, scope 162 // user: %1763
  debug_value %1581 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1758
  %1759 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // users: %1827, %1765, %1761
  %1760 = alloc_stack $UTF8, scope 162            // users: %1826, %1765, %1762
  store %1581 to %1759 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1761
  store %1590 to %1760 : $*UTF8, scope 162        // id: %1762
  br bb253(%1757 : $Builtin.RawPointer), scope 162 // id: %1763

// %1764                                          // users: %1807, %1803, %1788, %1784
bb253(%1764 : $Builtin.RawPointer):               // Preds: bb256 bb255 bb252
  %1765 = apply %1592(%1759, %1760) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 162 // user: %1766
  switch_enum %1765 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb254, case #UnicodeDecodingResult.emptyInput!enumelt: bb257, case #UnicodeDecodingResult.error!enumelt: bb259, scope 162 // id: %1766

// %1767                                          // users: %1772, %1771, %1770, %1769, %1768
bb254(%1767 : $UnicodeScalar):                    // Preds: bb253
  debug_value %1767 : $UnicodeScalar, scope 162   // id: %1768
  debug_value %1767 : $UnicodeScalar, scope 162   // id: %1769
  debug_value %1767 : $UnicodeScalar, scope 162   // id: %1770
  debug_value %1767 : $UnicodeScalar, scope 162   // id: %1771
  %1772 = struct_extract %1767 : $UnicodeScalar, #UnicodeScalar._value, scope 162 // users: %1775, %1773
  debug_value %1772 : $UInt32, scope 162          // id: %1773
  %1774 = integer_literal $Builtin.Int32, 65535, scope 162 // user: %1776
  %1775 = struct_extract %1772 : $UInt32, #UInt32._value, scope 162 // users: %1810, %1792, %1778, %1776
  %1776 = builtin "cmp_ule_Int32"(%1775 : $Builtin.Int32, %1774 : $Builtin.Int32) : $Builtin.Int1, scope 162 // user: %1777
  cond_br %1776, bb255, bb256, scope 162          // id: %1777

bb255:                                            // Preds: bb254
  %1778 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1775 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1780, %1779
  %1779 = tuple_extract %1778 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1782
  %1780 = tuple_extract %1778 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1781
  cond_fail %1780 : $Builtin.Int1, scope 162      // id: %1781
  %1782 = struct $UInt16 (%1779 : $Builtin.Int16), scope 162 // users: %1785, %1783
  debug_value %1782 : $UInt16, scope 162          // id: %1783
  %1784 = pointer_to_address %1764 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1785
  store %1782 to %1784 : $*UInt16, scope 162      // id: %1785
  %1786 = metatype $@thick UInt16.Type, scope 162 // user: %1787
  %1787 = builtin "strideof_nonzero"<UInt16>(%1786 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // user: %1788
  %1788 = index_raw_pointer %1764 : $Builtin.RawPointer, %1787 : $Builtin.Word, scope 162 // user: %1789
  br bb253(%1788 : $Builtin.RawPointer), scope 162 // id: %1789

bb256:                                            // Preds: bb254
  %1790 = integer_literal $Builtin.Int32, 55232, scope 162 // user: %1793
  %1791 = integer_literal $Builtin.Int32, 10, scope 162 // user: %1792
  %1792 = builtin "lshr_Int32"(%1775 : $Builtin.Int32, %1791 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %1793
  %1793 = builtin "uadd_with_overflow_Int32"(%1790 : $Builtin.Int32, %1792 : $Builtin.Int32, %1546 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %1795, %1794
  %1794 = tuple_extract %1793 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %1797
  %1795 = tuple_extract %1793 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %1796
  cond_fail %1795 : $Builtin.Int1, scope 162      // id: %1796
  %1797 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1794 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1799, %1798
  %1798 = tuple_extract %1797 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1801
  %1799 = tuple_extract %1797 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1800
  cond_fail %1799 : $Builtin.Int1, scope 162      // id: %1800
  %1801 = struct $UInt16 (%1798 : $Builtin.Int16), scope 162 // users: %1804, %1802
  debug_value %1801 : $UInt16, scope 162          // id: %1802
  %1803 = pointer_to_address %1764 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1804
  store %1801 to %1803 : $*UInt16, scope 162      // id: %1804
  %1805 = metatype $@thick UInt16.Type, scope 162 // user: %1806
  %1806 = builtin "strideof_nonzero"<UInt16>(%1805 : $@thick UInt16.Type) : $Builtin.Word, scope 162 // users: %1823, %1807
  %1807 = index_raw_pointer %1764 : $Builtin.RawPointer, %1806 : $Builtin.Word, scope 162 // users: %1823, %1821
  %1808 = integer_literal $Builtin.Int32, 56320, scope 162 // user: %1811
  %1809 = integer_literal $Builtin.Int32, 1023, scope 162 // user: %1810
  %1810 = builtin "and_Int32"(%1775 : $Builtin.Int32, %1809 : $Builtin.Int32) : $Builtin.Int32, scope 162 // user: %1811
  %1811 = builtin "uadd_with_overflow_Int32"(%1808 : $Builtin.Int32, %1810 : $Builtin.Int32, %1546 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 162 // users: %1813, %1812
  %1812 = tuple_extract %1811 : $(Builtin.Int32, Builtin.Int1), 0, scope 162 // user: %1815
  %1813 = tuple_extract %1811 : $(Builtin.Int32, Builtin.Int1), 1, scope 162 // user: %1814
  cond_fail %1813 : $Builtin.Int1, scope 162      // id: %1814
  %1815 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1812 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 162 // users: %1817, %1816
  %1816 = tuple_extract %1815 : $(Builtin.Int16, Builtin.Int1), 0, scope 162 // user: %1819
  %1817 = tuple_extract %1815 : $(Builtin.Int16, Builtin.Int1), 1, scope 162 // user: %1818
  cond_fail %1817 : $Builtin.Int1, scope 162      // id: %1818
  %1819 = struct $UInt16 (%1816 : $Builtin.Int16), scope 162 // users: %1822, %1820
  debug_value %1819 : $UInt16, scope 162          // id: %1820
  %1821 = pointer_to_address %1807 : $Builtin.RawPointer to [strict] $*UInt16, scope 162 // user: %1822
  store %1819 to %1821 : $*UInt16, scope 162      // id: %1822
  %1823 = index_raw_pointer %1807 : $Builtin.RawPointer, %1806 : $Builtin.Word, scope 162 // user: %1824
  br bb253(%1823 : $Builtin.RawPointer), scope 162 // id: %1824

bb257:                                            // Preds: bb253
  br bb258, scope 162                             // id: %1825

bb258:                                            // Preds: bb259 bb257
  dealloc_stack %1760 : $*UTF8, scope 162         // id: %1826
  dealloc_stack %1759 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 162 // id: %1827
  br bb246, scope 162                             // id: %1828

bb259:                                            // Preds: bb253
  br bb258, scope 162                             // id: %1829

bb260:                                            // Preds: bb235
  br bb261(%1580 : $Int), scope 162               // id: %1830

// %1831                                          // user: %1833
bb261(%1831 : $Int):                              // Preds: bb264 bb260
  %1832 = integer_literal $Builtin.Int64, 2, scope 162 // user: %1833
  br bb238(%1832 : $Builtin.Int64, %1831 : $Int, %1569 : $Builtin.Int1), scope 162 // id: %1833

bb262:                                            // Preds: bb234
  %1834 = struct_extract %1645 : $Bool, #Bool._value, scope 162 // user: %1835
  cond_br %1834, bb263, bb264, scope 162          // id: %1835

bb263:                                            // Preds: bb262
  br bb237(%1643 : $Int), scope 162               // id: %1836

bb264:                                            // Preds: bb262
  br bb261(%1643 : $Int), scope 162               // id: %1837

bb265:                                            // Preds: bb233
  cond_fail %1546 : $Builtin.Int1, scope 162      // id: %1838
  unreachable, scope 162                          // id: %1839

bb266:                                            // Preds: bb221
  %1840 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 162 // user: %1841
  br bb233(%1840 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %1841

bb267:                                            // Preds: bb175
  %1842 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 162 // user: %1843
  br bb187(%1842 : $Optional<(count: Int, isASCII: Bool)>), scope 162 // id: %1843

bb268:                                            // Preds: bb173
  br bb220, scope 162                             // id: %1844

bb269:                                            // Preds: bb2
  %1845 = class_method %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, #_AnyCollectionBox._first!getter.1 : <Element> (_AnyCollectionBox<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 162 // user: %1847
  retain_value %9 : $String, scope 162            // id: %1846
  %1847 = apply %1845<(label: Optional<String>, value: Any)>(%18, %2) : $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 162
  switch_enum_addr %18 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: bb4, case #Optional.none!enumelt: bb6, scope 162 // id: %1848

bb270:                                            // Preds: bb10
  %1849 = class_method %112 : $_AnySequenceBox<(label: Optional<String>, value: Any)>, #_AnySequenceBox._makeIterator!1 : <Element> (_AnySequenceBox<Element>) -> () -> AnyIterator<Element> , $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 162 // user: %1851
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %1850
  %1851 = apply %1849<(label: Optional<String>, value: Any)>(%112) : $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 162 // users: %1864, %194, %138, %1862, %1858, %1857
  strong_release %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %1852
  %1853 = alloc_stack $Optional<(Optional<String>, Any)>, scope 162 // users: %221, %193, %153, %150, %147, %1854
  %1854 = init_enum_data_addr %1853 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 162 // users: %1856, %1855
  %1855 = tuple_element_addr %1854 : $*(Optional<String>, Any), 0, scope 162 // user: %145
  %1856 = tuple_element_addr %1854 : $*(Optional<String>, Any), 1, scope 162 // user: %146
  %1857 = struct_extract %1851 : $AnyIterator<(label: Optional<String>, value: Any)>, #AnyIterator._box, scope 162 // users: %128, %1863, %1859
  debug_value %1851 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %1858
  %1859 = class_method %1857 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, #_AnyIteratorBoxBase.next!1 : <Element> (_AnyIteratorBoxBase<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 162 // user: %1863
  %1860 = integer_literal $Builtin.Int1, 0, scope 162 // users: %164, %150, %1865
  br bb12(%77 : $Builtin.Int1), scope 162         // id: %1861

bb271:                                            // Preds: bb12
  retain_value %1851 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %1862
  %1863 = apply %1859<(label: Optional<String>, value: Any)>(%127, %1857) : $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 162
  release_value %1851 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %1864
  %1865 = select_enum_addr %127 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: %77, case #Optional.none!enumelt: %1860 : $Builtin.Int1, scope 162 // user: %1866
  cond_br %1865, bb14, bb25, scope 162            // id: %1866

bb272:                                            // Preds: bb29
  %1867 = class_method %262 : $_AnySequenceBox<(label: Optional<String>, value: Any)>, #_AnySequenceBox._makeIterator!1 : <Element> (_AnySequenceBox<Element>) -> () -> AnyIterator<Element> , $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 162 // user: %1869
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %1868
  %1869 = apply %1867<(label: Optional<String>, value: Any)>(%262) : $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 162 // users: %1882, %407, %288, %1880, %1876, %1875
  strong_release %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 162 // id: %1870
  %1871 = alloc_stack $Optional<(Optional<String>, Any)>, scope 162 // users: %434, %406, %303, %300, %297, %1872
  %1872 = init_enum_data_addr %1871 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 162 // users: %1874, %1873
  %1873 = tuple_element_addr %1872 : $*(Optional<String>, Any), 0, scope 162 // user: %295
  %1874 = tuple_element_addr %1872 : $*(Optional<String>, Any), 1, scope 162 // user: %296
  %1875 = struct_extract %1869 : $AnyIterator<(label: Optional<String>, value: Any)>, #AnyIterator._box, scope 162 // users: %278, %1881, %1877
  debug_value %1869 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %1876
  %1877 = class_method %1875 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, #_AnyIteratorBoxBase.next!1 : <Element> (_AnyIteratorBoxBase<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 162 // user: %1881
  %1878 = integer_literal $Builtin.Int1, 0, scope 162 // users: %369, %300, %1883
  br bb31(%229 : $Builtin.Int1), scope 162        // id: %1879

bb273:                                            // Preds: bb31
  retain_value %1869 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %1880
  %1881 = apply %1877<(label: Optional<String>, value: Any)>(%277, %1875) : $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 162
  release_value %1869 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 162 // id: %1882
  %1883 = select_enum_addr %277 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: %229, case #Optional.none!enumelt: %1878 : $Builtin.Int1, scope 162 // user: %1884
  cond_br %1883, bb33, bb53, scope 162            // id: %1884

bb274:                                            // Preds: bb89
  %1885 = class_method %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, #_AnyCollectionBox._first!getter.1 : <Element> (_AnyCollectionBox<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 162 // user: %1886
  %1886 = apply %1885<(label: Optional<String>, value: Any)>(%686, %2) : $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 162
  switch_enum_addr %686 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: bb91, case #Optional.none!enumelt: bb103, scope 162 // id: %1887
}

sil_scope 210 {  parent @_TTSf4n_g_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> () }
sil_scope 211 {  parent 210 }
sil_scope 212 {  parent 157 inlined_at 211 }
sil_scope 213 {  parent 210 }
sil_scope 214 {  parent 52 inlined_at 213 }

// specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
sil shared @_TTSf4n_g_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> () {
// %0                                             // users: %10, %7, %3
// %1                                             // user: %4
// %2                                             // users: %10, %8, %6
bb0(%0 : $@thick Any.Type, %1 : $@box String, %2 : $Bool):
  debug_value %0 : $@thick Any.Type, scope 210    // id: %3
  %4 = project_box %1 : $@box String, scope 210   // users: %191, %181, %179, %177, %5
  debug_value_addr %4 : $*String, scope 210       // id: %5
  debug_value %2 : $Bool, scope 210               // id: %6
  debug_value %0 : $@thick Any.Type, scope 210    // id: %7
  debug_value %2 : $Bool, scope 210               // id: %8
  // function_ref swift_getTypeName
  %9 = function_ref @swift_getTypeName : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 210 // user: %10
  %10 = apply %9(%0, %2) : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 210 // users: %12, %11
  %11 = tuple_extract %10 : $(UnsafePointer<UInt8>, Int), 0, scope 210 // users: %26, %24, %15, %13
  %12 = tuple_extract %10 : $(UnsafePointer<UInt8>, Int), 1, scope 210 // users: %25, %19, %17, %14
  debug_value %11 : $UnsafePointer<UInt8>, scope 210 // id: %13
  debug_value %12 : $Int, scope 210               // id: %14
  %15 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %11 : $UnsafePointer<UInt8>, scope 210 // users: %37, %16
  debug_value %15 : $Optional<UnsafePointer<UInt8>>, scope 212 // id: %16
  debug_value %12 : $Int, scope 212               // id: %17
  %18 = integer_literal $Builtin.Int64, 0, scope 212 // users: %187, %54, %109, %41, %20
  %19 = struct_extract %12 : $Int, #Int._value, scope 212 // users: %31, %20
  %20 = builtin "cmp_sge_Int64"(%19 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1, scope 212 // user: %22
  %21 = integer_literal $Builtin.Int1, -1, scope 212 // users: %116, %54, %301, %274, %256, %213, %134, %78, %22
  %22 = builtin "xor_Int1"(%20 : $Builtin.Int1, %21 : $Builtin.Int1) : $Builtin.Int1, scope 212 // user: %23
  cond_fail %22 : $Builtin.Int1, scope 212        // id: %23
  debug_value %11 : $UnsafePointer<UInt8>, scope 212 // id: %24
  debug_value %12 : $Int, scope 212               // id: %25
  %26 = struct_extract %11 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 212 // user: %34
  %27 = metatype $@thick UInt8.Type, scope 212    // user: %28
  %28 = builtin "strideof_nonzero"<UInt8>(%27 : $@thick UInt8.Type) : $Builtin.Word, scope 212 // users: %166, %29
  %29 = builtin "zextOrBitCast_Word_Int64"(%28 : $Builtin.Word) : $Builtin.Int64, scope 212 // user: %31
  %30 = integer_literal $Builtin.Int1, 0, scope 212 // users: %296, %83, %72, %31
  %31 = builtin "smul_with_overflow_Int64"(%19 : $Builtin.Int64, %29 : $Builtin.Int64, %30 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 212 // user: %32
  %32 = tuple_extract %31 : $(Builtin.Int64, Builtin.Int1), 0, scope 212 // user: %33
  %33 = builtin "truncOrBitCast_Int64_Word"(%32 : $Builtin.Int64) : $Builtin.Word, scope 212 // user: %34
  %34 = index_raw_pointer %26 : $Builtin.RawPointer, %33 : $Builtin.Word, scope 212 // user: %35
  %35 = struct $UnsafePointer<UInt8> (%34 : $Builtin.RawPointer), scope 212 // user: %36
  %36 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %35 : $UnsafePointer<UInt8>, scope 212 // user: %37
  %37 = struct $UnsafeBufferPointer<UInt8> (%15 : $Optional<UnsafePointer<UInt8>>, %36 : $Optional<UnsafePointer<UInt8>>), scope 212 // users: %42, %40, %39, %38
  debug_value %37 : $UnsafeBufferPointer<UInt8>, scope 210 // id: %38
  debug_value %37 : $UnsafeBufferPointer<UInt8>, scope 210 // id: %39
  debug_value %37 : $UnsafeBufferPointer<UInt8>, scope 210 // id: %40
  %41 = struct $Int (%18 : $Builtin.Int64), scope 210 // users: %293, %113, %42
  %42 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%37 : $UnsafeBufferPointer<UInt8>, %41 : $Int), scope 210 // users: %224, %221, %145, %142, %46, %43
  debug_value %42 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %43
  %44 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // users: %101, %57, %46
  %45 = alloc_stack $UTF8, scope 210              // users: %100, %57, %52
  store %42 to %44 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %46
  %47 = integer_literal $Builtin.Int32, 0, scope 210 // user: %48
  %48 = struct $UInt32 (%47 : $Builtin.Int32), scope 210 // user: %51
  %49 = integer_literal $Builtin.Int8, 0, scope 210 // user: %50
  %50 = struct $UInt8 (%49 : $Builtin.Int8), scope 210 // user: %51
  %51 = struct $UTF8 (%48 : $UInt32, %50 : $UInt8), scope 210 // users: %225, %146, %52
  store %51 to %45 : $*UTF8, scope 210            // id: %52
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %53 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 210 // users: %228, %149, %57
  br bb1(%18 : $Builtin.Int64, %21 : $Builtin.Int1), scope 210 // id: %54

// %55                                            // users: %94, %78
// %56                                            // users: %93, %92, %95
bb1(%55 : $Builtin.Int64, %56 : $Builtin.Int1):   // Preds: bb6 bb0
  %57 = apply %53(%44, %45) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 210 // user: %58
  switch_enum %57 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb2, case #UnicodeDecodingResult.emptyInput!enumelt: bb12, case #UnicodeDecodingResult.error!enumelt: bb47, scope 210 // id: %58

// %59                                            // users: %88, %87, %68, %67, %62, %61, %60
bb2(%59 : $UnicodeScalar):                        // Preds: bb1
  debug_value %59 : $UnicodeScalar, scope 210     // id: %60
  debug_value %59 : $UnicodeScalar, scope 210     // id: %61
  %62 = struct_extract %59 : $UnicodeScalar, #UnicodeScalar._value, scope 210 // user: %64
  %63 = integer_literal $Builtin.Int32, 127, scope 210 // user: %65
  %64 = struct_extract %62 : $UInt32, #UInt32._value, scope 210 // users: %90, %70, %65
  %65 = builtin "cmp_ugt_Int32"(%64 : $Builtin.Int32, %63 : $Builtin.Int32) : $Builtin.Int1, scope 210 // user: %66
  cond_br %65, bb3, bb9, scope 210                // id: %66

bb3:                                              // Preds: bb2
  debug_value %59 : $UnicodeScalar, scope 210     // id: %67
  debug_value %59 : $UnicodeScalar, scope 210     // id: %68
  %69 = integer_literal $Builtin.Int32, 65535, scope 210 // user: %70
  %70 = builtin "cmp_ule_Int32"(%64 : $Builtin.Int32, %69 : $Builtin.Int32) : $Builtin.Int1, scope 210 // user: %71
  cond_br %70, bb4, bb7, scope 210                // id: %71

bb4:                                              // Preds: bb3
  br bb5(%30 : $Builtin.Int1), scope 210          // id: %72

// %73                                            // user: %75
bb5(%73 : $Builtin.Int1):                         // Preds: bb10 bb4
  %74 = integer_literal $Builtin.Int64, 1, scope 210 // user: %75
  br bb6(%74 : $Builtin.Int64, %73 : $Builtin.Int1), scope 210 // id: %75

// %76                                            // user: %78
// %77                                            // user: %82
bb6(%76 : $Builtin.Int64, %77 : $Builtin.Int1):   // Preds: bb8 bb5
  %78 = builtin "sadd_with_overflow_Int64"(%55 : $Builtin.Int64, %76 : $Builtin.Int64, %21 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 210 // users: %80, %79
  %79 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 0, scope 210 // user: %82
  %80 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 1, scope 210 // user: %81
  cond_fail %80 : $Builtin.Int1, scope 210        // id: %81
  br bb1(%79 : $Builtin.Int64, %77 : $Builtin.Int1), scope 210 // id: %82

bb7:                                              // Preds: bb3
  br bb8(%30 : $Builtin.Int1), scope 210          // id: %83

// %84                                            // user: %86
bb8(%84 : $Builtin.Int1):                         // Preds: bb11 bb7
  %85 = integer_literal $Builtin.Int64, 2, scope 210 // user: %86
  br bb6(%85 : $Builtin.Int64, %84 : $Builtin.Int1), scope 210 // id: %86

bb9:                                              // Preds: bb2
  debug_value %59 : $UnicodeScalar, scope 210     // id: %87
  debug_value %59 : $UnicodeScalar, scope 210     // id: %88
  %89 = integer_literal $Builtin.Int32, 65535, scope 210 // user: %90
  %90 = builtin "cmp_ule_Int32"(%64 : $Builtin.Int32, %89 : $Builtin.Int32) : $Builtin.Int1, scope 210 // user: %91
  cond_br %90, bb10, bb11, scope 210              // id: %91

bb10:                                             // Preds: bb9
  br bb5(%56 : $Builtin.Int1), scope 210          // id: %92

bb11:                                             // Preds: bb9
  br bb8(%56 : $Builtin.Int1), scope 210          // id: %93

bb12:                                             // Preds: bb1
  %94 = struct $Int (%55 : $Builtin.Int64), scope 210 // user: %96
  %95 = struct $Bool (%56 : $Builtin.Int1), scope 210 // user: %96
  %96 = tuple $(count: Int, isASCII: Bool) (%94, %95), scope 210 // user: %97
  %97 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %96 : $(count: Int, isASCII: Bool), scope 210 // user: %98
  br bb13(%97 : $Optional<(count: Int, isASCII: Bool)>), scope 210 // id: %98

// %99                                            // user: %102
bb13(%99 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb47 bb12
  dealloc_stack %45 : $*UTF8, scope 210           // id: %100
  dealloc_stack %44 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %101
  switch_enum %99 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb14, case #Optional.none!enumelt: bb46, scope 210 // id: %102

// %103                                           // users: %106, %104
bb14(%103 : $(count: Int, isASCII: Bool)):        // Preds: bb13
  %104 = tuple_extract %103 : $(count: Int, isASCII: Bool), 0, scope 210 // users: %300, %299, %122, %108, %105
  debug_value %104 : $Int, scope 210              // id: %105
  %106 = tuple_extract %103 : $(count: Int, isASCII: Bool), 1, scope 210 // users: %297, %111, %107
  debug_value %106 : $Bool, scope 210             // id: %107
  %108 = struct_extract %104 : $Int, #Int._value, scope 210 // user: %109
  %109 = builtin "cmp_sge_Int64"(%18 : $Builtin.Int64, %108 : $Builtin.Int64) : $Builtin.Int1, scope 210 // user: %110
  cond_br %109, bb15, bb43, scope 210             // id: %110

bb15:                                             // Preds: bb14
  %111 = struct_extract %106 : $Bool, #Bool._value, scope 210 // user: %112
  cond_br %111, bb16, bb41, scope 210             // id: %112

bb16:                                             // Preds: bb15
  br bb17(%41 : $Int), scope 210                  // id: %113

// %114                                           // user: %116
bb17(%114 : $Int):                                // Preds: bb44 bb16
  %115 = integer_literal $Builtin.Int64, 1, scope 210 // user: %116
  br bb18(%115 : $Builtin.Int64, %114 : $Int, %21 : $Builtin.Int1), scope 210 // id: %116

// %117                                           // user: %120
// %118                                           // user: %122
// %119                                           // user: %124
bb18(%117 : $Builtin.Int64, %118 : $Int, %119 : $Builtin.Int1): // Preds: bb42 bb17
  %120 = struct $Int (%117 : $Builtin.Int64), scope 210 // user: %122
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %121 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 210 // user: %122
  %122 = apply %121(%118, %104, %120) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 210 // users: %205, %175, %173, %172, %126, %125, %123
  debug_value %122 : $_StringBuffer, scope 210    // id: %123
  cond_br %119, bb19, bb31, scope 210             // id: %124

bb19:                                             // Preds: bb18
  debug_value %122 : $_StringBuffer, scope 210    // id: %125
  %126 = struct_extract %122 : $_StringBuffer, #_StringBuffer._storage, scope 210 // users: %132, %131, %128, %127
  %127 = struct_extract %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 210 // users: %133, %136
  debug_value %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 210 // id: %128
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %129 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 210 // user: %130
  %130 = apply %129() : $@convention(thin) () -> Int, scope 210 // users: %139, %138
  debug_value %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 210 // id: %131
  debug_value %126 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 210 // id: %132
  switch_enum %127 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb20, case #Optional.some!enumelt.1: bb21, scope 210 // id: %133

bb20:                                             // Preds: bb19
  cond_fail %21 : $Builtin.Int1, scope 210        // id: %134
  unreachable, scope 210                          // id: %135

bb21:                                             // Preds: bb19
  %136 = unchecked_enum_data %127 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 210 // user: %137
  %137 = ref_to_raw_pointer %136 : $Builtin.NativeObject to $Builtin.RawPointer, scope 210 // user: %141
  %138 = struct_extract %130 : $Int, #Int._value, scope 210 // user: %140
  debug_value %130 : $Int, scope 210              // id: %139
  %140 = builtin "truncOrBitCast_Int64_Word"(%138 : $Builtin.Int64) : $Builtin.Word, scope 210 // user: %141
  %141 = index_raw_pointer %137 : $Builtin.RawPointer, %140 : $Builtin.Word, scope 210 // user: %147
  debug_value %42 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %142
  %143 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // users: %170, %149, %145
  %144 = alloc_stack $UTF8, scope 210             // users: %169, %149, %146
  store %42 to %143 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %145
  store %51 to %144 : $*UTF8, scope 210           // id: %146
  br bb22(%141 : $Builtin.RawPointer), scope 210  // id: %147

// %148                                           // users: %166, %164
bb22(%148 : $Builtin.RawPointer):                 // Preds: bb23 bb21
  %149 = apply %53(%143, %144) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 210 // user: %150
  switch_enum %149 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb23, case #UnicodeDecodingResult.emptyInput!enumelt: bb24, case #UnicodeDecodingResult.error!enumelt: bb30, scope 210 // id: %150

// %151                                           // users: %156, %155, %154, %153, %152
bb23(%151 : $UnicodeScalar):                      // Preds: bb22
  debug_value %151 : $UnicodeScalar, scope 210    // id: %152
  debug_value %151 : $UnicodeScalar, scope 210    // id: %153
  debug_value %151 : $UnicodeScalar, scope 210    // id: %154
  debug_value %151 : $UnicodeScalar, scope 210    // id: %155
  %156 = struct_extract %151 : $UnicodeScalar, #UnicodeScalar._value, scope 210 // users: %158, %157
  debug_value %156 : $UInt32, scope 210           // id: %157
  %158 = struct_extract %156 : $UInt32, #UInt32._value, scope 210 // user: %159
  %159 = builtin "u_to_u_checked_trunc_Int32_Int8"(%158 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 210 // users: %161, %160
  %160 = tuple_extract %159 : $(Builtin.Int8, Builtin.Int1), 0, scope 210 // user: %163
  %161 = tuple_extract %159 : $(Builtin.Int8, Builtin.Int1), 1, scope 210 // user: %162
  cond_fail %161 : $Builtin.Int1, scope 210       // id: %162
  %163 = struct $UInt8 (%160 : $Builtin.Int8), scope 210 // user: %165
  %164 = pointer_to_address %148 : $Builtin.RawPointer to [strict] $*UInt8, scope 210 // user: %165
  store %163 to %164 : $*UInt8, scope 210         // id: %165
  %166 = index_raw_pointer %148 : $Builtin.RawPointer, %28 : $Builtin.Word, scope 210 // user: %167
  br bb22(%166 : $Builtin.RawPointer), scope 210  // id: %167

bb24:                                             // Preds: bb22
  br bb25, scope 210                              // id: %168

bb25:                                             // Preds: bb30 bb24
  dealloc_stack %144 : $*UTF8, scope 210          // id: %169
  dealloc_stack %143 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %170
  br bb26, scope 210                              // id: %171

bb26:                                             // Preds: bb39 bb25
  debug_value %122 : $_StringBuffer, scope 210    // id: %172
  debug_value %122 : $_StringBuffer, scope 210    // id: %173
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %174 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 210 // user: %175
  %175 = apply %174(%122) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 210 // users: %200, %195, %196, %197, %176
  %176 = struct $String (%175 : $_StringCore), scope 210 // users: %191, %180, %178
  debug_value_addr %4 : $*String, scope 214       // id: %177
  debug_value %176 : $String, scope 214           // id: %178
  debug_value_addr %4 : $*String, scope 214       // id: %179
  debug_value %176 : $String, scope 214           // id: %180
  %181 = struct_element_addr %4 : $*String, #String._core, scope 214 // users: %199, %189, %182
  %182 = struct_element_addr %181 : $*_StringCore, #_StringCore._countAndFlags, scope 214 // user: %183
  %183 = struct_element_addr %182 : $*UInt, #UInt._value, scope 214 // user: %184
  %184 = load %183 : $*Builtin.Int64, scope 214   // user: %186
  %185 = integer_literal $Builtin.Int64, 4611686018427387903, scope 214 // user: %186
  %186 = builtin "and_Int64"(%184 : $Builtin.Int64, %185 : $Builtin.Int64) : $Builtin.Int64, scope 214 // user: %187
  %187 = builtin "cmp_eq_Int64"(%186 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1, scope 214 // user: %188
  cond_br %187, bb27, bb28, scope 214             // id: %188

bb27:                                             // Preds: bb26
  %189 = struct_element_addr %181 : $*_StringCore, #_StringCore._owner, scope 214 // user: %190
  %190 = load %189 : $*Optional<AnyObject>, scope 214 // user: %192
  store %176 to %4 : $*String, scope 214          // id: %191
  release_value %190 : $Optional<AnyObject>, scope 210 // id: %192
  br bb29, scope 214                              // id: %193

bb28:                                             // Preds: bb26
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %194 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 214 // user: %199
  %195 = struct_extract %175 : $_StringCore, #_StringCore._owner, scope 214 // user: %199
  %196 = struct_extract %175 : $_StringCore, #_StringCore._countAndFlags, scope 214 // user: %198
  %197 = struct_extract %175 : $_StringCore, #_StringCore._baseAddress, scope 214 // user: %199
  %198 = struct_extract %196 : $UInt, #UInt._value, scope 214 // user: %199
  %199 = apply %194(%197, %198, %195, %181) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 214
  release_value %175 : $_StringCore, scope 210    // id: %200
  br bb29, scope 214                              // id: %201

bb29:                                             // Preds: bb28 bb27
  %202 = tuple (), scope 210                      // user: %203
  return %202 : $(), scope 210                    // id: %203

bb30:                                             // Preds: bb22
  br bb25, scope 210                              // id: %204

bb31:                                             // Preds: bb18
  %205 = struct_extract %122 : $_StringBuffer, #_StringBuffer._storage, scope 210 // users: %211, %210, %207, %206
  %206 = struct_extract %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 210 // users: %212, %215
  debug_value %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 210 // id: %207
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %208 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 210 // user: %209
  %209 = apply %208() : $@convention(thin) () -> Int, scope 210 // users: %218, %217
  debug_value %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 210 // id: %210
  debug_value %205 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 210 // id: %211
  switch_enum %206 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb32, case #Optional.some!enumelt.1: bb33, scope 210 // id: %212

bb32:                                             // Preds: bb31
  cond_fail %21 : $Builtin.Int1, scope 210        // id: %213
  unreachable, scope 210                          // id: %214

bb33:                                             // Preds: bb31
  %215 = unchecked_enum_data %206 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 210 // user: %216
  %216 = ref_to_raw_pointer %215 : $Builtin.NativeObject to $Builtin.RawPointer, scope 210 // user: %220
  %217 = struct_extract %209 : $Int, #Int._value, scope 210 // user: %219
  debug_value %209 : $Int, scope 210              // id: %218
  %219 = builtin "truncOrBitCast_Int64_Word"(%217 : $Builtin.Int64) : $Builtin.Word, scope 210 // user: %220
  %220 = index_raw_pointer %216 : $Builtin.RawPointer, %219 : $Builtin.Word, scope 210 // user: %226
  debug_value %42 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %221
  %222 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // users: %290, %228, %224
  %223 = alloc_stack $UTF8, scope 210             // users: %289, %228, %225
  store %42 to %222 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %224
  store %51 to %223 : $*UTF8, scope 210           // id: %225
  br bb34(%220 : $Builtin.RawPointer), scope 210  // id: %226

// %227                                           // users: %270, %266, %251, %247
bb34(%227 : $Builtin.RawPointer):                 // Preds: bb37 bb36 bb33
  %228 = apply %53(%222, %223) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 210 // user: %229
  switch_enum %228 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb35, case #UnicodeDecodingResult.emptyInput!enumelt: bb38, case #UnicodeDecodingResult.error!enumelt: bb40, scope 210 // id: %229

// %230                                           // users: %235, %234, %233, %232, %231
bb35(%230 : $UnicodeScalar):                      // Preds: bb34
  debug_value %230 : $UnicodeScalar, scope 210    // id: %231
  debug_value %230 : $UnicodeScalar, scope 210    // id: %232
  debug_value %230 : $UnicodeScalar, scope 210    // id: %233
  debug_value %230 : $UnicodeScalar, scope 210    // id: %234
  %235 = struct_extract %230 : $UnicodeScalar, #UnicodeScalar._value, scope 210 // users: %238, %236
  debug_value %235 : $UInt32, scope 210           // id: %236
  %237 = integer_literal $Builtin.Int32, 65535, scope 210 // user: %239
  %238 = struct_extract %235 : $UInt32, #UInt32._value, scope 210 // users: %273, %255, %241, %239
  %239 = builtin "cmp_ule_Int32"(%238 : $Builtin.Int32, %237 : $Builtin.Int32) : $Builtin.Int1, scope 210 // user: %240
  cond_br %239, bb36, bb37, scope 210             // id: %240

bb36:                                             // Preds: bb35
  %241 = builtin "u_to_u_checked_trunc_Int32_Int16"(%238 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 210 // users: %243, %242
  %242 = tuple_extract %241 : $(Builtin.Int16, Builtin.Int1), 0, scope 210 // user: %245
  %243 = tuple_extract %241 : $(Builtin.Int16, Builtin.Int1), 1, scope 210 // user: %244
  cond_fail %243 : $Builtin.Int1, scope 210       // id: %244
  %245 = struct $UInt16 (%242 : $Builtin.Int16), scope 210 // users: %248, %246
  debug_value %245 : $UInt16, scope 210           // id: %246
  %247 = pointer_to_address %227 : $Builtin.RawPointer to [strict] $*UInt16, scope 210 // user: %248
  store %245 to %247 : $*UInt16, scope 210        // id: %248
  %249 = metatype $@thick UInt16.Type, scope 210  // user: %250
  %250 = builtin "strideof_nonzero"<UInt16>(%249 : $@thick UInt16.Type) : $Builtin.Word, scope 210 // user: %251
  %251 = index_raw_pointer %227 : $Builtin.RawPointer, %250 : $Builtin.Word, scope 210 // user: %252
  br bb34(%251 : $Builtin.RawPointer), scope 210  // id: %252

bb37:                                             // Preds: bb35
  %253 = integer_literal $Builtin.Int32, 55232, scope 210 // user: %256
  %254 = integer_literal $Builtin.Int32, 10, scope 210 // user: %255
  %255 = builtin "lshr_Int32"(%238 : $Builtin.Int32, %254 : $Builtin.Int32) : $Builtin.Int32, scope 210 // user: %256
  %256 = builtin "uadd_with_overflow_Int32"(%253 : $Builtin.Int32, %255 : $Builtin.Int32, %21 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 210 // users: %258, %257
  %257 = tuple_extract %256 : $(Builtin.Int32, Builtin.Int1), 0, scope 210 // user: %260
  %258 = tuple_extract %256 : $(Builtin.Int32, Builtin.Int1), 1, scope 210 // user: %259
  cond_fail %258 : $Builtin.Int1, scope 210       // id: %259
  %260 = builtin "u_to_u_checked_trunc_Int32_Int16"(%257 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 210 // users: %262, %261
  %261 = tuple_extract %260 : $(Builtin.Int16, Builtin.Int1), 0, scope 210 // user: %264
  %262 = tuple_extract %260 : $(Builtin.Int16, Builtin.Int1), 1, scope 210 // user: %263
  cond_fail %262 : $Builtin.Int1, scope 210       // id: %263
  %264 = struct $UInt16 (%261 : $Builtin.Int16), scope 210 // users: %267, %265
  debug_value %264 : $UInt16, scope 210           // id: %265
  %266 = pointer_to_address %227 : $Builtin.RawPointer to [strict] $*UInt16, scope 210 // user: %267
  store %264 to %266 : $*UInt16, scope 210        // id: %267
  %268 = metatype $@thick UInt16.Type, scope 210  // user: %269
  %269 = builtin "strideof_nonzero"<UInt16>(%268 : $@thick UInt16.Type) : $Builtin.Word, scope 210 // users: %286, %270
  %270 = index_raw_pointer %227 : $Builtin.RawPointer, %269 : $Builtin.Word, scope 210 // users: %286, %284
  %271 = integer_literal $Builtin.Int32, 56320, scope 210 // user: %274
  %272 = integer_literal $Builtin.Int32, 1023, scope 210 // user: %273
  %273 = builtin "and_Int32"(%238 : $Builtin.Int32, %272 : $Builtin.Int32) : $Builtin.Int32, scope 210 // user: %274
  %274 = builtin "uadd_with_overflow_Int32"(%271 : $Builtin.Int32, %273 : $Builtin.Int32, %21 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 210 // users: %276, %275
  %275 = tuple_extract %274 : $(Builtin.Int32, Builtin.Int1), 0, scope 210 // user: %278
  %276 = tuple_extract %274 : $(Builtin.Int32, Builtin.Int1), 1, scope 210 // user: %277
  cond_fail %276 : $Builtin.Int1, scope 210       // id: %277
  %278 = builtin "u_to_u_checked_trunc_Int32_Int16"(%275 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 210 // users: %280, %279
  %279 = tuple_extract %278 : $(Builtin.Int16, Builtin.Int1), 0, scope 210 // user: %282
  %280 = tuple_extract %278 : $(Builtin.Int16, Builtin.Int1), 1, scope 210 // user: %281
  cond_fail %280 : $Builtin.Int1, scope 210       // id: %281
  %282 = struct $UInt16 (%279 : $Builtin.Int16), scope 210 // users: %285, %283
  debug_value %282 : $UInt16, scope 210           // id: %283
  %284 = pointer_to_address %270 : $Builtin.RawPointer to [strict] $*UInt16, scope 210 // user: %285
  store %282 to %284 : $*UInt16, scope 210        // id: %285
  %286 = index_raw_pointer %270 : $Builtin.RawPointer, %269 : $Builtin.Word, scope 210 // user: %287
  br bb34(%286 : $Builtin.RawPointer), scope 210  // id: %287

bb38:                                             // Preds: bb34
  br bb39, scope 210                              // id: %288

bb39:                                             // Preds: bb40 bb38
  dealloc_stack %223 : $*UTF8, scope 210          // id: %289
  dealloc_stack %222 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 210 // id: %290
  br bb26, scope 210                              // id: %291

bb40:                                             // Preds: bb34
  br bb39, scope 210                              // id: %292

bb41:                                             // Preds: bb15
  br bb42(%41 : $Int), scope 210                  // id: %293

// %294                                           // user: %296
bb42(%294 : $Int):                                // Preds: bb45 bb41
  %295 = integer_literal $Builtin.Int64, 2, scope 210 // user: %296
  br bb18(%295 : $Builtin.Int64, %294 : $Int, %30 : $Builtin.Int1), scope 210 // id: %296

bb43:                                             // Preds: bb14
  %297 = struct_extract %106 : $Bool, #Bool._value, scope 210 // user: %298
  cond_br %297, bb44, bb45, scope 210             // id: %298

bb44:                                             // Preds: bb43
  br bb17(%104 : $Int), scope 210                 // id: %299

bb45:                                             // Preds: bb43
  br bb42(%104 : $Int), scope 210                 // id: %300

bb46:                                             // Preds: bb13
  cond_fail %21 : $Builtin.Int1, scope 210        // id: %301
  unreachable, scope 210                          // id: %302

bb47:                                             // Preds: bb1
  %303 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 210 // user: %304
  br bb13(%303 : $Optional<(count: Int, isASCII: Bool)>), scope 210 // id: %304
}

sil_scope 215 {  parent @_TTSf4n_gs_n_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@thick MyError.Type, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> () }
sil_scope 216 {  parent 215 }
sil_scope 217 {  parent 52 inlined_at 216 }
sil_scope 218 {  parent 215 }
sil_scope 219 {  parent 52 inlined_at 218 }
sil_scope 220 {  parent 215 }
sil_scope 221 {  parent 52 inlined_at 220 }
sil_scope 222 {  parent @_TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @owned @box String, Bool) -> () }
sil_scope 223 {  parent 215 }
sil_scope 224 {  parent 222 inlined_at 223 }
sil_scope 225 {  parent 215 }
sil_scope 226 {  parent 52 inlined_at 225 }
sil_scope 227 {  parent 215 }
sil_scope 228 {  parent 52 inlined_at 227 }
sil_scope 229 {  parent 215 }
sil_scope 230 {  parent 52 inlined_at 229 }
sil_scope 231 {  parent 215 }
sil_scope 232 {  parent 52 inlined_at 231 }
sil_scope 233 {  parent 215 }
sil_scope 234 {  parent 52 inlined_at 233 }
sil_scope 235 {  parent 215 }
sil_scope 236 {  parent 157 inlined_at 235 }
sil_scope 237 {  parent 215 }
sil_scope 238 {  parent 222 inlined_at 237 }
sil_scope 239 {  parent 215 }
sil_scope 240 {  parent 52 inlined_at 239 }
sil_scope 241 {  parent 215 }
sil_scope 242 {  parent 52 inlined_at 241 }
sil_scope 243 {  parent 215 }
sil_scope 244 {  parent 52 inlined_at 243 }
sil_scope 245 {  parent 215 }
sil_scope 246 {  parent 52 inlined_at 245 }
sil_scope 247 {  parent 215 }
sil_scope 248 {  parent 222 inlined_at 247 }
sil_scope 249 {  parent 215 }
sil_scope 250 {  parent 157 inlined_at 249 }
sil_scope 251 {  parent 215 }
sil_scope 252 {  parent 52 inlined_at 251 }
sil_scope 253 {  parent 215 }
sil_scope 254 {  parent 222 inlined_at 253 }
sil_scope 255 {  parent 215 }
sil_scope 256 {  parent 157 inlined_at 255 }
sil_scope 257 {  parent 215 }
sil_scope 258 {  parent 52 inlined_at 257 }
sil_scope 259 {  parent 215 }
sil_scope 260 {  parent 157 inlined_at 259 }
sil_scope 261 {  parent 215 }
sil_scope 262 {  parent 52 inlined_at 261 }

// specialized specialized _adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()
sil shared @_TTSf4n_gs_n_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_ : $@convention(thin) (@thick MyError.Type, @thick Any.Type, @guaranteed _AnyCollectionBox<(label: Optional<String>, value: Any)>, Optional<Mirror.DisplayStyle>, @inout String, Bool) -> () {
// %0                                             // users: %8, %7
// %1                                             // users: %1228, %1542, %926, %915, %628, %228
// %2                                             // users: %1862, %1844, %32, %126, %1842, %275, %1860, %698, %1878, %1877, %688, %264, %115, %1839, %1837, %21
// %3                                             // user: %15
// %4                                             // users: %53, %58, %12
// %5                                             // users: %628, %915, %1224, %228, %623, %14
bb0(%0 : $@thick MyError.Type, %1 : $@thick Any.Type, %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, %3 : $Optional<Mirror.DisplayStyle>, %4 : $*String, %5 : $Bool):
  %6 = alloc_stack $@thick MyError.Type, scope 215 // users: %1218, %61, %439, %9, %7
  store %0 to %6 : $*@thick MyError.Type, scope 215 // id: %7
  debug_value %0 : $@thick MyError.Type, scope 215 // id: %8
  debug_value_addr %6 : $*@thick MyError.Type, scope 215 // id: %9
  %10 = alloc_box $String, scope 215              // users: %916, %629, %229, %59, %227, %627, %914, %628, %915, %1224, %228, %11
  %11 = project_box %10 : $@box String, scope 215 // users: %1722, %1712, %1710, %1708, %1426, %1416, %1414, %1412, %675, %665, %663, %661, %655, %645, %643, %641, %397, %389, %387, %362, %354, %352, %327, %319, %317, %189, %181, %179, %1106, %1096, %1094, %1092, %801, %793, %791, %771, %760, %758, %756, %428, %420, %418, %216, %208, %206, %258, %247, %245, %243, %107, %96, %94, %92, %781, %740, %369, %164, %77, %47, %52, %13
  %12 = load %4 : $*String, scope 215             // users: %31, %1838, %108, %112, %226, %438, %925, %1223, %1227, %13
  store %12 to %11 : $*String, scope 215          // id: %13
  debug_value %5 : $Bool, scope 215               // id: %14
  switch_enum %3 : $Optional<Mirror.DisplayStyle>, case #Optional.some!enumelt.1: bb1, case #Optional.none!enumelt: bb171, scope 215 // id: %15

// %16                                            // users: %18, %17
bb1(%16 : $Mirror.DisplayStyle):                  // Preds: bb0
  debug_value %16 : $Mirror.DisplayStyle, scope 215 // id: %17
  switch_enum %16 : $Mirror.DisplayStyle, case #Mirror.DisplayStyle.optional!enumelt: bb2, case #Mirror.DisplayStyle.tuple!enumelt: bb7, case #Mirror.DisplayStyle.struct!enumelt: bb26, case #Mirror.DisplayStyle.enum!enumelt: bb54, default bb124, scope 215 // id: %18

bb2:                                              // Preds: bb1
  %19 = alloc_stack $(label: Optional<String>, value: Any), scope 215 // users: %64, %50, %49, %36, %35
  %20 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 215 // users: %1839, %1840, %63, %43, %37
  checked_cast_br [exact] %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb3, bb269, scope 215 // id: %21

bb3(%22 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb2
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %23 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 215 // user: %33
  %24 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 215 // user: %26
  %25 = integer_literal $Builtin.Word, 183, scope 215 // user: %28
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word, scope 215 // user: %28
  %27 = integer_literal $Builtin.Int8, 2, scope 215 // user: %28
  %28 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %27 : $Builtin.Int8), scope 215 // user: %33
  %29 = integer_literal $Builtin.Int64, 304, scope 215 // user: %30
  %30 = struct $UInt (%29 : $Builtin.Int64), scope 215 // user: %33
  retain_value %12 : $String, scope 215           // id: %31
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %32
  %33 = apply %23(%28, %30) : $@convention(thin) (StaticString, UInt) -> Never, scope 215
  unreachable, scope 215                          // id: %34

bb4:                                              // Preds: bb269
  %35 = tuple_element_addr %19 : $*(label: Optional<String>, value: Any), 0, scope 215 // user: %41
  %36 = tuple_element_addr %19 : $*(label: Optional<String>, value: Any), 1, scope 215 // users: %45, %42
  %37 = unchecked_take_enum_data_addr %20 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 215 // users: %39, %38
  %38 = tuple_element_addr %37 : $*(label: Optional<String>, value: Any), 0, scope 215 // user: %40
  %39 = tuple_element_addr %37 : $*(label: Optional<String>, value: Any), 1, scope 215 // user: %42
  %40 = load %38 : $*Optional<String>, scope 215  // user: %41
  store %40 to %35 : $*Optional<String>, scope 215 // id: %41
  copy_addr [take] %39 to [initialization] %36 : $*Any, scope 215 // id: %42
  dealloc_stack %20 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %43
  %44 = alloc_stack $Any, scope 215               // users: %47, %48, %45
  copy_addr %36 to [initialization] %44 : $*Any, scope 215 // id: %45
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %46 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 215 // user: %47
  %47 = apply %46(%44, %11) : $@convention(thin) (@in Any, @inout String) -> (), scope 215
  dealloc_stack %44 : $*Any, scope 215            // id: %48
  destroy_addr %19 : $*(label: Optional<String>, value: Any), scope 215 // id: %49
  dealloc_stack %19 : $*(label: Optional<String>, value: Any), scope 215 // id: %50
  br bb5, scope 215                               // id: %51

bb5:                                              // Preds: bb24 bb52 bb152 bb202 bb248 bb247 bb201 bb172 bb151 bb103 bb95 bb51 bb23 bb6 bb4
  %52 = load %11 : $*String, scope 215            // users: %56, %58
  %53 = struct_element_addr %4 : $*String, #String._core, scope 215 // user: %54
  %54 = struct_element_addr %53 : $*_StringCore, #_StringCore._owner, scope 215 // user: %55
  %55 = load %54 : $*Optional<AnyObject>, scope 215 // user: %57
  retain_value %52 : $String, scope 215           // id: %56
  release_value %55 : $Optional<AnyObject>, scope 215 // id: %57
  store %52 to %4 : $*String, scope 215           // id: %58
  strong_release %10 : $@box String, scope 215    // id: %59
  %60 = tuple (), scope 215                       // user: %62
  dealloc_stack %6 : $*@thick MyError.Type, scope 215 // id: %61
  return %60 : $(), scope 215                     // id: %62

bb6:                                              // Preds: bb269
  dealloc_stack %20 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %63
  dealloc_stack %19 : $*(label: Optional<String>, value: Any), scope 215 // id: %64
  %65 = string_literal utf8 "nil", scope 215      // users: %67, %66
  debug_value %65 : $Builtin.RawPointer, scope 215 // id: %66
  %67 = struct $UnsafeMutableRawPointer (%65 : $Builtin.RawPointer), scope 215 // user: %68
  %68 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %67 : $UnsafeMutableRawPointer, scope 215 // users: %75, %70
  %69 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 215 // users: %75, %71
  debug_value %68 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %70
  debug_value %69 : $Optional<AnyObject>, scope 215 // id: %71
  %72 = integer_literal $Builtin.Int64, 3, scope 215 // user: %74
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %73 = function_ref @_TTSg5SS_SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@owned String, @inout String) -> (), scope 215 // user: %77
  %74 = struct $UInt (%72 : $Builtin.Int64), scope 215 // user: %75
  %75 = struct $_StringCore (%68 : $Optional<UnsafeMutableRawPointer>, %74 : $UInt, %69 : $Optional<AnyObject>), scope 215 // user: %76
  %76 = struct $String (%75 : $_StringCore), scope 215 // user: %77
  %77 = apply %73(%76, %11) : $@convention(thin) (@owned String, @inout String) -> (), scope 215
  br bb5, scope 215                               // id: %78

bb7:                                              // Preds: bb1
  %79 = string_literal utf8 "(", scope 215        // users: %83, %81
  %80 = integer_literal $Builtin.Int1, -1, scope 215 // users: %1853, %199, %170, %153, %1857, %82
  debug_value %79 : $Builtin.RawPointer, scope 215 // id: %81
  debug_value %80 : $Builtin.Int1, scope 215      // id: %82
  %83 = struct $UnsafeMutableRawPointer (%79 : $Builtin.RawPointer), scope 215 // user: %84
  %84 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %83 : $UnsafeMutableRawPointer, scope 215 // users: %113, %90, %86
  %85 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 215 // users: %220, %113, %193, %204, %203, %177, %174, %90, %87
  debug_value %84 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %86
  debug_value %85 : $Optional<AnyObject>, scope 215 // id: %87
  %88 = integer_literal $Builtin.Int64, 1, scope 215 // users: %220, %113, %89
  %89 = struct $UInt (%88 : $Builtin.Int64), scope 215 // users: %204, %90
  %90 = struct $_StringCore (%84 : $Optional<UnsafeMutableRawPointer>, %89 : $UInt, %85 : $Optional<AnyObject>), scope 215 // user: %91
  %91 = struct $String (%90 : $_StringCore), scope 215 // users: %107, %95, %93
  debug_value_addr %11 : $*String, scope 217      // id: %92
  debug_value %91 : $String, scope 217            // id: %93
  debug_value_addr %11 : $*String, scope 217      // id: %94
  debug_value %91 : $String, scope 217            // id: %95
  %96 = struct_element_addr %11 : $*String, #String._core, scope 217 // users: %214, %220, %187, %193, %113, %105, %97
  %97 = struct_element_addr %96 : $*_StringCore, #_StringCore._countAndFlags, scope 217 // user: %98
  %98 = struct_element_addr %97 : $*UInt, #UInt._value, scope 217 // users: %210, %183, %99
  %99 = load %98 : $*Builtin.Int64, scope 217     // user: %101
  %100 = integer_literal $Builtin.Int64, 4611686018427387903, scope 217 // users: %211, %184, %101
  %101 = builtin "and_Int64"(%99 : $Builtin.Int64, %100 : $Builtin.Int64) : $Builtin.Int64, scope 217 // user: %103
  %102 = integer_literal $Builtin.Int64, 0, scope 217 // users: %212, %185, %103
  %103 = builtin "cmp_eq_Int64"(%101 : $Builtin.Int64, %102 : $Builtin.Int64) : $Builtin.Int1, scope 217 // user: %104
  cond_br %103, bb8, bb9, scope 217               // id: %104

bb8:                                              // Preds: bb7
  %105 = struct_element_addr %96 : $*_StringCore, #_StringCore._owner, scope 217 // user: %106
  %106 = load %105 : $*Optional<AnyObject>, scope 217 // user: %109
  store %91 to %11 : $*String, scope 217          // id: %107
  retain_value %12 : $String, scope 215           // id: %108
  release_value %106 : $Optional<AnyObject>, scope 215 // id: %109
  br bb10, scope 217                              // id: %110

bb9:                                              // Preds: bb7
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %111 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 217 // user: %113
  retain_value %12 : $String, scope 215           // id: %112
  %113 = apply %111(%84, %88, %85, %96) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 217
  br bb10, scope 217                              // id: %114

bb10:                                             // Preds: bb9 bb8
  %115 = upcast %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnySequenceBox<(label: Optional<String>, value: Any)>, scope 215 // users: %116, %1841, %1843
  checked_cast_br [exact] %115 : $_AnySequenceBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb11, bb270, scope 215 // id: %116

bb11(%117 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb10
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %118 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 215 // user: %127
  %119 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 215 // user: %121
  %120 = integer_literal $Builtin.Word, 183, scope 215 // user: %123
  %121 = builtin "ptrtoint_Word"(%119 : $Builtin.RawPointer) : $Builtin.Word, scope 215 // user: %123
  %122 = integer_literal $Builtin.Int8, 2, scope 215 // user: %123
  %123 = struct $StaticString (%121 : $Builtin.Word, %120 : $Builtin.Word, %122 : $Builtin.Int8), scope 215 // user: %127
  %124 = integer_literal $Builtin.Int64, 141, scope 215 // user: %125
  %125 = struct $UInt (%124 : $Builtin.Int64), scope 215 // user: %127
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %126
  %127 = apply %118(%123, %125) : $@convention(thin) (StaticString, UInt) -> Never, scope 215
  unreachable, scope 215                          // id: %128

// %129                                           // user: %161
bb12(%129 : $Builtin.Int1):                       // Preds: bb18 bb270
  %130 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 215 // users: %1855, %222, %151, %144, %1857
  checked_cast_br [exact] %1849 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)> to $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, bb13, bb271, scope 215 // id: %131

bb13(%132 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>): // Preds: bb12
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %133 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 215 // user: %142
  %134 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 215 // user: %136
  %135 = integer_literal $Builtin.Word, 183, scope 215 // user: %138
  %136 = builtin "ptrtoint_Word"(%134 : $Builtin.RawPointer) : $Builtin.Word, scope 215 // user: %138
  %137 = integer_literal $Builtin.Int8, 2, scope 215 // user: %138
  %138 = struct $StaticString (%136 : $Builtin.Word, %135 : $Builtin.Word, %137 : $Builtin.Int8), scope 215 // user: %142
  %139 = integer_literal $Builtin.Int64, 119, scope 215 // user: %140
  %140 = struct $UInt (%139 : $Builtin.Int64), scope 215 // user: %142
  retain_value %1843 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %141
  %142 = apply %133(%138, %140) : $@convention(thin) (StaticString, UInt) -> Never, scope 215
  unreachable, scope 215                          // id: %143

bb14:                                             // Preds: bb271
  %144 = unchecked_take_enum_data_addr %130 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 215 // users: %147, %145
  %145 = tuple_element_addr %144 : $*(label: Optional<String>, value: Any), 0, scope 215 // user: %146
  %146 = load %145 : $*Optional<String>, scope 215 // user: %148
  %147 = tuple_element_addr %144 : $*(label: Optional<String>, value: Any), 1, scope 215 // user: %149
  store %146 to %1847 : $*Optional<String>, scope 215 // id: %148
  copy_addr [take] %147 to [initialization] %1848 : $*Any, scope 215 // id: %149
  inject_enum_addr %1845 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 215 // id: %150
  dealloc_stack %130 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %151
  br bb15, scope 215                              // id: %152

bb15:                                             // Preds: bb25 bb14
  %153 = select_enum_addr %1845 : $*Optional<(Optional<String>, Any)>, case #Optional.some!enumelt.1: %80, case #Optional.none!enumelt: %1852 : $Builtin.Int1, scope 215 // user: %154
  cond_br %153, bb16, bb22, scope 215             // id: %154

bb16:                                             // Preds: bb15
  %155 = alloc_stack $Any, scope 215              // users: %164, %166, %160
  %156 = unchecked_take_enum_data_addr %1845 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 215 // users: %159, %157
  %157 = tuple_element_addr %156 : $*(Optional<String>, Any), 0, scope 215 // user: %158
  %158 = load %157 : $*Optional<String>, scope 215 // user: %165
  %159 = tuple_element_addr %156 : $*(Optional<String>, Any), 1, scope 215 // user: %160
  copy_addr [take] %159 to [initialization] %155 : $*Any, scope 215 // id: %160
  cond_br %129, bb17, bb19, scope 215             // id: %161

bb17:                                             // Preds: bb16
  br bb18, scope 215                              // id: %162

bb18:                                             // Preds: bb17 bb21 bb20
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %163 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 215 // user: %164
  %164 = apply %163(%155, %11) : $@convention(thin) (@in Any, @inout String) -> (), scope 215
  release_value %158 : $Optional<String>, scope 215 // id: %165
  dealloc_stack %155 : $*Any, scope 215           // id: %166
  br bb12(%1852 : $Builtin.Int1), scope 215       // id: %167

bb19:                                             // Preds: bb16
  %168 = string_literal utf8 ", ", scope 215      // users: %171, %169
  debug_value %168 : $Builtin.RawPointer, scope 215 // id: %169
  debug_value %80 : $Builtin.Int1, scope 215      // id: %170
  %171 = struct $UnsafeMutableRawPointer (%168 : $Builtin.RawPointer), scope 215 // user: %172
  %172 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %171 : $UnsafeMutableRawPointer, scope 215 // users: %193, %177, %173
  debug_value %172 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %173
  debug_value %85 : $Optional<AnyObject>, scope 215 // id: %174
  %175 = integer_literal $Builtin.Int64, 2, scope 215 // users: %193, %176
  %176 = struct $UInt (%175 : $Builtin.Int64), scope 215 // user: %177
  %177 = struct $_StringCore (%172 : $Optional<UnsafeMutableRawPointer>, %176 : $UInt, %85 : $Optional<AnyObject>), scope 215 // user: %178
  %178 = struct $String (%177 : $_StringCore), scope 215 // users: %189, %182, %180
  debug_value_addr %11 : $*String, scope 219      // id: %179
  debug_value %178 : $String, scope 219           // id: %180
  debug_value_addr %11 : $*String, scope 219      // id: %181
  debug_value %178 : $String, scope 219           // id: %182
  %183 = load %98 : $*Builtin.Int64, scope 219    // user: %184
  %184 = builtin "and_Int64"(%183 : $Builtin.Int64, %100 : $Builtin.Int64) : $Builtin.Int64, scope 219 // user: %185
  %185 = builtin "cmp_eq_Int64"(%184 : $Builtin.Int64, %102 : $Builtin.Int64) : $Builtin.Int1, scope 219 // user: %186
  cond_br %185, bb20, bb21, scope 219             // id: %186

bb20:                                             // Preds: bb19
  %187 = struct_element_addr %96 : $*_StringCore, #_StringCore._owner, scope 219 // user: %188
  %188 = load %187 : $*Optional<AnyObject>, scope 219 // user: %190
  store %178 to %11 : $*String, scope 219         // id: %189
  release_value %188 : $Optional<AnyObject>, scope 215 // id: %190
  br bb18, scope 215                              // id: %191

bb21:                                             // Preds: bb19
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %192 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 219 // user: %193
  %193 = apply %192(%172, %175, %85, %96) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 219
  br bb18, scope 219                              // id: %194

bb22:                                             // Preds: bb15
  dealloc_stack %1845 : $*Optional<(Optional<String>, Any)>, scope 215 // id: %195
  release_value %1843 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %196
  %197 = string_literal utf8 ")", scope 215       // users: %200, %198
  debug_value %197 : $Builtin.RawPointer, scope 215 // id: %198
  debug_value %80 : $Builtin.Int1, scope 215      // id: %199
  %200 = struct $UnsafeMutableRawPointer (%197 : $Builtin.RawPointer), scope 215 // user: %201
  %201 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %200 : $UnsafeMutableRawPointer, scope 215 // users: %220, %204, %202
  debug_value %201 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %202
  debug_value %85 : $Optional<AnyObject>, scope 215 // id: %203
  %204 = struct $_StringCore (%201 : $Optional<UnsafeMutableRawPointer>, %89 : $UInt, %85 : $Optional<AnyObject>), scope 215 // user: %205
  %205 = struct $String (%204 : $_StringCore), scope 215 // users: %216, %209, %207
  debug_value_addr %11 : $*String, scope 221      // id: %206
  debug_value %205 : $String, scope 221           // id: %207
  debug_value_addr %11 : $*String, scope 221      // id: %208
  debug_value %205 : $String, scope 221           // id: %209
  %210 = load %98 : $*Builtin.Int64, scope 221    // user: %211
  %211 = builtin "and_Int64"(%210 : $Builtin.Int64, %100 : $Builtin.Int64) : $Builtin.Int64, scope 221 // user: %212
  %212 = builtin "cmp_eq_Int64"(%211 : $Builtin.Int64, %102 : $Builtin.Int64) : $Builtin.Int1, scope 221 // user: %213
  cond_br %212, bb23, bb24, scope 221             // id: %213

bb23:                                             // Preds: bb22
  %214 = struct_element_addr %96 : $*_StringCore, #_StringCore._owner, scope 221 // user: %215
  %215 = load %214 : $*Optional<AnyObject>, scope 221 // user: %217
  store %205 to %11 : $*String, scope 221         // id: %216
  release_value %215 : $Optional<AnyObject>, scope 215 // id: %217
  br bb5, scope 215                               // id: %218

bb24:                                             // Preds: bb22
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %219 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 221 // user: %220
  %220 = apply %219(%201, %88, %85, %96) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 221
  br bb5, scope 221                               // id: %221

bb25:                                             // Preds: bb271
  dealloc_stack %130 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %222
  inject_enum_addr %1845 : $*Optional<(Optional<String>, Any)>, #Optional.none!enumelt, scope 215 // id: %223
  br bb15, scope 215                              // id: %224

bb26:                                             // Preds: bb1
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %225 = function_ref @_TTSf4n_g_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 224 // user: %228
  retain_value %12 : $String, scope 215           // id: %226
  strong_retain %10 : $@box String, scope 215     // id: %227
  %228 = apply %225(%1, %10, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 224
  strong_release %10 : $@box String, scope 215    // id: %229
  %230 = string_literal utf8 "(", scope 215       // users: %234, %232
  %231 = integer_literal $Builtin.Int1, -1, scope 215 // users: %1871, %411, %378, %343, %302, %1875, %233
  debug_value %230 : $Builtin.RawPointer, scope 215 // id: %232
  debug_value %231 : $Builtin.Int1, scope 215     // id: %233
  %234 = struct $UnsafeMutableRawPointer (%230 : $Builtin.RawPointer), scope 215 // user: %235
  %235 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %234 : $UnsafeMutableRawPointer, scope 215 // users: %262, %241, %237
  %236 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 215 // users: %432, %366, %262, %403, %416, %415, %385, %382, %350, %347, %241, %238
  debug_value %235 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %237
  debug_value %236 : $Optional<AnyObject>, scope 215 // id: %238
  %239 = integer_literal $Builtin.Int64, 1, scope 215 // users: %432, %262, %240
  %240 = struct $UInt (%239 : $Builtin.Int64), scope 215 // users: %416, %241
  %241 = struct $_StringCore (%235 : $Optional<UnsafeMutableRawPointer>, %240 : $UInt, %236 : $Optional<AnyObject>), scope 215 // user: %242
  %242 = struct $String (%241 : $_StringCore), scope 215 // users: %258, %246, %244
  debug_value_addr %11 : $*String, scope 226      // id: %243
  debug_value %242 : $String, scope 226           // id: %244
  debug_value_addr %11 : $*String, scope 226      // id: %245
  debug_value %242 : $String, scope 226           // id: %246
  %247 = struct_element_addr %11 : $*String, #String._core, scope 226 // users: %426, %432, %395, %403, %360, %366, %325, %338, %262, %256, %248
  %248 = struct_element_addr %247 : $*_StringCore, #_StringCore._countAndFlags, scope 226 // user: %249
  %249 = struct_element_addr %248 : $*UInt, #UInt._value, scope 226 // users: %422, %391, %356, %321, %250
  %250 = load %249 : $*Builtin.Int64, scope 226   // user: %252
  %251 = integer_literal $Builtin.Int64, 4611686018427387903, scope 226 // users: %423, %392, %357, %322, %252
  %252 = builtin "and_Int64"(%250 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int64, scope 226 // user: %254
  %253 = integer_literal $Builtin.Int64, 0, scope 226 // users: %424, %393, %358, %323, %254
  %254 = builtin "cmp_eq_Int64"(%252 : $Builtin.Int64, %253 : $Builtin.Int64) : $Builtin.Int1, scope 226 // user: %255
  cond_br %254, bb27, bb28, scope 226             // id: %255

bb27:                                             // Preds: bb26
  %256 = struct_element_addr %247 : $*_StringCore, #_StringCore._owner, scope 226 // user: %257
  %257 = load %256 : $*Optional<AnyObject>, scope 226 // user: %259
  store %242 to %11 : $*String, scope 226         // id: %258
  release_value %257 : $Optional<AnyObject>, scope 215 // id: %259
  br bb29, scope 226                              // id: %260

bb28:                                             // Preds: bb26
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %261 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 226 // user: %262
  %262 = apply %261(%235, %239, %236, %247) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 226
  br bb29, scope 226                              // id: %263

bb29:                                             // Preds: bb28 bb27
  %264 = upcast %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnySequenceBox<(label: Optional<String>, value: Any)>, scope 215 // users: %265, %1859, %1861
  checked_cast_br [exact] %264 : $_AnySequenceBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb30, bb272, scope 215 // id: %265

bb30(%266 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb29
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %267 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 215 // user: %276
  %268 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 215 // user: %270
  %269 = integer_literal $Builtin.Word, 183, scope 215 // user: %272
  %270 = builtin "ptrtoint_Word"(%268 : $Builtin.RawPointer) : $Builtin.Word, scope 215 // user: %272
  %271 = integer_literal $Builtin.Int8, 2, scope 215 // user: %272
  %272 = struct $StaticString (%270 : $Builtin.Word, %269 : $Builtin.Word, %271 : $Builtin.Int8), scope 215 // user: %276
  %273 = integer_literal $Builtin.Int64, 141, scope 215 // user: %274
  %274 = struct $UInt (%273 : $Builtin.Int64), scope 215 // user: %276
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %275
  %276 = apply %267(%272, %274) : $@convention(thin) (StaticString, UInt) -> Never, scope 215
  unreachable, scope 215                          // id: %277

// %278                                           // users: %406, %314
bb31(%278 : $Builtin.Int1):                       // Preds: bb45 bb272
  %279 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 215 // users: %1873, %434, %300, %293, %1875
  checked_cast_br [exact] %1867 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)> to $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, bb32, bb273, scope 215 // id: %280

bb32(%281 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>): // Preds: bb31
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %282 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 215 // user: %291
  %283 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 215 // user: %285
  %284 = integer_literal $Builtin.Word, 183, scope 215 // user: %287
  %285 = builtin "ptrtoint_Word"(%283 : $Builtin.RawPointer) : $Builtin.Word, scope 215 // user: %287
  %286 = integer_literal $Builtin.Int8, 2, scope 215 // user: %287
  %287 = struct $StaticString (%285 : $Builtin.Word, %284 : $Builtin.Word, %286 : $Builtin.Int8), scope 215 // user: %291
  %288 = integer_literal $Builtin.Int64, 119, scope 215 // user: %289
  %289 = struct $UInt (%288 : $Builtin.Int64), scope 215 // user: %291
  retain_value %1861 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %290
  %291 = apply %282(%287, %289) : $@convention(thin) (StaticString, UInt) -> Never, scope 215
  unreachable, scope 215                          // id: %292

bb33:                                             // Preds: bb273
  %293 = unchecked_take_enum_data_addr %279 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 215 // users: %296, %294
  %294 = tuple_element_addr %293 : $*(label: Optional<String>, value: Any), 0, scope 215 // user: %295
  %295 = load %294 : $*Optional<String>, scope 215 // user: %297
  %296 = tuple_element_addr %293 : $*(label: Optional<String>, value: Any), 1, scope 215 // user: %298
  store %295 to %1865 : $*Optional<String>, scope 215 // id: %297
  copy_addr [take] %296 to [initialization] %1866 : $*Any, scope 215 // id: %298
  inject_enum_addr %1863 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 215 // id: %299
  dealloc_stack %279 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %300
  br bb34, scope 215                              // id: %301

bb34:                                             // Preds: bb53 bb33
  %302 = select_enum_addr %1863 : $*Optional<(Optional<String>, Any)>, case #Optional.some!enumelt.1: %231, case #Optional.none!enumelt: %1870 : $Builtin.Int1, scope 215 // user: %303
  cond_br %302, bb35, bb50, scope 215             // id: %303

bb35:                                             // Preds: bb34
  %304 = alloc_stack $Any, scope 215              // users: %369, %405, %373, %310
  %305 = unchecked_take_enum_data_addr %1863 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 215 // users: %308, %306
  %306 = tuple_element_addr %305 : $*(Optional<String>, Any), 0, scope 215 // user: %307
  %307 = load %306 : $*Optional<String>, scope 215 // users: %339, %370, %374, %328, %337, %315, %398, %402, %311, %309
  %308 = tuple_element_addr %305 : $*(Optional<String>, Any), 1, scope 215 // user: %310
  debug_value %307 : $Optional<String>, scope 215 // id: %309
  copy_addr [take] %308 to [initialization] %304 : $*Any, scope 215 // id: %310
  switch_enum %307 : $Optional<String>, case #Optional.some!enumelt.1: bb36, case #Optional.none!enumelt: bb49, scope 215 // id: %311

// %312                                           // users: %331, %327, %320, %318, %313
bb36(%312 : $String):                             // Preds: bb35
  debug_value %312 : $String, scope 215           // id: %313
  cond_br %278, bb37, bb46, scope 215             // id: %314

bb37:                                             // Preds: bb36
  retain_value %307 : $Optional<String>, scope 215 // id: %315
  br bb38, scope 215                              // id: %316

bb38:                                             // Preds: bb48 bb47 bb37
  debug_value_addr %11 : $*String, scope 228      // id: %317
  debug_value %312 : $String, scope 228           // id: %318
  debug_value_addr %11 : $*String, scope 228      // id: %319
  debug_value %312 : $String, scope 228           // id: %320
  %321 = load %249 : $*Builtin.Int64, scope 228   // user: %322
  %322 = builtin "and_Int64"(%321 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int64, scope 228 // user: %323
  %323 = builtin "cmp_eq_Int64"(%322 : $Builtin.Int64, %253 : $Builtin.Int64) : $Builtin.Int1, scope 228 // user: %324
  cond_br %323, bb39, bb40, scope 228             // id: %324

bb39:                                             // Preds: bb38
  %325 = struct_element_addr %247 : $*_StringCore, #_StringCore._owner, scope 228 // user: %326
  %326 = load %325 : $*Optional<AnyObject>, scope 228 // user: %329
  store %312 to %11 : $*String, scope 228         // id: %327
  retain_value %307 : $Optional<String>, scope 215 // id: %328
  release_value %326 : $Optional<AnyObject>, scope 215 // id: %329
  br bb41, scope 228                              // id: %330

bb40:                                             // Preds: bb38
  %331 = struct_extract %312 : $String, #String._core, scope 228 // users: %335, %334, %333
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %332 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 228 // user: %338
  %333 = struct_extract %331 : $_StringCore, #_StringCore._owner, scope 228 // user: %338
  %334 = struct_extract %331 : $_StringCore, #_StringCore._countAndFlags, scope 228 // user: %336
  %335 = struct_extract %331 : $_StringCore, #_StringCore._baseAddress, scope 228 // user: %338
  %336 = struct_extract %334 : $UInt, #UInt._value, scope 228 // user: %338
  retain_value %307 : $Optional<String>, scope 215 // id: %337
  %338 = apply %332(%335, %336, %333, %247) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 228
  release_value %307 : $Optional<String>, scope 215 // id: %339
  br bb41, scope 228                              // id: %340

bb41:                                             // Preds: bb40 bb39
  %341 = string_literal utf8 ": ", scope 215      // users: %344, %342
  debug_value %341 : $Builtin.RawPointer, scope 215 // id: %342
  debug_value %231 : $Builtin.Int1, scope 215     // id: %343
  %344 = struct $UnsafeMutableRawPointer (%341 : $Builtin.RawPointer), scope 215 // user: %345
  %345 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %344 : $UnsafeMutableRawPointer, scope 215 // users: %366, %350, %346
  debug_value %345 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %346
  debug_value %236 : $Optional<AnyObject>, scope 215 // id: %347
  %348 = integer_literal $Builtin.Int64, 2, scope 215 // users: %366, %349
  %349 = struct $UInt (%348 : $Builtin.Int64), scope 215 // user: %350
  %350 = struct $_StringCore (%345 : $Optional<UnsafeMutableRawPointer>, %349 : $UInt, %236 : $Optional<AnyObject>), scope 215 // user: %351
  %351 = struct $String (%350 : $_StringCore), scope 215 // users: %362, %355, %353
  debug_value_addr %11 : $*String, scope 230      // id: %352
  debug_value %351 : $String, scope 230           // id: %353
  debug_value_addr %11 : $*String, scope 230      // id: %354
  debug_value %351 : $String, scope 230           // id: %355
  %356 = load %249 : $*Builtin.Int64, scope 230   // user: %357
  %357 = builtin "and_Int64"(%356 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int64, scope 230 // user: %358
  %358 = builtin "cmp_eq_Int64"(%357 : $Builtin.Int64, %253 : $Builtin.Int64) : $Builtin.Int1, scope 230 // user: %359
  cond_br %358, bb42, bb43, scope 230             // id: %359

bb42:                                             // Preds: bb41
  %360 = struct_element_addr %247 : $*_StringCore, #_StringCore._owner, scope 230 // user: %361
  %361 = load %360 : $*Optional<AnyObject>, scope 230 // user: %363
  store %351 to %11 : $*String, scope 230         // id: %362
  release_value %361 : $Optional<AnyObject>, scope 215 // id: %363
  br bb44, scope 230                              // id: %364

bb43:                                             // Preds: bb41
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %365 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 230 // user: %366
  %366 = apply %365(%345, %348, %236, %247) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 230
  br bb44, scope 230                              // id: %367

bb44:                                             // Preds: bb43 bb42
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %368 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 215 // user: %369
  %369 = apply %368(%304, %11) : $@convention(thin) (@in Any, @inout String) -> (), scope 215
  release_value %307 : $Optional<String>, scope 215 // id: %370
  br bb45(%1870 : $Builtin.Int1), scope 215       // id: %371

// %372                                           // user: %375
bb45(%372 : $Builtin.Int1):                       // Preds: bb49 bb44
  dealloc_stack %304 : $*Any, scope 215           // id: %373
  release_value %307 : $Optional<String>, scope 215 // id: %374
  br bb31(%372 : $Builtin.Int1), scope 215        // id: %375

bb46:                                             // Preds: bb36
  %376 = string_literal utf8 ", ", scope 215      // users: %379, %377
  debug_value %376 : $Builtin.RawPointer, scope 215 // id: %377
  debug_value %231 : $Builtin.Int1, scope 215     // id: %378
  %379 = struct $UnsafeMutableRawPointer (%376 : $Builtin.RawPointer), scope 215 // user: %380
  %380 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %379 : $UnsafeMutableRawPointer, scope 215 // users: %403, %385, %381
  debug_value %380 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %381
  debug_value %236 : $Optional<AnyObject>, scope 215 // id: %382
  %383 = integer_literal $Builtin.Int64, 2, scope 215 // users: %403, %384
  %384 = struct $UInt (%383 : $Builtin.Int64), scope 215 // user: %385
  %385 = struct $_StringCore (%380 : $Optional<UnsafeMutableRawPointer>, %384 : $UInt, %236 : $Optional<AnyObject>), scope 215 // user: %386
  %386 = struct $String (%385 : $_StringCore), scope 215 // users: %397, %390, %388
  debug_value_addr %11 : $*String, scope 232      // id: %387
  debug_value %386 : $String, scope 232           // id: %388
  debug_value_addr %11 : $*String, scope 232      // id: %389
  debug_value %386 : $String, scope 232           // id: %390
  %391 = load %249 : $*Builtin.Int64, scope 232   // user: %392
  %392 = builtin "and_Int64"(%391 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int64, scope 232 // user: %393
  %393 = builtin "cmp_eq_Int64"(%392 : $Builtin.Int64, %253 : $Builtin.Int64) : $Builtin.Int1, scope 232 // user: %394
  cond_br %393, bb47, bb48, scope 232             // id: %394

bb47:                                             // Preds: bb46
  %395 = struct_element_addr %247 : $*_StringCore, #_StringCore._owner, scope 232 // user: %396
  %396 = load %395 : $*Optional<AnyObject>, scope 232 // user: %399
  store %386 to %11 : $*String, scope 232         // id: %397
  retain_value %307 : $Optional<String>, scope 215 // id: %398
  release_value %396 : $Optional<AnyObject>, scope 215 // id: %399
  br bb38, scope 215                              // id: %400

bb48:                                             // Preds: bb46
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %401 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 232 // user: %403
  retain_value %307 : $Optional<String>, scope 215 // id: %402
  %403 = apply %401(%380, %383, %236, %247) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 232
  br bb38, scope 232                              // id: %404

bb49:                                             // Preds: bb35
  destroy_addr %304 : $*Any, scope 215            // id: %405
  br bb45(%278 : $Builtin.Int1), scope 215        // id: %406

bb50:                                             // Preds: bb34
  dealloc_stack %1863 : $*Optional<(Optional<String>, Any)>, scope 215 // id: %407
  release_value %1861 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %408
  %409 = string_literal utf8 ")", scope 215       // users: %412, %410
  debug_value %409 : $Builtin.RawPointer, scope 215 // id: %410
  debug_value %231 : $Builtin.Int1, scope 215     // id: %411
  %412 = struct $UnsafeMutableRawPointer (%409 : $Builtin.RawPointer), scope 215 // user: %413
  %413 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %412 : $UnsafeMutableRawPointer, scope 215 // users: %432, %416, %414
  debug_value %413 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %414
  debug_value %236 : $Optional<AnyObject>, scope 215 // id: %415
  %416 = struct $_StringCore (%413 : $Optional<UnsafeMutableRawPointer>, %240 : $UInt, %236 : $Optional<AnyObject>), scope 215 // user: %417
  %417 = struct $String (%416 : $_StringCore), scope 215 // users: %428, %421, %419
  debug_value_addr %11 : $*String, scope 234      // id: %418
  debug_value %417 : $String, scope 234           // id: %419
  debug_value_addr %11 : $*String, scope 234      // id: %420
  debug_value %417 : $String, scope 234           // id: %421
  %422 = load %249 : $*Builtin.Int64, scope 234   // user: %423
  %423 = builtin "and_Int64"(%422 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int64, scope 234 // user: %424
  %424 = builtin "cmp_eq_Int64"(%423 : $Builtin.Int64, %253 : $Builtin.Int64) : $Builtin.Int1, scope 234 // user: %425
  cond_br %424, bb51, bb52, scope 234             // id: %425

bb51:                                             // Preds: bb50
  %426 = struct_element_addr %247 : $*_StringCore, #_StringCore._owner, scope 234 // user: %427
  %427 = load %426 : $*Optional<AnyObject>, scope 234 // user: %429
  store %417 to %11 : $*String, scope 234         // id: %428
  release_value %427 : $Optional<AnyObject>, scope 215 // id: %429
  br bb5, scope 215                               // id: %430

bb52:                                             // Preds: bb50
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %431 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 234 // user: %432
  %432 = apply %431(%413, %239, %236, %247) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 234
  br bb5, scope 234                               // id: %433

bb53:                                             // Preds: bb273
  dealloc_stack %279 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %434
  inject_enum_addr %1863 : $*Optional<(Optional<String>, Any)>, #Optional.none!enumelt, scope 215 // id: %435
  br bb34, scope 215                              // id: %436

bb54:                                             // Preds: bb1
  // function_ref swift_EnumCaseName
  %437 = function_ref @swift_EnumCaseName : $@convention(thin) <τ_0_0> (@in τ_0_0) -> Optional<UnsafePointer<Int8>>, scope 215 // user: %439
  retain_value %12 : $String, scope 215           // id: %438
  %439 = apply %437<MyError.Type>(%6) : $@convention(thin) <τ_0_0> (@in τ_0_0) -> Optional<UnsafePointer<Int8>>, scope 215 // user: %440
  switch_enum %439 : $Optional<UnsafePointer<Int8>>, case #Optional.some!enumelt.1: bb55, case #Optional.none!enumelt: bb123, scope 215 // id: %440

// %441                                           // users: %909, %618, %451, %450, %446, %444, %443, %442
bb55(%441 : $UnsafePointer<Int8>):                // Preds: bb54
  debug_value %441 : $UnsafePointer<Int8>, scope 215 // id: %442
  debug_value %441 : $UnsafePointer<Int8>, scope 215 // id: %443
  debug_value %441 : $UnsafePointer<Int8>, scope 215 // id: %444
  // function_ref _swift_stdlib_strlen
  %445 = function_ref @_swift_stdlib_strlen : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 215 // user: %447
  %446 = enum $ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>, #ImplicitlyUnwrappedOptional.some!enumelt.1, %441 : $UnsafePointer<Int8>, scope 215 // user: %447
  %447 = apply %445(%446) : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 215 // users: %910, %619, %468, %461, %458, %455, %452, %449, %448
  debug_value %447 : $Int, scope 215              // id: %448
  debug_value %447 : $Int, scope 215              // id: %449
  debug_value %441 : $UnsafePointer<Int8>, scope 215 // id: %450
  %451 = struct_extract %441 : $UnsafePointer<Int8>, #UnsafePointer._rawValue, scope 215 // users: %911, %620, %476, %456, %454
  %452 = struct_extract %447 : $Int, #Int._value, scope 215 // users: %473, %463, %453
  %453 = builtin "truncOrBitCast_Int64_Word"(%452 : $Builtin.Int64) : $Builtin.Word, scope 215 // users: %911, %620, %454
  bind_memory %451 : $Builtin.RawPointer, %453 : $Builtin.Word to $*UInt8, scope 215 // id: %454
  debug_value %447 : $Int, scope 215              // id: %455
  %456 = struct $UnsafePointer<UInt8> (%451 : $Builtin.RawPointer), scope 215 // users: %467, %459, %457
  debug_value %456 : $UnsafePointer<UInt8>, scope 215 // id: %457
  debug_value %447 : $Int, scope 215              // id: %458
  %459 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %456 : $UnsafePointer<UInt8>, scope 215 // users: %479, %460
  debug_value %459 : $Optional<UnsafePointer<UInt8>>, scope 236 // id: %460
  debug_value %447 : $Int, scope 236              // id: %461
  %462 = integer_literal $Builtin.Int64, 0, scope 236 // users: %671, %651, %495, %550, %482, %463
  %463 = builtin "cmp_sge_Int64"(%452 : $Builtin.Int64, %462 : $Builtin.Int64) : $Builtin.Int1, scope 236 // user: %465
  %464 = integer_literal $Builtin.Int1, -1, scope 236 // users: %557, %495, %882, %864, %821, %575, %519, %465
  %465 = builtin "xor_Int1"(%463 : $Builtin.Int1, %464 : $Builtin.Int1) : $Builtin.Int1, scope 236 // user: %466
  cond_fail %465 : $Builtin.Int1, scope 236       // id: %466
  debug_value %456 : $UnsafePointer<UInt8>, scope 236 // id: %467
  debug_value %447 : $Int, scope 236              // id: %468
  %469 = metatype $@thick UInt8.Type, scope 236   // user: %470
  %470 = builtin "strideof_nonzero"<UInt8>(%469 : $@thick UInt8.Type) : $Builtin.Word, scope 236 // users: %607, %471
  %471 = builtin "zextOrBitCast_Word_Int64"(%470 : $Builtin.Word) : $Builtin.Int64, scope 236 // user: %473
  %472 = integer_literal $Builtin.Int1, 0, scope 236 // users: %904, %524, %513, %473
  %473 = builtin "smul_with_overflow_Int64"(%452 : $Builtin.Int64, %471 : $Builtin.Int64, %472 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 236 // user: %474
  %474 = tuple_extract %473 : $(Builtin.Int64, Builtin.Int1), 0, scope 236 // user: %475
  %475 = builtin "truncOrBitCast_Int64_Word"(%474 : $Builtin.Int64) : $Builtin.Word, scope 236 // user: %476
  %476 = index_raw_pointer %451 : $Builtin.RawPointer, %475 : $Builtin.Word, scope 236 // user: %477
  %477 = struct $UnsafePointer<UInt8> (%476 : $Builtin.RawPointer), scope 236 // user: %478
  %478 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %477 : $UnsafePointer<UInt8>, scope 236 // user: %479
  %479 = struct $UnsafeBufferPointer<UInt8> (%459 : $Optional<UnsafePointer<UInt8>>, %478 : $Optional<UnsafePointer<UInt8>>), scope 236 // users: %483, %481, %480
  debug_value %479 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %480
  debug_value %479 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %481
  %482 = struct $Int (%462 : $Builtin.Int64), scope 215 // users: %901, %554, %483
  %483 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%479 : $UnsafeBufferPointer<UInt8>, %482 : $Int), scope 215 // users: %832, %829, %586, %583, %487, %484
  debug_value %483 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %484
  %485 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %542, %498, %487
  %486 = alloc_stack $UTF8, scope 215             // users: %541, %498, %493
  store %483 to %485 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %487
  %488 = integer_literal $Builtin.Int32, 0, scope 215 // user: %489
  %489 = struct $UInt32 (%488 : $Builtin.Int32), scope 215 // user: %492
  %490 = integer_literal $Builtin.Int8, 0, scope 215 // user: %491
  %491 = struct $UInt8 (%490 : $Builtin.Int8), scope 215 // user: %492
  %492 = struct $UTF8 (%489 : $UInt32, %491 : $UInt8), scope 215 // users: %833, %587, %493
  store %492 to %486 : $*UTF8, scope 215          // id: %493
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %494 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // users: %836, %590, %498
  br bb56(%462 : $Builtin.Int64, %464 : $Builtin.Int1), scope 215 // id: %495

// %496                                           // users: %535, %519
// %497                                           // users: %534, %533, %536
bb56(%496 : $Builtin.Int64, %497 : $Builtin.Int1): // Preds: bb61 bb55
  %498 = apply %494(%485, %486) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %499
  switch_enum %498 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb57, case #UnicodeDecodingResult.emptyInput!enumelt: bb67, case #UnicodeDecodingResult.error!enumelt: bb122, scope 215 // id: %499

// %500                                           // users: %529, %528, %509, %508, %503, %502, %501
bb57(%500 : $UnicodeScalar):                      // Preds: bb56
  debug_value %500 : $UnicodeScalar, scope 215    // id: %501
  debug_value %500 : $UnicodeScalar, scope 215    // id: %502
  %503 = struct_extract %500 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // user: %505
  %504 = integer_literal $Builtin.Int32, 127, scope 215 // user: %506
  %505 = struct_extract %503 : $UInt32, #UInt32._value, scope 215 // users: %531, %511, %506
  %506 = builtin "cmp_ugt_Int32"(%505 : $Builtin.Int32, %504 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %507
  cond_br %506, bb58, bb64, scope 215             // id: %507

bb58:                                             // Preds: bb57
  debug_value %500 : $UnicodeScalar, scope 215    // id: %508
  debug_value %500 : $UnicodeScalar, scope 215    // id: %509
  %510 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %511
  %511 = builtin "cmp_ule_Int32"(%505 : $Builtin.Int32, %510 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %512
  cond_br %511, bb59, bb62, scope 215             // id: %512

bb59:                                             // Preds: bb58
  br bb60(%472 : $Builtin.Int1), scope 215        // id: %513

// %514                                           // user: %516
bb60(%514 : $Builtin.Int1):                       // Preds: bb65 bb59
  %515 = integer_literal $Builtin.Int64, 1, scope 215 // user: %516
  br bb61(%515 : $Builtin.Int64, %514 : $Builtin.Int1), scope 215 // id: %516

// %517                                           // user: %519
// %518                                           // user: %523
bb61(%517 : $Builtin.Int64, %518 : $Builtin.Int1): // Preds: bb63 bb60
  %519 = builtin "sadd_with_overflow_Int64"(%496 : $Builtin.Int64, %517 : $Builtin.Int64, %464 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 215 // users: %521, %520
  %520 = tuple_extract %519 : $(Builtin.Int64, Builtin.Int1), 0, scope 215 // user: %523
  %521 = tuple_extract %519 : $(Builtin.Int64, Builtin.Int1), 1, scope 215 // user: %522
  cond_fail %521 : $Builtin.Int1, scope 215       // id: %522
  br bb56(%520 : $Builtin.Int64, %518 : $Builtin.Int1), scope 215 // id: %523

bb62:                                             // Preds: bb58
  br bb63(%472 : $Builtin.Int1), scope 215        // id: %524

// %525                                           // user: %527
bb63(%525 : $Builtin.Int1):                       // Preds: bb66 bb62
  %526 = integer_literal $Builtin.Int64, 2, scope 215 // user: %527
  br bb61(%526 : $Builtin.Int64, %525 : $Builtin.Int1), scope 215 // id: %527

bb64:                                             // Preds: bb57
  debug_value %500 : $UnicodeScalar, scope 215    // id: %528
  debug_value %500 : $UnicodeScalar, scope 215    // id: %529
  %530 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %531
  %531 = builtin "cmp_ule_Int32"(%505 : $Builtin.Int32, %530 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %532
  cond_br %531, bb65, bb66, scope 215             // id: %532

bb65:                                             // Preds: bb64
  br bb60(%497 : $Builtin.Int1), scope 215        // id: %533

bb66:                                             // Preds: bb64
  br bb63(%497 : $Builtin.Int1), scope 215        // id: %534

bb67:                                             // Preds: bb56
  %535 = struct $Int (%496 : $Builtin.Int64), scope 215 // user: %537
  %536 = struct $Bool (%497 : $Builtin.Int1), scope 215 // user: %537
  %537 = tuple $(count: Int, isASCII: Bool) (%535, %536), scope 215 // user: %538
  %538 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %537 : $(count: Int, isASCII: Bool), scope 215 // user: %539
  br bb68(%538 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %539

// %540                                           // user: %543
bb68(%540 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb122 bb67
  dealloc_stack %486 : $*UTF8, scope 215          // id: %541
  dealloc_stack %485 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %542
  switch_enum %540 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb69, case #Optional.none!enumelt: bb120, scope 215 // id: %543

// %544                                           // users: %547, %545
bb69(%544 : $(count: Int, isASCII: Bool)):        // Preds: bb68
  %545 = tuple_extract %544 : $(count: Int, isASCII: Bool), 0, scope 215 // users: %908, %907, %563, %549, %546
  debug_value %545 : $Int, scope 215              // id: %546
  %547 = tuple_extract %544 : $(count: Int, isASCII: Bool), 1, scope 215 // users: %905, %552, %548
  debug_value %547 : $Bool, scope 215             // id: %548
  %549 = struct_extract %545 : $Int, #Int._value, scope 215 // user: %550
  %550 = builtin "cmp_sge_Int64"(%462 : $Builtin.Int64, %549 : $Builtin.Int64) : $Builtin.Int1, scope 215 // user: %551
  cond_br %550, bb70, bb117, scope 215            // id: %551

bb70:                                             // Preds: bb69
  %552 = struct_extract %547 : $Bool, #Bool._value, scope 215 // user: %553
  cond_br %552, bb71, bb115, scope 215            // id: %553

bb71:                                             // Preds: bb70
  br bb72(%482 : $Int), scope 215                 // id: %554

// %555                                           // user: %557
bb72(%555 : $Int):                                // Preds: bb118 bb71
  %556 = integer_literal $Builtin.Int64, 1, scope 215 // user: %557
  br bb73(%556 : $Builtin.Int64, %555 : $Int, %464 : $Builtin.Int1), scope 215 // id: %557

// %558                                           // user: %561
// %559                                           // user: %563
// %560                                           // user: %565
bb73(%558 : $Builtin.Int64, %559 : $Int, %560 : $Builtin.Int1): // Preds: bb116 bb72
  %561 = struct $Int (%558 : $Builtin.Int64), scope 215 // user: %563
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %562 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // user: %563
  %563 = apply %562(%559, %545, %561) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // users: %813, %616, %614, %613, %567, %566, %564
  debug_value %563 : $_StringBuffer, scope 215    // id: %564
  cond_br %560, bb74, bb105, scope 215            // id: %565

bb74:                                             // Preds: bb73
  debug_value %563 : $_StringBuffer, scope 215    // id: %566
  %567 = struct_extract %563 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %573, %572, %569, %568
  %568 = struct_extract %567 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %574, %577
  debug_value %567 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %569
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %570 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %571
  %571 = apply %570() : $@convention(thin) () -> Int, scope 215 // users: %580, %579
  debug_value %567 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %572
  debug_value %567 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %573
  switch_enum %568 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb75, case #Optional.some!enumelt.1: bb76, scope 215 // id: %574

bb75:                                             // Preds: bb74
  cond_fail %464 : $Builtin.Int1, scope 215       // id: %575
  unreachable, scope 215                          // id: %576

bb76:                                             // Preds: bb74
  %577 = unchecked_enum_data %568 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %578
  %578 = ref_to_raw_pointer %577 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %582
  %579 = struct_extract %571 : $Int, #Int._value, scope 215 // user: %581
  debug_value %571 : $Int, scope 215              // id: %580
  %581 = builtin "truncOrBitCast_Int64_Word"(%579 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %582
  %582 = index_raw_pointer %578 : $Builtin.RawPointer, %581 : $Builtin.Word, scope 215 // user: %588
  debug_value %483 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %583
  %584 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %611, %590, %586
  %585 = alloc_stack $UTF8, scope 215             // users: %610, %590, %587
  store %483 to %584 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %586
  store %492 to %585 : $*UTF8, scope 215          // id: %587
  br bb77(%582 : $Builtin.RawPointer), scope 215  // id: %588

// %589                                           // users: %607, %605
bb77(%589 : $Builtin.RawPointer):                 // Preds: bb78 bb76
  %590 = apply %494(%584, %585) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %591
  switch_enum %590 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb78, case #UnicodeDecodingResult.emptyInput!enumelt: bb79, case #UnicodeDecodingResult.error!enumelt: bb104, scope 215 // id: %591

// %592                                           // users: %597, %596, %595, %594, %593
bb78(%592 : $UnicodeScalar):                      // Preds: bb77
  debug_value %592 : $UnicodeScalar, scope 215    // id: %593
  debug_value %592 : $UnicodeScalar, scope 215    // id: %594
  debug_value %592 : $UnicodeScalar, scope 215    // id: %595
  debug_value %592 : $UnicodeScalar, scope 215    // id: %596
  %597 = struct_extract %592 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %599, %598
  debug_value %597 : $UInt32, scope 215           // id: %598
  %599 = struct_extract %597 : $UInt32, #UInt32._value, scope 215 // user: %600
  %600 = builtin "u_to_u_checked_trunc_Int32_Int8"(%599 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 215 // users: %602, %601
  %601 = tuple_extract %600 : $(Builtin.Int8, Builtin.Int1), 0, scope 215 // user: %604
  %602 = tuple_extract %600 : $(Builtin.Int8, Builtin.Int1), 1, scope 215 // user: %603
  cond_fail %602 : $Builtin.Int1, scope 215       // id: %603
  %604 = struct $UInt8 (%601 : $Builtin.Int8), scope 215 // user: %606
  %605 = pointer_to_address %589 : $Builtin.RawPointer to [strict] $*UInt8, scope 215 // user: %606
  store %604 to %605 : $*UInt8, scope 215         // id: %606
  %607 = index_raw_pointer %589 : $Builtin.RawPointer, %470 : $Builtin.Word, scope 215 // user: %608
  br bb77(%607 : $Builtin.RawPointer), scope 215  // id: %608

bb79:                                             // Preds: bb77
  br bb80, scope 215                              // id: %609

bb80:                                             // Preds: bb104 bb79
  dealloc_stack %585 : $*UTF8, scope 215          // id: %610
  dealloc_stack %584 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %611
  br bb81, scope 215                              // id: %612

bb81:                                             // Preds: bb113 bb80
  debug_value %563 : $_StringBuffer, scope 215    // id: %613
  debug_value %563 : $_StringBuffer, scope 215    // id: %614
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %615 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // user: %616
  %616 = apply %615(%563) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // users: %684, %679, %680, %681, %617
  %617 = struct $String (%616 : $_StringCore), scope 215 // users: %675, %664, %662, %622, %621
  debug_value %441 : $UnsafePointer<Int8>, scope 215 // id: %618
  debug_value %447 : $Int, scope 215              // id: %619
  bind_memory %451 : $Builtin.RawPointer, %453 : $Builtin.Word to $*Int8, scope 215 // id: %620
  debug_value %617 : $String, scope 215           // id: %621
  debug_value %617 : $String, scope 215           // id: %622
  %623 = struct_extract %5 : $Bool, #Bool._value, scope 215 // user: %624
  cond_br %623, bb83, bb82, scope 215             // id: %624

bb82:                                             // Preds: bb81
  br bb86, scope 215                              // id: %625

bb83:                                             // Preds: bb81
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %626 = function_ref @_TTSf4n_g_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 238 // user: %628
  strong_retain %10 : $@box String, scope 215     // id: %627
  %628 = apply %626(%1, %10, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 238
  strong_release %10 : $@box String, scope 215    // id: %629
  %630 = string_literal utf8 ".", scope 215       // users: %632, %631
  debug_value %630 : $Builtin.RawPointer, scope 215 // id: %631
  %632 = struct $UnsafeMutableRawPointer (%630 : $Builtin.RawPointer), scope 215 // user: %633
  %633 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %632 : $UnsafeMutableRawPointer, scope 215 // users: %659, %639, %635
  %634 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 215 // users: %659, %639, %636
  debug_value %633 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %635
  debug_value %634 : $Optional<AnyObject>, scope 215 // id: %636
  %637 = integer_literal $Builtin.Int64, 1, scope 215 // users: %659, %638
  %638 = struct $UInt (%637 : $Builtin.Int64), scope 215 // user: %639
  %639 = struct $_StringCore (%633 : $Optional<UnsafeMutableRawPointer>, %638 : $UInt, %634 : $Optional<AnyObject>), scope 215 // user: %640
  %640 = struct $String (%639 : $_StringCore), scope 215 // users: %655, %644, %642
  debug_value_addr %11 : $*String, scope 240      // id: %641
  debug_value %640 : $String, scope 240           // id: %642
  debug_value_addr %11 : $*String, scope 240      // id: %643
  debug_value %640 : $String, scope 240           // id: %644
  %645 = struct_element_addr %11 : $*String, #String._core, scope 240 // users: %659, %653, %646
  %646 = struct_element_addr %645 : $*_StringCore, #_StringCore._countAndFlags, scope 240 // user: %647
  %647 = struct_element_addr %646 : $*UInt, #UInt._value, scope 240 // user: %648
  %648 = load %647 : $*Builtin.Int64, scope 240   // user: %650
  %649 = integer_literal $Builtin.Int64, 4611686018427387903, scope 240 // user: %650
  %650 = builtin "and_Int64"(%648 : $Builtin.Int64, %649 : $Builtin.Int64) : $Builtin.Int64, scope 240 // user: %651
  %651 = builtin "cmp_eq_Int64"(%650 : $Builtin.Int64, %462 : $Builtin.Int64) : $Builtin.Int1, scope 240 // user: %652
  cond_br %651, bb84, bb85, scope 240             // id: %652

bb84:                                             // Preds: bb83
  %653 = struct_element_addr %645 : $*_StringCore, #_StringCore._owner, scope 240 // user: %654
  %654 = load %653 : $*Optional<AnyObject>, scope 240 // user: %656
  store %640 to %11 : $*String, scope 240         // id: %655
  release_value %654 : $Optional<AnyObject>, scope 215 // id: %656
  br bb86, scope 215                              // id: %657

bb85:                                             // Preds: bb83
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %658 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 240 // user: %659
  %659 = apply %658(%633, %637, %634, %645) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 240
  br bb86, scope 240                              // id: %660

bb86:                                             // Preds: bb82 bb85 bb84
  debug_value_addr %11 : $*String, scope 242      // id: %661
  debug_value %617 : $String, scope 242           // id: %662
  debug_value_addr %11 : $*String, scope 242      // id: %663
  debug_value %617 : $String, scope 242           // id: %664
  %665 = struct_element_addr %11 : $*String, #String._core, scope 242 // users: %683, %673, %666
  %666 = struct_element_addr %665 : $*_StringCore, #_StringCore._countAndFlags, scope 242 // user: %667
  %667 = struct_element_addr %666 : $*UInt, #UInt._value, scope 242 // user: %668
  %668 = load %667 : $*Builtin.Int64, scope 242   // user: %670
  %669 = integer_literal $Builtin.Int64, 4611686018427387903, scope 242 // user: %670
  %670 = builtin "and_Int64"(%668 : $Builtin.Int64, %669 : $Builtin.Int64) : $Builtin.Int64, scope 242 // user: %671
  %671 = builtin "cmp_eq_Int64"(%670 : $Builtin.Int64, %462 : $Builtin.Int64) : $Builtin.Int1, scope 242 // user: %672
  cond_br %671, bb87, bb88, scope 242             // id: %672

bb87:                                             // Preds: bb86
  %673 = struct_element_addr %665 : $*_StringCore, #_StringCore._owner, scope 242 // user: %674
  %674 = load %673 : $*Optional<AnyObject>, scope 242 // user: %676
  store %617 to %11 : $*String, scope 242         // id: %675
  release_value %674 : $Optional<AnyObject>, scope 215 // id: %676
  br bb89, scope 215                              // id: %677

bb88:                                             // Preds: bb86
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %678 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 242 // user: %683
  %679 = struct_extract %616 : $_StringCore, #_StringCore._owner, scope 242 // user: %683
  %680 = struct_extract %616 : $_StringCore, #_StringCore._countAndFlags, scope 242 // user: %682
  %681 = struct_extract %616 : $_StringCore, #_StringCore._baseAddress, scope 242 // user: %683
  %682 = struct_extract %680 : $UInt, #UInt._value, scope 242 // user: %683
  %683 = apply %678(%681, %682, %679, %665) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 242
  release_value %616 : $_StringCore, scope 215    // id: %684
  br bb89, scope 242                              // id: %685

bb89:                                             // Preds: bb88 bb121 bb87
  %686 = alloc_stack $Any, scope 215              // users: %810, %779, %778, %743, %738, %737, %709, %705
  %687 = alloc_stack $Optional<(label: Optional<String>, value: Any)>, scope 215 // users: %1878, %1879, %809, %707, %701
  checked_cast_br [exact] %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)> to $_AnyCollectionBox<(label: Optional<String>, value: Any)>, bb90, bb274, scope 215 // id: %688

bb90(%689 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>): // Preds: bb89
  // function_ref _abstract(file : StaticString, line : UInt) -> Never
  %690 = function_ref @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never : $@convention(thin) (StaticString, UInt) -> Never, scope 215 // user: %699
  %691 = string_literal utf8 "/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.46.2~7/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift", scope 215 // user: %693
  %692 = integer_literal $Builtin.Word, 183, scope 215 // user: %695
  %693 = builtin "ptrtoint_Word"(%691 : $Builtin.RawPointer) : $Builtin.Word, scope 215 // user: %695
  %694 = integer_literal $Builtin.Int8, 2, scope 215 // user: %695
  %695 = struct $StaticString (%693 : $Builtin.Word, %692 : $Builtin.Word, %694 : $Builtin.Int8), scope 215 // user: %699
  %696 = integer_literal $Builtin.Int64, 304, scope 215 // user: %697
  %697 = struct $UInt (%696 : $Builtin.Int64), scope 215 // user: %699
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %698
  %699 = apply %690(%695, %697) : $@convention(thin) (StaticString, UInt) -> Never, scope 215
  unreachable, scope 215                          // id: %700

bb91:                                             // Preds: bb274
  %701 = unchecked_take_enum_data_addr %687 : $*Optional<(label: Optional<String>, value: Any)>, #Optional.some!enumelt.1, scope 215 // users: %704, %702
  %702 = tuple_element_addr %701 : $*(label: Optional<String>, value: Any), 0, scope 215 // user: %703
  %703 = load %702 : $*Optional<String>, scope 215 // user: %706
  %704 = tuple_element_addr %701 : $*(label: Optional<String>, value: Any), 1, scope 215 // user: %705
  copy_addr [take] %704 to [initialization] %686 : $*Any, scope 215 // id: %705
  release_value %703 : $Optional<String>, scope 215 // id: %706
  dealloc_stack %687 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %707
  %708 = alloc_stack $Any, scope 215              // users: %734, %711, %709
  copy_addr %686 to [initialization] %708 : $*Any, scope 215 // id: %709
  // function_ref specialized Mirror.init(reflecting : Any) -> Mirror
  %710 = function_ref @_TTSfq4n_d___TFVs6MirrorCfT10reflectingP__S_ : $@convention(thin) (@in Any) -> @owned Mirror, scope 215 // user: %711
  %711 = apply %710(%708) : $@convention(thin) (@in Any) -> @owned Mirror, scope 215 // users: %732, %730, %712
  %712 = struct_extract %711 : $Mirror, #Mirror.displayStyle, scope 215 // users: %715, %716, %714, %713
  debug_value %712 : $Optional<Mirror.DisplayStyle>, scope 215 // id: %713
  debug_value %712 : $Optional<Mirror.DisplayStyle>, scope 215 // id: %714
  switch_enum %712 : $Optional<Mirror.DisplayStyle>, case #Optional.some!enumelt.1: bb92, case #Optional.none!enumelt: bb102, scope 215 // id: %715

bb92:                                             // Preds: bb91
  %716 = unchecked_enum_data %712 : $Optional<Mirror.DisplayStyle>, #Optional.some!enumelt.1, scope 215 // users: %726, %717
  debug_value %716 : $Mirror.DisplayStyle, scope 215 // id: %717
  %718 = integer_literal $Builtin.Int64, 0, scope 215 // user: %726
  %719 = integer_literal $Builtin.Int64, 1, scope 215 // user: %726
  %720 = integer_literal $Builtin.Int64, 2, scope 215 // user: %726
  %721 = integer_literal $Builtin.Int64, 3, scope 215 // users: %727, %726
  %722 = integer_literal $Builtin.Int64, 4, scope 215 // user: %726
  %723 = integer_literal $Builtin.Int64, 5, scope 215 // user: %726
  %724 = integer_literal $Builtin.Int64, 6, scope 215 // user: %726
  %725 = integer_literal $Builtin.Int64, 7, scope 215 // user: %726
  %726 = select_enum %716 : $Mirror.DisplayStyle, case #Mirror.DisplayStyle.struct!enumelt: %718, case #Mirror.DisplayStyle.class!enumelt: %719, case #Mirror.DisplayStyle.enum!enumelt: %720, case #Mirror.DisplayStyle.tuple!enumelt: %721, case #Mirror.DisplayStyle.optional!enumelt: %722, case #Mirror.DisplayStyle.collection!enumelt: %723, case #Mirror.DisplayStyle.dictionary!enumelt: %724, case #Mirror.DisplayStyle.set!enumelt: %725 : $Builtin.Int64, scope 215 // user: %727
  %727 = builtin "cmp_eq_Int64"(%726 : $Builtin.Int64, %721 : $Builtin.Int64) : $Builtin.Int1, scope 215 // user: %728
  br bb93(%727 : $Builtin.Int1), scope 215        // id: %728

// %729                                           // user: %735
bb93(%729 : $Builtin.Int1):                       // Preds: bb102 bb92
  %730 = struct_extract %711 : $Mirror, #Mirror.children, scope 215 // user: %731
  release_value %730 : $AnyCollection<(label: Optional<String>, value: Any)>, scope 215 // id: %731
  %732 = struct_extract %711 : $Mirror, #Mirror._makeSuperclassMirror, scope 215 // user: %733
  strong_release %732 : $@callee_owned () -> @owned Optional<Mirror>, scope 215 // id: %733
  dealloc_stack %708 : $*Any, scope 215           // id: %734
  cond_br %729, bb94, bb96, scope 215             // id: %735

bb94:                                             // Preds: bb93
  %736 = alloc_stack $Any, scope 215              // users: %740, %741, %737
  copy_addr %686 to [initialization] %736 : $*Any, scope 215 // id: %737
  destroy_addr %686 : $*Any, scope 215            // id: %738
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %739 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 215 // user: %740
  %740 = apply %739(%736, %11) : $@convention(thin) (@in Any, @inout String) -> (), scope 215
  dealloc_stack %736 : $*Any, scope 215           // id: %741
  br bb95, scope 215                              // id: %742

bb95:                                             // Preds: bb101 bb100 bb94
  dealloc_stack %686 : $*Any, scope 215           // id: %743
  br bb5, scope 215                               // id: %744

bb96:                                             // Preds: bb93
  %745 = string_literal utf8 "(", scope 215       // users: %747, %746
  debug_value %745 : $Builtin.RawPointer, scope 215 // id: %746
  %747 = struct $UnsafeMutableRawPointer (%745 : $Builtin.RawPointer), scope 215 // user: %748
  %748 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %747 : $UnsafeMutableRawPointer, scope 215 // users: %775, %754, %750
  %749 = enum $Optional<AnyObject>, #Optional.none!enumelt, scope 215 // users: %805, %775, %789, %788, %754, %751
  debug_value %748 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %750
  debug_value %749 : $Optional<AnyObject>, scope 215 // id: %751
  %752 = integer_literal $Builtin.Int64, 1, scope 215 // users: %805, %775, %753
  %753 = struct $UInt (%752 : $Builtin.Int64), scope 215 // users: %789, %754
  %754 = struct $_StringCore (%748 : $Optional<UnsafeMutableRawPointer>, %753 : $UInt, %749 : $Optional<AnyObject>), scope 215 // user: %755
  %755 = struct $String (%754 : $_StringCore), scope 215 // users: %771, %759, %757
  debug_value_addr %11 : $*String, scope 244      // id: %756
  debug_value %755 : $String, scope 244           // id: %757
  debug_value_addr %11 : $*String, scope 244      // id: %758
  debug_value %755 : $String, scope 244           // id: %759
  %760 = struct_element_addr %11 : $*String, #String._core, scope 244 // users: %799, %805, %775, %769, %761
  %761 = struct_element_addr %760 : $*_StringCore, #_StringCore._countAndFlags, scope 244 // user: %762
  %762 = struct_element_addr %761 : $*UInt, #UInt._value, scope 244 // users: %795, %763
  %763 = load %762 : $*Builtin.Int64, scope 244   // user: %765
  %764 = integer_literal $Builtin.Int64, 4611686018427387903, scope 244 // users: %796, %765
  %765 = builtin "and_Int64"(%763 : $Builtin.Int64, %764 : $Builtin.Int64) : $Builtin.Int64, scope 244 // user: %767
  %766 = integer_literal $Builtin.Int64, 0, scope 244 // users: %797, %767
  %767 = builtin "cmp_eq_Int64"(%765 : $Builtin.Int64, %766 : $Builtin.Int64) : $Builtin.Int1, scope 244 // user: %768
  cond_br %767, bb97, bb98, scope 244             // id: %768

bb97:                                             // Preds: bb96
  %769 = struct_element_addr %760 : $*_StringCore, #_StringCore._owner, scope 244 // user: %770
  %770 = load %769 : $*Optional<AnyObject>, scope 244 // user: %772
  store %755 to %11 : $*String, scope 244         // id: %771
  release_value %770 : $Optional<AnyObject>, scope 215 // id: %772
  br bb99, scope 244                              // id: %773

bb98:                                             // Preds: bb96
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %774 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 244 // user: %775
  %775 = apply %774(%748, %752, %749, %760) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 244
  br bb99, scope 244                              // id: %776

bb99:                                             // Preds: bb98 bb97
  %777 = alloc_stack $Any, scope 215              // users: %781, %782, %778
  copy_addr %686 to [initialization] %777 : $*Any, scope 215 // id: %778
  destroy_addr %686 : $*Any, scope 215            // id: %779
  // function_ref specialized _debugPrint_unlocked<A, B where ...> (A, inout B) -> ()
  %780 = function_ref @_TTSg5P__SSSSs16TextOutputStreams___TFs20_debugPrint_unlockedu0_R_s16TextOutputStreamrFTxRq__T_ : $@convention(thin) (@in Any, @inout String) -> (), scope 215 // user: %781
  %781 = apply %780(%777, %11) : $@convention(thin) (@in Any, @inout String) -> (), scope 215
  dealloc_stack %777 : $*Any, scope 215           // id: %782
  %783 = string_literal utf8 ")", scope 215       // users: %785, %784
  debug_value %783 : $Builtin.RawPointer, scope 215 // id: %784
  %785 = struct $UnsafeMutableRawPointer (%783 : $Builtin.RawPointer), scope 215 // user: %786
  %786 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt.1, %785 : $UnsafeMutableRawPointer, scope 215 // users: %805, %789, %787
  debug_value %786 : $Optional<UnsafeMutableRawPointer>, scope 215 // id: %787
  debug_value %749 : $Optional<AnyObject>, scope 215 // id: %788
  %789 = struct $_StringCore (%786 : $Optional<UnsafeMutableRawPointer>, %753 : $UInt, %749 : $Optional<AnyObject>), scope 215 // user: %790
  %790 = struct $String (%789 : $_StringCore), scope 215 // users: %801, %794, %792
  debug_value_addr %11 : $*String, scope 246      // id: %791
  debug_value %790 : $String, scope 246           // id: %792
  debug_value_addr %11 : $*String, scope 246      // id: %793
  debug_value %790 : $String, scope 246           // id: %794
  %795 = load %762 : $*Builtin.Int64, scope 246   // user: %796
  %796 = builtin "and_Int64"(%795 : $Builtin.Int64, %764 : $Builtin.Int64) : $Builtin.Int64, scope 246 // user: %797
  %797 = builtin "cmp_eq_Int64"(%796 : $Builtin.Int64, %766 : $Builtin.Int64) : $Builtin.Int1, scope 246 // user: %798
  cond_br %797, bb100, bb101, scope 246           // id: %798

bb100:                                            // Preds: bb99
  %799 = struct_element_addr %760 : $*_StringCore, #_StringCore._owner, scope 246 // user: %800
  %800 = load %799 : $*Optional<AnyObject>, scope 246 // user: %802
  store %790 to %11 : $*String, scope 246         // id: %801
  release_value %800 : $Optional<AnyObject>, scope 215 // id: %802
  br bb95, scope 215                              // id: %803

bb101:                                            // Preds: bb99
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %804 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 246 // user: %805
  %805 = apply %804(%786, %752, %749, %760) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 246
  br bb95, scope 246                              // id: %806

bb102:                                            // Preds: bb91
  %807 = integer_literal $Builtin.Int1, 0, scope 215 // user: %808
  br bb93(%807 : $Builtin.Int1), scope 215        // id: %808

bb103:                                            // Preds: bb274
  dealloc_stack %687 : $*Optional<(label: Optional<String>, value: Any)>, scope 215 // id: %809
  dealloc_stack %686 : $*Any, scope 215           // id: %810
  br bb5, scope 215                               // id: %811

bb104:                                            // Preds: bb77
  br bb80, scope 215                              // id: %812

bb105:                                            // Preds: bb73
  %813 = struct_extract %563 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %819, %818, %815, %814
  %814 = struct_extract %813 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %820, %823
  debug_value %813 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %815
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %816 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %817
  %817 = apply %816() : $@convention(thin) () -> Int, scope 215 // users: %826, %825
  debug_value %813 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %818
  debug_value %813 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %819
  switch_enum %814 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb106, case #Optional.some!enumelt.1: bb107, scope 215 // id: %820

bb106:                                            // Preds: bb105
  cond_fail %464 : $Builtin.Int1, scope 215       // id: %821
  unreachable, scope 215                          // id: %822

bb107:                                            // Preds: bb105
  %823 = unchecked_enum_data %814 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %824
  %824 = ref_to_raw_pointer %823 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %828
  %825 = struct_extract %817 : $Int, #Int._value, scope 215 // user: %827
  debug_value %817 : $Int, scope 215              // id: %826
  %827 = builtin "truncOrBitCast_Int64_Word"(%825 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %828
  %828 = index_raw_pointer %824 : $Builtin.RawPointer, %827 : $Builtin.Word, scope 215 // user: %834
  debug_value %483 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %829
  %830 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %898, %836, %832
  %831 = alloc_stack $UTF8, scope 215             // users: %897, %836, %833
  store %483 to %830 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %832
  store %492 to %831 : $*UTF8, scope 215          // id: %833
  br bb108(%828 : $Builtin.RawPointer), scope 215 // id: %834

// %835                                           // users: %878, %874, %859, %855
bb108(%835 : $Builtin.RawPointer):                // Preds: bb111 bb110 bb107
  %836 = apply %494(%830, %831) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %837
  switch_enum %836 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb109, case #UnicodeDecodingResult.emptyInput!enumelt: bb112, case #UnicodeDecodingResult.error!enumelt: bb114, scope 215 // id: %837

// %838                                           // users: %843, %842, %841, %840, %839
bb109(%838 : $UnicodeScalar):                     // Preds: bb108
  debug_value %838 : $UnicodeScalar, scope 215    // id: %839
  debug_value %838 : $UnicodeScalar, scope 215    // id: %840
  debug_value %838 : $UnicodeScalar, scope 215    // id: %841
  debug_value %838 : $UnicodeScalar, scope 215    // id: %842
  %843 = struct_extract %838 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %846, %844
  debug_value %843 : $UInt32, scope 215           // id: %844
  %845 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %847
  %846 = struct_extract %843 : $UInt32, #UInt32._value, scope 215 // users: %881, %863, %849, %847
  %847 = builtin "cmp_ule_Int32"(%846 : $Builtin.Int32, %845 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %848
  cond_br %847, bb110, bb111, scope 215           // id: %848

bb110:                                            // Preds: bb109
  %849 = builtin "u_to_u_checked_trunc_Int32_Int16"(%846 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %851, %850
  %850 = tuple_extract %849 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %853
  %851 = tuple_extract %849 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %852
  cond_fail %851 : $Builtin.Int1, scope 215       // id: %852
  %853 = struct $UInt16 (%850 : $Builtin.Int16), scope 215 // users: %856, %854
  debug_value %853 : $UInt16, scope 215           // id: %854
  %855 = pointer_to_address %835 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %856
  store %853 to %855 : $*UInt16, scope 215        // id: %856
  %857 = metatype $@thick UInt16.Type, scope 215  // user: %858
  %858 = builtin "strideof_nonzero"<UInt16>(%857 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // user: %859
  %859 = index_raw_pointer %835 : $Builtin.RawPointer, %858 : $Builtin.Word, scope 215 // user: %860
  br bb108(%859 : $Builtin.RawPointer), scope 215 // id: %860

bb111:                                            // Preds: bb109
  %861 = integer_literal $Builtin.Int32, 55232, scope 215 // user: %864
  %862 = integer_literal $Builtin.Int32, 10, scope 215 // user: %863
  %863 = builtin "lshr_Int32"(%846 : $Builtin.Int32, %862 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %864
  %864 = builtin "uadd_with_overflow_Int32"(%861 : $Builtin.Int32, %863 : $Builtin.Int32, %464 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %866, %865
  %865 = tuple_extract %864 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %868
  %866 = tuple_extract %864 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %867
  cond_fail %866 : $Builtin.Int1, scope 215       // id: %867
  %868 = builtin "u_to_u_checked_trunc_Int32_Int16"(%865 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %870, %869
  %869 = tuple_extract %868 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %872
  %870 = tuple_extract %868 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %871
  cond_fail %870 : $Builtin.Int1, scope 215       // id: %871
  %872 = struct $UInt16 (%869 : $Builtin.Int16), scope 215 // users: %875, %873
  debug_value %872 : $UInt16, scope 215           // id: %873
  %874 = pointer_to_address %835 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %875
  store %872 to %874 : $*UInt16, scope 215        // id: %875
  %876 = metatype $@thick UInt16.Type, scope 215  // user: %877
  %877 = builtin "strideof_nonzero"<UInt16>(%876 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // users: %894, %878
  %878 = index_raw_pointer %835 : $Builtin.RawPointer, %877 : $Builtin.Word, scope 215 // users: %894, %892
  %879 = integer_literal $Builtin.Int32, 56320, scope 215 // user: %882
  %880 = integer_literal $Builtin.Int32, 1023, scope 215 // user: %881
  %881 = builtin "and_Int32"(%846 : $Builtin.Int32, %880 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %882
  %882 = builtin "uadd_with_overflow_Int32"(%879 : $Builtin.Int32, %881 : $Builtin.Int32, %464 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %884, %883
  %883 = tuple_extract %882 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %886
  %884 = tuple_extract %882 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %885
  cond_fail %884 : $Builtin.Int1, scope 215       // id: %885
  %886 = builtin "u_to_u_checked_trunc_Int32_Int16"(%883 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %888, %887
  %887 = tuple_extract %886 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %890
  %888 = tuple_extract %886 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %889
  cond_fail %888 : $Builtin.Int1, scope 215       // id: %889
  %890 = struct $UInt16 (%887 : $Builtin.Int16), scope 215 // users: %893, %891
  debug_value %890 : $UInt16, scope 215           // id: %891
  %892 = pointer_to_address %878 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %893
  store %890 to %892 : $*UInt16, scope 215        // id: %893
  %894 = index_raw_pointer %878 : $Builtin.RawPointer, %877 : $Builtin.Word, scope 215 // user: %895
  br bb108(%894 : $Builtin.RawPointer), scope 215 // id: %895

bb112:                                            // Preds: bb108
  br bb113, scope 215                             // id: %896

bb113:                                            // Preds: bb114 bb112
  dealloc_stack %831 : $*UTF8, scope 215          // id: %897
  dealloc_stack %830 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %898
  br bb81, scope 215                              // id: %899

bb114:                                            // Preds: bb108
  br bb113, scope 215                             // id: %900

bb115:                                            // Preds: bb70
  br bb116(%482 : $Int), scope 215                // id: %901

// %902                                           // user: %904
bb116(%902 : $Int):                               // Preds: bb119 bb115
  %903 = integer_literal $Builtin.Int64, 2, scope 215 // user: %904
  br bb73(%903 : $Builtin.Int64, %902 : $Int, %472 : $Builtin.Int1), scope 215 // id: %904

bb117:                                            // Preds: bb69
  %905 = struct_extract %547 : $Bool, #Bool._value, scope 215 // user: %906
  cond_br %905, bb118, bb119, scope 215           // id: %906

bb118:                                            // Preds: bb117
  br bb72(%545 : $Int), scope 215                 // id: %907

bb119:                                            // Preds: bb117
  br bb116(%545 : $Int), scope 215                // id: %908

bb120:                                            // Preds: bb68
  debug_value %441 : $UnsafePointer<Int8>, scope 215 // id: %909
  debug_value %447 : $Int, scope 215              // id: %910
  bind_memory %451 : $Builtin.RawPointer, %453 : $Builtin.Word to $*Int8, scope 215 // id: %911
  br bb121, scope 215                             // id: %912

bb121:                                            // Preds: bb123 bb120
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %913 = function_ref @_TTSf4n_g_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 248 // user: %915
  strong_retain %10 : $@box String, scope 215     // id: %914
  %915 = apply %913(%1, %10, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 248
  strong_release %10 : $@box String, scope 215    // id: %916
  br bb89, scope 215                              // id: %917

bb122:                                            // Preds: bb56
  %918 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 215 // user: %919
  br bb68(%918 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %919

bb123:                                            // Preds: bb54
  br bb121, scope 215                             // id: %920

bb124:                                            // Preds: bb1
  %921 = integer_literal $Builtin.Int1, -1, scope 215 // users: %1031, %969, %1214, %1187, %1169, %1126, %1049, %993, %937, %922
  %922 = struct $Bool (%921 : $Builtin.Int1), scope 215 // users: %926, %923
  debug_value %922 : $Bool, scope 215             // id: %923
  // function_ref swift_getTypeName
  %924 = function_ref @swift_getTypeName : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 215 // user: %926
  retain_value %12 : $String, scope 215           // id: %925
  %926 = apply %924(%1, %922) : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 215 // users: %928, %927
  %927 = tuple_extract %926 : $(UnsafePointer<UInt8>, Int), 0, scope 215 // users: %941, %939, %931, %929
  %928 = tuple_extract %926 : $(UnsafePointer<UInt8>, Int), 1, scope 215 // users: %940, %935, %933, %930
  debug_value %927 : $UnsafePointer<UInt8>, scope 215 // id: %929
  debug_value %928 : $Int, scope 215              // id: %930
  %931 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %927 : $UnsafePointer<UInt8>, scope 215 // users: %952, %932
  debug_value %931 : $Optional<UnsafePointer<UInt8>>, scope 250 // id: %932
  debug_value %928 : $Int, scope 250              // id: %933
  %934 = integer_literal $Builtin.Int64, 0, scope 250 // users: %1102, %969, %1024, %956, %936
  %935 = struct_extract %928 : $Int, #Int._value, scope 250 // users: %946, %936
  %936 = builtin "cmp_sge_Int64"(%935 : $Builtin.Int64, %934 : $Builtin.Int64) : $Builtin.Int1, scope 250 // user: %937
  %937 = builtin "xor_Int1"(%936 : $Builtin.Int1, %921 : $Builtin.Int1) : $Builtin.Int1, scope 250 // user: %938
  cond_fail %937 : $Builtin.Int1, scope 250       // id: %938
  debug_value %927 : $UnsafePointer<UInt8>, scope 250 // id: %939
  debug_value %928 : $Int, scope 250              // id: %940
  %941 = struct_extract %927 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 250 // user: %949
  %942 = metatype $@thick UInt8.Type, scope 250   // user: %943
  %943 = builtin "strideof_nonzero"<UInt8>(%942 : $@thick UInt8.Type) : $Builtin.Word, scope 250 // users: %1081, %944
  %944 = builtin "zextOrBitCast_Word_Int64"(%943 : $Builtin.Word) : $Builtin.Int64, scope 250 // user: %946
  %945 = integer_literal $Builtin.Int1, 0, scope 250 // users: %1209, %998, %987, %946
  %946 = builtin "smul_with_overflow_Int64"(%935 : $Builtin.Int64, %944 : $Builtin.Int64, %945 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 250 // user: %947
  %947 = tuple_extract %946 : $(Builtin.Int64, Builtin.Int1), 0, scope 250 // user: %948
  %948 = builtin "truncOrBitCast_Int64_Word"(%947 : $Builtin.Int64) : $Builtin.Word, scope 250 // user: %949
  %949 = index_raw_pointer %941 : $Builtin.RawPointer, %948 : $Builtin.Word, scope 250 // user: %950
  %950 = struct $UnsafePointer<UInt8> (%949 : $Builtin.RawPointer), scope 250 // user: %951
  %951 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %950 : $UnsafePointer<UInt8>, scope 250 // user: %952
  %952 = struct $UnsafeBufferPointer<UInt8> (%931 : $Optional<UnsafePointer<UInt8>>, %951 : $Optional<UnsafePointer<UInt8>>), scope 250 // users: %957, %955, %954, %953
  debug_value %952 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %953
  debug_value %952 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %954
  debug_value %952 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %955
  %956 = struct $Int (%934 : $Builtin.Int64), scope 215 // users: %1206, %1028, %957
  %957 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%952 : $UnsafeBufferPointer<UInt8>, %956 : $Int), scope 215 // users: %1137, %1134, %1060, %1057, %961, %958
  debug_value %957 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %958
  %959 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1016, %972, %961
  %960 = alloc_stack $UTF8, scope 215             // users: %1015, %972, %967
  store %957 to %959 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %961
  %962 = integer_literal $Builtin.Int32, 0, scope 215 // user: %963
  %963 = struct $UInt32 (%962 : $Builtin.Int32), scope 215 // user: %966
  %964 = integer_literal $Builtin.Int8, 0, scope 215 // user: %965
  %965 = struct $UInt8 (%964 : $Builtin.Int8), scope 215 // user: %966
  %966 = struct $UTF8 (%963 : $UInt32, %965 : $UInt8), scope 215 // users: %1138, %1061, %967
  store %966 to %960 : $*UTF8, scope 215          // id: %967
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %968 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // users: %1141, %1064, %972
  br bb125(%934 : $Builtin.Int64, %921 : $Builtin.Int1), scope 215 // id: %969

// %970                                           // users: %1009, %993
// %971                                           // users: %1008, %1007, %1010
bb125(%970 : $Builtin.Int64, %971 : $Builtin.Int1): // Preds: bb130 bb124
  %972 = apply %968(%959, %960) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %973
  switch_enum %972 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb126, case #UnicodeDecodingResult.emptyInput!enumelt: bb136, case #UnicodeDecodingResult.error!enumelt: bb170, scope 215 // id: %973

// %974                                           // users: %1003, %1002, %983, %982, %977, %976, %975
bb126(%974 : $UnicodeScalar):                     // Preds: bb125
  debug_value %974 : $UnicodeScalar, scope 215    // id: %975
  debug_value %974 : $UnicodeScalar, scope 215    // id: %976
  %977 = struct_extract %974 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // user: %979
  %978 = integer_literal $Builtin.Int32, 127, scope 215 // user: %980
  %979 = struct_extract %977 : $UInt32, #UInt32._value, scope 215 // users: %1005, %985, %980
  %980 = builtin "cmp_ugt_Int32"(%979 : $Builtin.Int32, %978 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %981
  cond_br %980, bb127, bb133, scope 215           // id: %981

bb127:                                            // Preds: bb126
  debug_value %974 : $UnicodeScalar, scope 215    // id: %982
  debug_value %974 : $UnicodeScalar, scope 215    // id: %983
  %984 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %985
  %985 = builtin "cmp_ule_Int32"(%979 : $Builtin.Int32, %984 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %986
  cond_br %985, bb128, bb131, scope 215           // id: %986

bb128:                                            // Preds: bb127
  br bb129(%945 : $Builtin.Int1), scope 215       // id: %987

// %988                                           // user: %990
bb129(%988 : $Builtin.Int1):                      // Preds: bb134 bb128
  %989 = integer_literal $Builtin.Int64, 1, scope 215 // user: %990
  br bb130(%989 : $Builtin.Int64, %988 : $Builtin.Int1), scope 215 // id: %990

// %991                                           // user: %993
// %992                                           // user: %997
bb130(%991 : $Builtin.Int64, %992 : $Builtin.Int1): // Preds: bb132 bb129
  %993 = builtin "sadd_with_overflow_Int64"(%970 : $Builtin.Int64, %991 : $Builtin.Int64, %921 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 215 // users: %995, %994
  %994 = tuple_extract %993 : $(Builtin.Int64, Builtin.Int1), 0, scope 215 // user: %997
  %995 = tuple_extract %993 : $(Builtin.Int64, Builtin.Int1), 1, scope 215 // user: %996
  cond_fail %995 : $Builtin.Int1, scope 215       // id: %996
  br bb125(%994 : $Builtin.Int64, %992 : $Builtin.Int1), scope 215 // id: %997

bb131:                                            // Preds: bb127
  br bb132(%945 : $Builtin.Int1), scope 215       // id: %998

// %999                                           // user: %1001
bb132(%999 : $Builtin.Int1):                      // Preds: bb135 bb131
  %1000 = integer_literal $Builtin.Int64, 2, scope 215 // user: %1001
  br bb130(%1000 : $Builtin.Int64, %999 : $Builtin.Int1), scope 215 // id: %1001

bb133:                                            // Preds: bb126
  debug_value %974 : $UnicodeScalar, scope 215    // id: %1002
  debug_value %974 : $UnicodeScalar, scope 215    // id: %1003
  %1004 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1005
  %1005 = builtin "cmp_ule_Int32"(%979 : $Builtin.Int32, %1004 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1006
  cond_br %1005, bb134, bb135, scope 215          // id: %1006

bb134:                                            // Preds: bb133
  br bb129(%971 : $Builtin.Int1), scope 215       // id: %1007

bb135:                                            // Preds: bb133
  br bb132(%971 : $Builtin.Int1), scope 215       // id: %1008

bb136:                                            // Preds: bb125
  %1009 = struct $Int (%970 : $Builtin.Int64), scope 215 // user: %1011
  %1010 = struct $Bool (%971 : $Builtin.Int1), scope 215 // user: %1011
  %1011 = tuple $(count: Int, isASCII: Bool) (%1009, %1010), scope 215 // user: %1012
  %1012 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %1011 : $(count: Int, isASCII: Bool), scope 215 // user: %1013
  br bb137(%1012 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %1013

// %1014                                          // user: %1017
bb137(%1014 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb170 bb136
  dealloc_stack %960 : $*UTF8, scope 215          // id: %1015
  dealloc_stack %959 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1016
  switch_enum %1014 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb138, case #Optional.none!enumelt: bb169, scope 215 // id: %1017

// %1018                                          // users: %1021, %1019
bb138(%1018 : $(count: Int, isASCII: Bool)):      // Preds: bb137
  %1019 = tuple_extract %1018 : $(count: Int, isASCII: Bool), 0, scope 215 // users: %1213, %1212, %1037, %1023, %1020
  debug_value %1019 : $Int, scope 215             // id: %1020
  %1021 = tuple_extract %1018 : $(count: Int, isASCII: Bool), 1, scope 215 // users: %1210, %1026, %1022
  debug_value %1021 : $Bool, scope 215            // id: %1022
  %1023 = struct_extract %1019 : $Int, #Int._value, scope 215 // user: %1024
  %1024 = builtin "cmp_sge_Int64"(%934 : $Builtin.Int64, %1023 : $Builtin.Int64) : $Builtin.Int1, scope 215 // user: %1025
  cond_br %1024, bb139, bb166, scope 215          // id: %1025

bb139:                                            // Preds: bb138
  %1026 = struct_extract %1021 : $Bool, #Bool._value, scope 215 // user: %1027
  cond_br %1026, bb140, bb164, scope 215          // id: %1027

bb140:                                            // Preds: bb139
  br bb141(%956 : $Int), scope 215                // id: %1028

// %1029                                          // user: %1031
bb141(%1029 : $Int):                              // Preds: bb167 bb140
  %1030 = integer_literal $Builtin.Int64, 1, scope 215 // user: %1031
  br bb142(%1030 : $Builtin.Int64, %1029 : $Int, %921 : $Builtin.Int1), scope 215 // id: %1031

// %1032                                          // user: %1035
// %1033                                          // user: %1037
// %1034                                          // user: %1039
bb142(%1032 : $Builtin.Int64, %1033 : $Int, %1034 : $Builtin.Int1): // Preds: bb165 bb141
  %1035 = struct $Int (%1032 : $Builtin.Int64), scope 215 // user: %1037
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %1036 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // user: %1037
  %1037 = apply %1036(%1033, %1019, %1035) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // users: %1118, %1090, %1088, %1087, %1041, %1040, %1038
  debug_value %1037 : $_StringBuffer, scope 215   // id: %1038
  cond_br %1034, bb143, bb154, scope 215          // id: %1039

bb143:                                            // Preds: bb142
  debug_value %1037 : $_StringBuffer, scope 215   // id: %1040
  %1041 = struct_extract %1037 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %1047, %1046, %1043, %1042
  %1042 = struct_extract %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %1048, %1051
  debug_value %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1043
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1044 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %1045
  %1045 = apply %1044() : $@convention(thin) () -> Int, scope 215 // users: %1054, %1053
  debug_value %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1046
  debug_value %1041 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1047
  switch_enum %1042 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb144, case #Optional.some!enumelt.1: bb145, scope 215 // id: %1048

bb144:                                            // Preds: bb143
  cond_fail %921 : $Builtin.Int1, scope 215       // id: %1049
  unreachable, scope 215                          // id: %1050

bb145:                                            // Preds: bb143
  %1051 = unchecked_enum_data %1042 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %1052
  %1052 = ref_to_raw_pointer %1051 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %1056
  %1053 = struct_extract %1045 : $Int, #Int._value, scope 215 // user: %1055
  debug_value %1045 : $Int, scope 215             // id: %1054
  %1055 = builtin "truncOrBitCast_Int64_Word"(%1053 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %1056
  %1056 = index_raw_pointer %1052 : $Builtin.RawPointer, %1055 : $Builtin.Word, scope 215 // user: %1062
  debug_value %957 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1057
  %1058 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1085, %1064, %1060
  %1059 = alloc_stack $UTF8, scope 215            // users: %1084, %1064, %1061
  store %957 to %1058 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1060
  store %966 to %1059 : $*UTF8, scope 215         // id: %1061
  br bb146(%1056 : $Builtin.RawPointer), scope 215 // id: %1062

// %1063                                          // users: %1081, %1079
bb146(%1063 : $Builtin.RawPointer):               // Preds: bb147 bb145
  %1064 = apply %968(%1058, %1059) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1065
  switch_enum %1064 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb147, case #UnicodeDecodingResult.emptyInput!enumelt: bb148, case #UnicodeDecodingResult.error!enumelt: bb153, scope 215 // id: %1065

// %1066                                          // users: %1071, %1070, %1069, %1068, %1067
bb147(%1066 : $UnicodeScalar):                    // Preds: bb146
  debug_value %1066 : $UnicodeScalar, scope 215   // id: %1067
  debug_value %1066 : $UnicodeScalar, scope 215   // id: %1068
  debug_value %1066 : $UnicodeScalar, scope 215   // id: %1069
  debug_value %1066 : $UnicodeScalar, scope 215   // id: %1070
  %1071 = struct_extract %1066 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %1073, %1072
  debug_value %1071 : $UInt32, scope 215          // id: %1072
  %1073 = struct_extract %1071 : $UInt32, #UInt32._value, scope 215 // user: %1074
  %1074 = builtin "u_to_u_checked_trunc_Int32_Int8"(%1073 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 215 // users: %1076, %1075
  %1075 = tuple_extract %1074 : $(Builtin.Int8, Builtin.Int1), 0, scope 215 // user: %1078
  %1076 = tuple_extract %1074 : $(Builtin.Int8, Builtin.Int1), 1, scope 215 // user: %1077
  cond_fail %1076 : $Builtin.Int1, scope 215      // id: %1077
  %1078 = struct $UInt8 (%1075 : $Builtin.Int8), scope 215 // user: %1080
  %1079 = pointer_to_address %1063 : $Builtin.RawPointer to [strict] $*UInt8, scope 215 // user: %1080
  store %1078 to %1079 : $*UInt8, scope 215       // id: %1080
  %1081 = index_raw_pointer %1063 : $Builtin.RawPointer, %943 : $Builtin.Word, scope 215 // user: %1082
  br bb146(%1081 : $Builtin.RawPointer), scope 215 // id: %1082

bb148:                                            // Preds: bb146
  br bb149, scope 215                             // id: %1083

bb149:                                            // Preds: bb153 bb148
  dealloc_stack %1059 : $*UTF8, scope 215         // id: %1084
  dealloc_stack %1058 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1085
  br bb150, scope 215                             // id: %1086

bb150:                                            // Preds: bb162 bb149
  debug_value %1037 : $_StringBuffer, scope 215   // id: %1087
  debug_value %1037 : $_StringBuffer, scope 215   // id: %1088
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %1089 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // user: %1090
  %1090 = apply %1089(%1037) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // users: %1115, %1110, %1111, %1112, %1091
  %1091 = struct $String (%1090 : $_StringCore), scope 215 // users: %1106, %1095, %1093
  debug_value_addr %11 : $*String, scope 252      // id: %1092
  debug_value %1091 : $String, scope 252          // id: %1093
  debug_value_addr %11 : $*String, scope 252      // id: %1094
  debug_value %1091 : $String, scope 252          // id: %1095
  %1096 = struct_element_addr %11 : $*String, #String._core, scope 252 // users: %1114, %1104, %1097
  %1097 = struct_element_addr %1096 : $*_StringCore, #_StringCore._countAndFlags, scope 252 // user: %1098
  %1098 = struct_element_addr %1097 : $*UInt, #UInt._value, scope 252 // user: %1099
  %1099 = load %1098 : $*Builtin.Int64, scope 252 // user: %1101
  %1100 = integer_literal $Builtin.Int64, 4611686018427387903, scope 252 // user: %1101
  %1101 = builtin "and_Int64"(%1099 : $Builtin.Int64, %1100 : $Builtin.Int64) : $Builtin.Int64, scope 252 // user: %1102
  %1102 = builtin "cmp_eq_Int64"(%1101 : $Builtin.Int64, %934 : $Builtin.Int64) : $Builtin.Int1, scope 252 // user: %1103
  cond_br %1102, bb151, bb152, scope 252          // id: %1103

bb151:                                            // Preds: bb150
  %1104 = struct_element_addr %1096 : $*_StringCore, #_StringCore._owner, scope 252 // user: %1105
  %1105 = load %1104 : $*Optional<AnyObject>, scope 252 // user: %1107
  store %1091 to %11 : $*String, scope 252        // id: %1106
  release_value %1105 : $Optional<AnyObject>, scope 215 // id: %1107
  br bb5, scope 215                               // id: %1108

bb152:                                            // Preds: bb150
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %1109 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 252 // user: %1114
  %1110 = struct_extract %1090 : $_StringCore, #_StringCore._owner, scope 252 // user: %1114
  %1111 = struct_extract %1090 : $_StringCore, #_StringCore._countAndFlags, scope 252 // user: %1113
  %1112 = struct_extract %1090 : $_StringCore, #_StringCore._baseAddress, scope 252 // user: %1114
  %1113 = struct_extract %1111 : $UInt, #UInt._value, scope 252 // user: %1114
  %1114 = apply %1109(%1112, %1113, %1110, %1096) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 252
  release_value %1090 : $_StringCore, scope 215   // id: %1115
  br bb5, scope 252                               // id: %1116

bb153:                                            // Preds: bb146
  br bb149, scope 215                             // id: %1117

bb154:                                            // Preds: bb142
  %1118 = struct_extract %1037 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %1124, %1123, %1120, %1119
  %1119 = struct_extract %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %1125, %1128
  debug_value %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1120
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1121 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %1122
  %1122 = apply %1121() : $@convention(thin) () -> Int, scope 215 // users: %1131, %1130
  debug_value %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1123
  debug_value %1118 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1124
  switch_enum %1119 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb155, case #Optional.some!enumelt.1: bb156, scope 215 // id: %1125

bb155:                                            // Preds: bb154
  cond_fail %921 : $Builtin.Int1, scope 215       // id: %1126
  unreachable, scope 215                          // id: %1127

bb156:                                            // Preds: bb154
  %1128 = unchecked_enum_data %1119 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %1129
  %1129 = ref_to_raw_pointer %1128 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %1133
  %1130 = struct_extract %1122 : $Int, #Int._value, scope 215 // user: %1132
  debug_value %1122 : $Int, scope 215             // id: %1131
  %1132 = builtin "truncOrBitCast_Int64_Word"(%1130 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %1133
  %1133 = index_raw_pointer %1129 : $Builtin.RawPointer, %1132 : $Builtin.Word, scope 215 // user: %1139
  debug_value %957 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1134
  %1135 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1203, %1141, %1137
  %1136 = alloc_stack $UTF8, scope 215            // users: %1202, %1141, %1138
  store %957 to %1135 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1137
  store %966 to %1136 : $*UTF8, scope 215         // id: %1138
  br bb157(%1133 : $Builtin.RawPointer), scope 215 // id: %1139

// %1140                                          // users: %1183, %1179, %1164, %1160
bb157(%1140 : $Builtin.RawPointer):               // Preds: bb160 bb159 bb156
  %1141 = apply %968(%1135, %1136) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1142
  switch_enum %1141 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb158, case #UnicodeDecodingResult.emptyInput!enumelt: bb161, case #UnicodeDecodingResult.error!enumelt: bb163, scope 215 // id: %1142

// %1143                                          // users: %1148, %1147, %1146, %1145, %1144
bb158(%1143 : $UnicodeScalar):                    // Preds: bb157
  debug_value %1143 : $UnicodeScalar, scope 215   // id: %1144
  debug_value %1143 : $UnicodeScalar, scope 215   // id: %1145
  debug_value %1143 : $UnicodeScalar, scope 215   // id: %1146
  debug_value %1143 : $UnicodeScalar, scope 215   // id: %1147
  %1148 = struct_extract %1143 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %1151, %1149
  debug_value %1148 : $UInt32, scope 215          // id: %1149
  %1150 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1152
  %1151 = struct_extract %1148 : $UInt32, #UInt32._value, scope 215 // users: %1186, %1168, %1154, %1152
  %1152 = builtin "cmp_ule_Int32"(%1151 : $Builtin.Int32, %1150 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1153
  cond_br %1152, bb159, bb160, scope 215          // id: %1153

bb159:                                            // Preds: bb158
  %1154 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1151 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1156, %1155
  %1155 = tuple_extract %1154 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1158
  %1156 = tuple_extract %1154 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1157
  cond_fail %1156 : $Builtin.Int1, scope 215      // id: %1157
  %1158 = struct $UInt16 (%1155 : $Builtin.Int16), scope 215 // users: %1161, %1159
  debug_value %1158 : $UInt16, scope 215          // id: %1159
  %1160 = pointer_to_address %1140 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1161
  store %1158 to %1160 : $*UInt16, scope 215      // id: %1161
  %1162 = metatype $@thick UInt16.Type, scope 215 // user: %1163
  %1163 = builtin "strideof_nonzero"<UInt16>(%1162 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // user: %1164
  %1164 = index_raw_pointer %1140 : $Builtin.RawPointer, %1163 : $Builtin.Word, scope 215 // user: %1165
  br bb157(%1164 : $Builtin.RawPointer), scope 215 // id: %1165

bb160:                                            // Preds: bb158
  %1166 = integer_literal $Builtin.Int32, 55232, scope 215 // user: %1169
  %1167 = integer_literal $Builtin.Int32, 10, scope 215 // user: %1168
  %1168 = builtin "lshr_Int32"(%1151 : $Builtin.Int32, %1167 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %1169
  %1169 = builtin "uadd_with_overflow_Int32"(%1166 : $Builtin.Int32, %1168 : $Builtin.Int32, %921 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %1171, %1170
  %1170 = tuple_extract %1169 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %1173
  %1171 = tuple_extract %1169 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %1172
  cond_fail %1171 : $Builtin.Int1, scope 215      // id: %1172
  %1173 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1170 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1175, %1174
  %1174 = tuple_extract %1173 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1177
  %1175 = tuple_extract %1173 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1176
  cond_fail %1175 : $Builtin.Int1, scope 215      // id: %1176
  %1177 = struct $UInt16 (%1174 : $Builtin.Int16), scope 215 // users: %1180, %1178
  debug_value %1177 : $UInt16, scope 215          // id: %1178
  %1179 = pointer_to_address %1140 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1180
  store %1177 to %1179 : $*UInt16, scope 215      // id: %1180
  %1181 = metatype $@thick UInt16.Type, scope 215 // user: %1182
  %1182 = builtin "strideof_nonzero"<UInt16>(%1181 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // users: %1199, %1183
  %1183 = index_raw_pointer %1140 : $Builtin.RawPointer, %1182 : $Builtin.Word, scope 215 // users: %1199, %1197
  %1184 = integer_literal $Builtin.Int32, 56320, scope 215 // user: %1187
  %1185 = integer_literal $Builtin.Int32, 1023, scope 215 // user: %1186
  %1186 = builtin "and_Int32"(%1151 : $Builtin.Int32, %1185 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %1187
  %1187 = builtin "uadd_with_overflow_Int32"(%1184 : $Builtin.Int32, %1186 : $Builtin.Int32, %921 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %1189, %1188
  %1188 = tuple_extract %1187 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %1191
  %1189 = tuple_extract %1187 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %1190
  cond_fail %1189 : $Builtin.Int1, scope 215      // id: %1190
  %1191 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1188 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1193, %1192
  %1192 = tuple_extract %1191 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1195
  %1193 = tuple_extract %1191 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1194
  cond_fail %1193 : $Builtin.Int1, scope 215      // id: %1194
  %1195 = struct $UInt16 (%1192 : $Builtin.Int16), scope 215 // users: %1198, %1196
  debug_value %1195 : $UInt16, scope 215          // id: %1196
  %1197 = pointer_to_address %1183 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1198
  store %1195 to %1197 : $*UInt16, scope 215      // id: %1198
  %1199 = index_raw_pointer %1183 : $Builtin.RawPointer, %1182 : $Builtin.Word, scope 215 // user: %1200
  br bb157(%1199 : $Builtin.RawPointer), scope 215 // id: %1200

bb161:                                            // Preds: bb157
  br bb162, scope 215                             // id: %1201

bb162:                                            // Preds: bb163 bb161
  dealloc_stack %1136 : $*UTF8, scope 215         // id: %1202
  dealloc_stack %1135 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1203
  br bb150, scope 215                             // id: %1204

bb163:                                            // Preds: bb157
  br bb162, scope 215                             // id: %1205

bb164:                                            // Preds: bb139
  br bb165(%956 : $Int), scope 215                // id: %1206

// %1207                                          // user: %1209
bb165(%1207 : $Int):                              // Preds: bb168 bb164
  %1208 = integer_literal $Builtin.Int64, 2, scope 215 // user: %1209
  br bb142(%1208 : $Builtin.Int64, %1207 : $Int, %945 : $Builtin.Int1), scope 215 // id: %1209

bb166:                                            // Preds: bb138
  %1210 = struct_extract %1021 : $Bool, #Bool._value, scope 215 // user: %1211
  cond_br %1210, bb167, bb168, scope 215          // id: %1211

bb167:                                            // Preds: bb166
  br bb141(%1019 : $Int), scope 215               // id: %1212

bb168:                                            // Preds: bb166
  br bb165(%1019 : $Int), scope 215               // id: %1213

bb169:                                            // Preds: bb137
  cond_fail %921 : $Builtin.Int1, scope 215       // id: %1214
  unreachable, scope 215                          // id: %1215

bb170:                                            // Preds: bb125
  %1216 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 215 // user: %1217
  br bb137(%1216 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %1217

bb171:                                            // Preds: bb0
  %1218 = load %6 : $*@thick MyError.Type, scope 215 // user: %1219
  checked_cast_br %1218 : $@thick MyError.Type to $@thick Any.Type, bb172, bb173, scope 215 // id: %1219

// %1220                                          // users: %1224, %1221
bb172(%1220 : $@thick Any.Type):                  // Preds: bb171
  debug_value %1220 : $@thick Any.Type, scope 215 // id: %1221
  // function_ref specialized specialized (_adHocPrint_unlocked<A, B where ...> (A, Mirror, inout B, isDebugPrint : Bool) -> ()).(printTypeName #1)<A, B where ...> (Any.Type) -> ()
  %1222 = function_ref @_TTSf4n_g_n___TTSg5MO5throw7MyError_SSSSs16TextOutputStreams___TFFs20_adHocPrint_unlockedu0_R_s16TextOutputStreamrFTxVs6MirrorRq_12isDebugPrintSb_T_L_13printTypeNameu0_R_S_rfPMP_T_ : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 254 // user: %1224
  retain_value %12 : $String, scope 215           // id: %1223
  %1224 = apply %1222(%1220, %10, %5) : $@convention(thin) (@thick Any.Type, @guaranteed @box String, Bool) -> (), scope 254
  br bb5, scope 215                               // id: %1225

bb173:                                            // Preds: bb171
  // function_ref swift_OpaqueSummary
  %1226 = function_ref @swift_OpaqueSummary : $@convention(thin) (@thick Any.Type) -> Optional<UnsafePointer<Int8>>, scope 215 // user: %1228
  retain_value %12 : $String, scope 215           // id: %1227
  %1228 = apply %1226(%1) : $@convention(thin) (@thick Any.Type) -> Optional<UnsafePointer<Int8>>, scope 215 // user: %1229
  switch_enum %1228 : $Optional<UnsafePointer<Int8>>, case #Optional.some!enumelt.1: bb174, case #Optional.none!enumelt: bb268, scope 215 // id: %1229

// %1230                                          // users: %1534, %1407, %1240, %1239, %1235, %1233, %1232, %1231
bb174(%1230 : $UnsafePointer<Int8>):              // Preds: bb173
  debug_value %1230 : $UnsafePointer<Int8>, scope 215 // id: %1231
  debug_value %1230 : $UnsafePointer<Int8>, scope 215 // id: %1232
  debug_value %1230 : $UnsafePointer<Int8>, scope 215 // id: %1233
  // function_ref _swift_stdlib_strlen
  %1234 = function_ref @_swift_stdlib_strlen : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 215 // user: %1236
  %1235 = enum $ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>, #ImplicitlyUnwrappedOptional.some!enumelt.1, %1230 : $UnsafePointer<Int8>, scope 215 // user: %1236
  %1236 = apply %1234(%1235) : $@convention(c) (ImplicitlyUnwrappedOptional<UnsafePointer<Int8>>) -> Int, scope 215 // users: %1535, %1408, %1257, %1250, %1247, %1244, %1241, %1238, %1237
  debug_value %1236 : $Int, scope 215             // id: %1237
  debug_value %1236 : $Int, scope 215             // id: %1238
  debug_value %1230 : $UnsafePointer<Int8>, scope 215 // id: %1239
  %1240 = struct_extract %1230 : $UnsafePointer<Int8>, #UnsafePointer._rawValue, scope 215 // users: %1536, %1409, %1265, %1245, %1243
  %1241 = struct_extract %1236 : $Int, #Int._value, scope 215 // users: %1262, %1252, %1242
  %1242 = builtin "truncOrBitCast_Int64_Word"(%1241 : $Builtin.Int64) : $Builtin.Word, scope 215 // users: %1536, %1409, %1243
  bind_memory %1240 : $Builtin.RawPointer, %1242 : $Builtin.Word to $*UInt8, scope 215 // id: %1243
  debug_value %1236 : $Int, scope 215             // id: %1244
  %1245 = struct $UnsafePointer<UInt8> (%1240 : $Builtin.RawPointer), scope 215 // users: %1256, %1248, %1246
  debug_value %1245 : $UnsafePointer<UInt8>, scope 215 // id: %1246
  debug_value %1236 : $Int, scope 215             // id: %1247
  %1248 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1245 : $UnsafePointer<UInt8>, scope 215 // users: %1268, %1249
  debug_value %1248 : $Optional<UnsafePointer<UInt8>>, scope 256 // id: %1249
  debug_value %1236 : $Int, scope 256             // id: %1250
  %1251 = integer_literal $Builtin.Int64, 0, scope 256 // users: %1422, %1284, %1339, %1271, %1252
  %1252 = builtin "cmp_sge_Int64"(%1241 : $Builtin.Int64, %1251 : $Builtin.Int64) : $Builtin.Int1, scope 256 // user: %1254
  %1253 = integer_literal $Builtin.Int1, -1, scope 256 // users: %1346, %1284, %1507, %1489, %1446, %1364, %1308, %1254
  %1254 = builtin "xor_Int1"(%1252 : $Builtin.Int1, %1253 : $Builtin.Int1) : $Builtin.Int1, scope 256 // user: %1255
  cond_fail %1254 : $Builtin.Int1, scope 256      // id: %1255
  debug_value %1245 : $UnsafePointer<UInt8>, scope 256 // id: %1256
  debug_value %1236 : $Int, scope 256             // id: %1257
  %1258 = metatype $@thick UInt8.Type, scope 256  // user: %1259
  %1259 = builtin "strideof_nonzero"<UInt8>(%1258 : $@thick UInt8.Type) : $Builtin.Word, scope 256 // users: %1396, %1260
  %1260 = builtin "zextOrBitCast_Word_Int64"(%1259 : $Builtin.Word) : $Builtin.Int64, scope 256 // user: %1262
  %1261 = integer_literal $Builtin.Int1, 0, scope 256 // users: %1529, %1313, %1302, %1262
  %1262 = builtin "smul_with_overflow_Int64"(%1241 : $Builtin.Int64, %1260 : $Builtin.Int64, %1261 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 256 // user: %1263
  %1263 = tuple_extract %1262 : $(Builtin.Int64, Builtin.Int1), 0, scope 256 // user: %1264
  %1264 = builtin "truncOrBitCast_Int64_Word"(%1263 : $Builtin.Int64) : $Builtin.Word, scope 256 // user: %1265
  %1265 = index_raw_pointer %1240 : $Builtin.RawPointer, %1264 : $Builtin.Word, scope 256 // user: %1266
  %1266 = struct $UnsafePointer<UInt8> (%1265 : $Builtin.RawPointer), scope 256 // user: %1267
  %1267 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1266 : $UnsafePointer<UInt8>, scope 256 // user: %1268
  %1268 = struct $UnsafeBufferPointer<UInt8> (%1248 : $Optional<UnsafePointer<UInt8>>, %1267 : $Optional<UnsafePointer<UInt8>>), scope 256 // users: %1272, %1270, %1269
  debug_value %1268 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %1269
  debug_value %1268 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %1270
  %1271 = struct $Int (%1251 : $Builtin.Int64), scope 215 // users: %1526, %1343, %1272
  %1272 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%1268 : $UnsafeBufferPointer<UInt8>, %1271 : $Int), scope 215 // users: %1457, %1454, %1375, %1372, %1276, %1273
  debug_value %1272 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1273
  %1274 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1331, %1287, %1276
  %1275 = alloc_stack $UTF8, scope 215            // users: %1330, %1287, %1282
  store %1272 to %1274 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1276
  %1277 = integer_literal $Builtin.Int32, 0, scope 215 // user: %1278
  %1278 = struct $UInt32 (%1277 : $Builtin.Int32), scope 215 // user: %1281
  %1279 = integer_literal $Builtin.Int8, 0, scope 215 // user: %1280
  %1280 = struct $UInt8 (%1279 : $Builtin.Int8), scope 215 // user: %1281
  %1281 = struct $UTF8 (%1278 : $UInt32, %1280 : $UInt8), scope 215 // users: %1458, %1376, %1282
  store %1281 to %1275 : $*UTF8, scope 215        // id: %1282
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %1283 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // users: %1461, %1379, %1287
  br bb175(%1251 : $Builtin.Int64, %1253 : $Builtin.Int1), scope 215 // id: %1284

// %1285                                          // users: %1324, %1308
// %1286                                          // users: %1323, %1322, %1325
bb175(%1285 : $Builtin.Int64, %1286 : $Builtin.Int1): // Preds: bb180 bb174
  %1287 = apply %1283(%1274, %1275) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1288
  switch_enum %1287 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb176, case #UnicodeDecodingResult.emptyInput!enumelt: bb186, case #UnicodeDecodingResult.error!enumelt: bb267, scope 215 // id: %1288

// %1289                                          // users: %1318, %1317, %1298, %1297, %1292, %1291, %1290
bb176(%1289 : $UnicodeScalar):                    // Preds: bb175
  debug_value %1289 : $UnicodeScalar, scope 215   // id: %1290
  debug_value %1289 : $UnicodeScalar, scope 215   // id: %1291
  %1292 = struct_extract %1289 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // user: %1294
  %1293 = integer_literal $Builtin.Int32, 127, scope 215 // user: %1295
  %1294 = struct_extract %1292 : $UInt32, #UInt32._value, scope 215 // users: %1320, %1300, %1295
  %1295 = builtin "cmp_ugt_Int32"(%1294 : $Builtin.Int32, %1293 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1296
  cond_br %1295, bb177, bb183, scope 215          // id: %1296

bb177:                                            // Preds: bb176
  debug_value %1289 : $UnicodeScalar, scope 215   // id: %1297
  debug_value %1289 : $UnicodeScalar, scope 215   // id: %1298
  %1299 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1300
  %1300 = builtin "cmp_ule_Int32"(%1294 : $Builtin.Int32, %1299 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1301
  cond_br %1300, bb178, bb181, scope 215          // id: %1301

bb178:                                            // Preds: bb177
  br bb179(%1261 : $Builtin.Int1), scope 215      // id: %1302

// %1303                                          // user: %1305
bb179(%1303 : $Builtin.Int1):                     // Preds: bb184 bb178
  %1304 = integer_literal $Builtin.Int64, 1, scope 215 // user: %1305
  br bb180(%1304 : $Builtin.Int64, %1303 : $Builtin.Int1), scope 215 // id: %1305

// %1306                                          // user: %1308
// %1307                                          // user: %1312
bb180(%1306 : $Builtin.Int64, %1307 : $Builtin.Int1): // Preds: bb182 bb179
  %1308 = builtin "sadd_with_overflow_Int64"(%1285 : $Builtin.Int64, %1306 : $Builtin.Int64, %1253 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 215 // users: %1310, %1309
  %1309 = tuple_extract %1308 : $(Builtin.Int64, Builtin.Int1), 0, scope 215 // user: %1312
  %1310 = tuple_extract %1308 : $(Builtin.Int64, Builtin.Int1), 1, scope 215 // user: %1311
  cond_fail %1310 : $Builtin.Int1, scope 215      // id: %1311
  br bb175(%1309 : $Builtin.Int64, %1307 : $Builtin.Int1), scope 215 // id: %1312

bb181:                                            // Preds: bb177
  br bb182(%1261 : $Builtin.Int1), scope 215      // id: %1313

// %1314                                          // user: %1316
bb182(%1314 : $Builtin.Int1):                     // Preds: bb185 bb181
  %1315 = integer_literal $Builtin.Int64, 2, scope 215 // user: %1316
  br bb180(%1315 : $Builtin.Int64, %1314 : $Builtin.Int1), scope 215 // id: %1316

bb183:                                            // Preds: bb176
  debug_value %1289 : $UnicodeScalar, scope 215   // id: %1317
  debug_value %1289 : $UnicodeScalar, scope 215   // id: %1318
  %1319 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1320
  %1320 = builtin "cmp_ule_Int32"(%1294 : $Builtin.Int32, %1319 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1321
  cond_br %1320, bb184, bb185, scope 215          // id: %1321

bb184:                                            // Preds: bb183
  br bb179(%1286 : $Builtin.Int1), scope 215      // id: %1322

bb185:                                            // Preds: bb183
  br bb182(%1286 : $Builtin.Int1), scope 215      // id: %1323

bb186:                                            // Preds: bb175
  %1324 = struct $Int (%1285 : $Builtin.Int64), scope 215 // user: %1326
  %1325 = struct $Bool (%1286 : $Builtin.Int1), scope 215 // user: %1326
  %1326 = tuple $(count: Int, isASCII: Bool) (%1324, %1325), scope 215 // user: %1327
  %1327 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %1326 : $(count: Int, isASCII: Bool), scope 215 // user: %1328
  br bb187(%1327 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %1328

// %1329                                          // user: %1332
bb187(%1329 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb267 bb186
  dealloc_stack %1275 : $*UTF8, scope 215         // id: %1330
  dealloc_stack %1274 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1331
  switch_enum %1329 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb188, case #Optional.none!enumelt: bb219, scope 215 // id: %1332

// %1333                                          // users: %1336, %1334
bb188(%1333 : $(count: Int, isASCII: Bool)):      // Preds: bb187
  %1334 = tuple_extract %1333 : $(count: Int, isASCII: Bool), 0, scope 215 // users: %1533, %1532, %1352, %1338, %1335
  debug_value %1334 : $Int, scope 215             // id: %1335
  %1336 = tuple_extract %1333 : $(count: Int, isASCII: Bool), 1, scope 215 // users: %1530, %1341, %1337
  debug_value %1336 : $Bool, scope 215            // id: %1337
  %1338 = struct_extract %1334 : $Int, #Int._value, scope 215 // user: %1339
  %1339 = builtin "cmp_sge_Int64"(%1251 : $Builtin.Int64, %1338 : $Builtin.Int64) : $Builtin.Int1, scope 215 // user: %1340
  cond_br %1339, bb189, bb216, scope 215          // id: %1340

bb189:                                            // Preds: bb188
  %1341 = struct_extract %1336 : $Bool, #Bool._value, scope 215 // user: %1342
  cond_br %1341, bb190, bb214, scope 215          // id: %1342

bb190:                                            // Preds: bb189
  br bb191(%1271 : $Int), scope 215               // id: %1343

// %1344                                          // user: %1346
bb191(%1344 : $Int):                              // Preds: bb217 bb190
  %1345 = integer_literal $Builtin.Int64, 1, scope 215 // user: %1346
  br bb192(%1345 : $Builtin.Int64, %1344 : $Int, %1253 : $Builtin.Int1), scope 215 // id: %1346

// %1347                                          // user: %1350
// %1348                                          // user: %1352
// %1349                                          // user: %1354
bb192(%1347 : $Builtin.Int64, %1348 : $Int, %1349 : $Builtin.Int1): // Preds: bb215 bb191
  %1350 = struct $Int (%1347 : $Builtin.Int64), scope 215 // user: %1352
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %1351 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // user: %1352
  %1352 = apply %1351(%1348, %1334, %1350) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // users: %1438, %1405, %1403, %1402, %1356, %1355, %1353
  debug_value %1352 : $_StringBuffer, scope 215   // id: %1353
  cond_br %1349, bb193, bb204, scope 215          // id: %1354

bb193:                                            // Preds: bb192
  debug_value %1352 : $_StringBuffer, scope 215   // id: %1355
  %1356 = struct_extract %1352 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %1362, %1361, %1358, %1357
  %1357 = struct_extract %1356 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %1363, %1366
  debug_value %1356 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1358
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1359 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %1360
  %1360 = apply %1359() : $@convention(thin) () -> Int, scope 215 // users: %1369, %1368
  debug_value %1356 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1361
  debug_value %1356 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1362
  switch_enum %1357 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb194, case #Optional.some!enumelt.1: bb195, scope 215 // id: %1363

bb194:                                            // Preds: bb193
  cond_fail %1253 : $Builtin.Int1, scope 215      // id: %1364
  unreachable, scope 215                          // id: %1365

bb195:                                            // Preds: bb193
  %1366 = unchecked_enum_data %1357 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %1367
  %1367 = ref_to_raw_pointer %1366 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %1371
  %1368 = struct_extract %1360 : $Int, #Int._value, scope 215 // user: %1370
  debug_value %1360 : $Int, scope 215             // id: %1369
  %1370 = builtin "truncOrBitCast_Int64_Word"(%1368 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %1371
  %1371 = index_raw_pointer %1367 : $Builtin.RawPointer, %1370 : $Builtin.Word, scope 215 // user: %1377
  debug_value %1272 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1372
  %1373 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1400, %1379, %1375
  %1374 = alloc_stack $UTF8, scope 215            // users: %1399, %1379, %1376
  store %1272 to %1373 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1375
  store %1281 to %1374 : $*UTF8, scope 215        // id: %1376
  br bb196(%1371 : $Builtin.RawPointer), scope 215 // id: %1377

// %1378                                          // users: %1396, %1394
bb196(%1378 : $Builtin.RawPointer):               // Preds: bb197 bb195
  %1379 = apply %1283(%1373, %1374) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1380
  switch_enum %1379 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb197, case #UnicodeDecodingResult.emptyInput!enumelt: bb198, case #UnicodeDecodingResult.error!enumelt: bb203, scope 215 // id: %1380

// %1381                                          // users: %1386, %1385, %1384, %1383, %1382
bb197(%1381 : $UnicodeScalar):                    // Preds: bb196
  debug_value %1381 : $UnicodeScalar, scope 215   // id: %1382
  debug_value %1381 : $UnicodeScalar, scope 215   // id: %1383
  debug_value %1381 : $UnicodeScalar, scope 215   // id: %1384
  debug_value %1381 : $UnicodeScalar, scope 215   // id: %1385
  %1386 = struct_extract %1381 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %1388, %1387
  debug_value %1386 : $UInt32, scope 215          // id: %1387
  %1388 = struct_extract %1386 : $UInt32, #UInt32._value, scope 215 // user: %1389
  %1389 = builtin "u_to_u_checked_trunc_Int32_Int8"(%1388 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 215 // users: %1391, %1390
  %1390 = tuple_extract %1389 : $(Builtin.Int8, Builtin.Int1), 0, scope 215 // user: %1393
  %1391 = tuple_extract %1389 : $(Builtin.Int8, Builtin.Int1), 1, scope 215 // user: %1392
  cond_fail %1391 : $Builtin.Int1, scope 215      // id: %1392
  %1393 = struct $UInt8 (%1390 : $Builtin.Int8), scope 215 // user: %1395
  %1394 = pointer_to_address %1378 : $Builtin.RawPointer to [strict] $*UInt8, scope 215 // user: %1395
  store %1393 to %1394 : $*UInt8, scope 215       // id: %1395
  %1396 = index_raw_pointer %1378 : $Builtin.RawPointer, %1259 : $Builtin.Word, scope 215 // user: %1397
  br bb196(%1396 : $Builtin.RawPointer), scope 215 // id: %1397

bb198:                                            // Preds: bb196
  br bb199, scope 215                             // id: %1398

bb199:                                            // Preds: bb203 bb198
  dealloc_stack %1374 : $*UTF8, scope 215         // id: %1399
  dealloc_stack %1373 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1400
  br bb200, scope 215                             // id: %1401

bb200:                                            // Preds: bb212 bb199
  debug_value %1352 : $_StringBuffer, scope 215   // id: %1402
  debug_value %1352 : $_StringBuffer, scope 215   // id: %1403
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %1404 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // user: %1405
  %1405 = apply %1404(%1352) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // users: %1435, %1430, %1431, %1432, %1406
  %1406 = struct $String (%1405 : $_StringCore), scope 215 // users: %1426, %1415, %1413, %1411, %1410
  debug_value %1230 : $UnsafePointer<Int8>, scope 215 // id: %1407
  debug_value %1236 : $Int, scope 215             // id: %1408
  bind_memory %1240 : $Builtin.RawPointer, %1242 : $Builtin.Word to $*Int8, scope 215 // id: %1409
  debug_value %1406 : $String, scope 215          // id: %1410
  debug_value %1406 : $String, scope 215          // id: %1411
  debug_value_addr %11 : $*String, scope 258      // id: %1412
  debug_value %1406 : $String, scope 258          // id: %1413
  debug_value_addr %11 : $*String, scope 258      // id: %1414
  debug_value %1406 : $String, scope 258          // id: %1415
  %1416 = struct_element_addr %11 : $*String, #String._core, scope 258 // users: %1434, %1424, %1417
  %1417 = struct_element_addr %1416 : $*_StringCore, #_StringCore._countAndFlags, scope 258 // user: %1418
  %1418 = struct_element_addr %1417 : $*UInt, #UInt._value, scope 258 // user: %1419
  %1419 = load %1418 : $*Builtin.Int64, scope 258 // user: %1421
  %1420 = integer_literal $Builtin.Int64, 4611686018427387903, scope 258 // user: %1421
  %1421 = builtin "and_Int64"(%1419 : $Builtin.Int64, %1420 : $Builtin.Int64) : $Builtin.Int64, scope 258 // user: %1422
  %1422 = builtin "cmp_eq_Int64"(%1421 : $Builtin.Int64, %1251 : $Builtin.Int64) : $Builtin.Int1, scope 258 // user: %1423
  cond_br %1422, bb201, bb202, scope 258          // id: %1423

bb201:                                            // Preds: bb200
  %1424 = struct_element_addr %1416 : $*_StringCore, #_StringCore._owner, scope 258 // user: %1425
  %1425 = load %1424 : $*Optional<AnyObject>, scope 258 // user: %1427
  store %1406 to %11 : $*String, scope 258        // id: %1426
  release_value %1425 : $Optional<AnyObject>, scope 215 // id: %1427
  br bb5, scope 215                               // id: %1428

bb202:                                            // Preds: bb200
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %1429 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 258 // user: %1434
  %1430 = struct_extract %1405 : $_StringCore, #_StringCore._owner, scope 258 // user: %1434
  %1431 = struct_extract %1405 : $_StringCore, #_StringCore._countAndFlags, scope 258 // user: %1433
  %1432 = struct_extract %1405 : $_StringCore, #_StringCore._baseAddress, scope 258 // user: %1434
  %1433 = struct_extract %1431 : $UInt, #UInt._value, scope 258 // user: %1434
  %1434 = apply %1429(%1432, %1433, %1430, %1416) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 258
  release_value %1405 : $_StringCore, scope 215   // id: %1435
  br bb5, scope 258                               // id: %1436

bb203:                                            // Preds: bb196
  br bb199, scope 215                             // id: %1437

bb204:                                            // Preds: bb192
  %1438 = struct_extract %1352 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %1444, %1443, %1440, %1439
  %1439 = struct_extract %1438 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %1445, %1448
  debug_value %1438 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1440
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1441 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %1442
  %1442 = apply %1441() : $@convention(thin) () -> Int, scope 215 // users: %1451, %1450
  debug_value %1438 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1443
  debug_value %1438 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1444
  switch_enum %1439 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb205, case #Optional.some!enumelt.1: bb206, scope 215 // id: %1445

bb205:                                            // Preds: bb204
  cond_fail %1253 : $Builtin.Int1, scope 215      // id: %1446
  unreachable, scope 215                          // id: %1447

bb206:                                            // Preds: bb204
  %1448 = unchecked_enum_data %1439 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %1449
  %1449 = ref_to_raw_pointer %1448 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %1453
  %1450 = struct_extract %1442 : $Int, #Int._value, scope 215 // user: %1452
  debug_value %1442 : $Int, scope 215             // id: %1451
  %1452 = builtin "truncOrBitCast_Int64_Word"(%1450 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %1453
  %1453 = index_raw_pointer %1449 : $Builtin.RawPointer, %1452 : $Builtin.Word, scope 215 // user: %1459
  debug_value %1272 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1454
  %1455 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1523, %1461, %1457
  %1456 = alloc_stack $UTF8, scope 215            // users: %1522, %1461, %1458
  store %1272 to %1455 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1457
  store %1281 to %1456 : $*UTF8, scope 215        // id: %1458
  br bb207(%1453 : $Builtin.RawPointer), scope 215 // id: %1459

// %1460                                          // users: %1503, %1499, %1484, %1480
bb207(%1460 : $Builtin.RawPointer):               // Preds: bb210 bb209 bb206
  %1461 = apply %1283(%1455, %1456) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1462
  switch_enum %1461 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb208, case #UnicodeDecodingResult.emptyInput!enumelt: bb211, case #UnicodeDecodingResult.error!enumelt: bb213, scope 215 // id: %1462

// %1463                                          // users: %1468, %1467, %1466, %1465, %1464
bb208(%1463 : $UnicodeScalar):                    // Preds: bb207
  debug_value %1463 : $UnicodeScalar, scope 215   // id: %1464
  debug_value %1463 : $UnicodeScalar, scope 215   // id: %1465
  debug_value %1463 : $UnicodeScalar, scope 215   // id: %1466
  debug_value %1463 : $UnicodeScalar, scope 215   // id: %1467
  %1468 = struct_extract %1463 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %1471, %1469
  debug_value %1468 : $UInt32, scope 215          // id: %1469
  %1470 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1472
  %1471 = struct_extract %1468 : $UInt32, #UInt32._value, scope 215 // users: %1506, %1488, %1474, %1472
  %1472 = builtin "cmp_ule_Int32"(%1471 : $Builtin.Int32, %1470 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1473
  cond_br %1472, bb209, bb210, scope 215          // id: %1473

bb209:                                            // Preds: bb208
  %1474 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1471 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1476, %1475
  %1475 = tuple_extract %1474 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1478
  %1476 = tuple_extract %1474 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1477
  cond_fail %1476 : $Builtin.Int1, scope 215      // id: %1477
  %1478 = struct $UInt16 (%1475 : $Builtin.Int16), scope 215 // users: %1481, %1479
  debug_value %1478 : $UInt16, scope 215          // id: %1479
  %1480 = pointer_to_address %1460 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1481
  store %1478 to %1480 : $*UInt16, scope 215      // id: %1481
  %1482 = metatype $@thick UInt16.Type, scope 215 // user: %1483
  %1483 = builtin "strideof_nonzero"<UInt16>(%1482 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // user: %1484
  %1484 = index_raw_pointer %1460 : $Builtin.RawPointer, %1483 : $Builtin.Word, scope 215 // user: %1485
  br bb207(%1484 : $Builtin.RawPointer), scope 215 // id: %1485

bb210:                                            // Preds: bb208
  %1486 = integer_literal $Builtin.Int32, 55232, scope 215 // user: %1489
  %1487 = integer_literal $Builtin.Int32, 10, scope 215 // user: %1488
  %1488 = builtin "lshr_Int32"(%1471 : $Builtin.Int32, %1487 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %1489
  %1489 = builtin "uadd_with_overflow_Int32"(%1486 : $Builtin.Int32, %1488 : $Builtin.Int32, %1253 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %1491, %1490
  %1490 = tuple_extract %1489 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %1493
  %1491 = tuple_extract %1489 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %1492
  cond_fail %1491 : $Builtin.Int1, scope 215      // id: %1492
  %1493 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1490 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1495, %1494
  %1494 = tuple_extract %1493 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1497
  %1495 = tuple_extract %1493 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1496
  cond_fail %1495 : $Builtin.Int1, scope 215      // id: %1496
  %1497 = struct $UInt16 (%1494 : $Builtin.Int16), scope 215 // users: %1500, %1498
  debug_value %1497 : $UInt16, scope 215          // id: %1498
  %1499 = pointer_to_address %1460 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1500
  store %1497 to %1499 : $*UInt16, scope 215      // id: %1500
  %1501 = metatype $@thick UInt16.Type, scope 215 // user: %1502
  %1502 = builtin "strideof_nonzero"<UInt16>(%1501 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // users: %1519, %1503
  %1503 = index_raw_pointer %1460 : $Builtin.RawPointer, %1502 : $Builtin.Word, scope 215 // users: %1519, %1517
  %1504 = integer_literal $Builtin.Int32, 56320, scope 215 // user: %1507
  %1505 = integer_literal $Builtin.Int32, 1023, scope 215 // user: %1506
  %1506 = builtin "and_Int32"(%1471 : $Builtin.Int32, %1505 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %1507
  %1507 = builtin "uadd_with_overflow_Int32"(%1504 : $Builtin.Int32, %1506 : $Builtin.Int32, %1253 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %1509, %1508
  %1508 = tuple_extract %1507 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %1511
  %1509 = tuple_extract %1507 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %1510
  cond_fail %1509 : $Builtin.Int1, scope 215      // id: %1510
  %1511 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1508 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1513, %1512
  %1512 = tuple_extract %1511 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1515
  %1513 = tuple_extract %1511 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1514
  cond_fail %1513 : $Builtin.Int1, scope 215      // id: %1514
  %1515 = struct $UInt16 (%1512 : $Builtin.Int16), scope 215 // users: %1518, %1516
  debug_value %1515 : $UInt16, scope 215          // id: %1516
  %1517 = pointer_to_address %1503 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1518
  store %1515 to %1517 : $*UInt16, scope 215      // id: %1518
  %1519 = index_raw_pointer %1503 : $Builtin.RawPointer, %1502 : $Builtin.Word, scope 215 // user: %1520
  br bb207(%1519 : $Builtin.RawPointer), scope 215 // id: %1520

bb211:                                            // Preds: bb207
  br bb212, scope 215                             // id: %1521

bb212:                                            // Preds: bb213 bb211
  dealloc_stack %1456 : $*UTF8, scope 215         // id: %1522
  dealloc_stack %1455 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1523
  br bb200, scope 215                             // id: %1524

bb213:                                            // Preds: bb207
  br bb212, scope 215                             // id: %1525

bb214:                                            // Preds: bb189
  br bb215(%1271 : $Int), scope 215               // id: %1526

// %1527                                          // user: %1529
bb215(%1527 : $Int):                              // Preds: bb218 bb214
  %1528 = integer_literal $Builtin.Int64, 2, scope 215 // user: %1529
  br bb192(%1528 : $Builtin.Int64, %1527 : $Int, %1261 : $Builtin.Int1), scope 215 // id: %1529

bb216:                                            // Preds: bb188
  %1530 = struct_extract %1336 : $Bool, #Bool._value, scope 215 // user: %1531
  cond_br %1530, bb217, bb218, scope 215          // id: %1531

bb217:                                            // Preds: bb216
  br bb191(%1334 : $Int), scope 215               // id: %1532

bb218:                                            // Preds: bb216
  br bb215(%1334 : $Int), scope 215               // id: %1533

bb219:                                            // Preds: bb187
  debug_value %1230 : $UnsafePointer<Int8>, scope 215 // id: %1534
  debug_value %1236 : $Int, scope 215             // id: %1535
  bind_memory %1240 : $Builtin.RawPointer, %1242 : $Builtin.Word to $*Int8, scope 215 // id: %1536
  br bb220, scope 215                             // id: %1537

bb220:                                            // Preds: bb268 bb219
  %1538 = integer_literal $Builtin.Int1, -1, scope 215 // users: %1647, %1585, %1830, %1803, %1785, %1742, %1665, %1609, %1553, %1539
  %1539 = struct $Bool (%1538 : $Builtin.Int1), scope 215 // users: %1542, %1540
  debug_value %1539 : $Bool, scope 215            // id: %1540
  // function_ref swift_getTypeName
  %1541 = function_ref @swift_getTypeName : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 215 // user: %1542
  %1542 = apply %1541(%1, %1539) : $@convention(thin) (@thick Any.Type, Bool) -> (UnsafePointer<UInt8>, Int), scope 215 // users: %1544, %1543
  %1543 = tuple_extract %1542 : $(UnsafePointer<UInt8>, Int), 0, scope 215 // users: %1557, %1555, %1547, %1545
  %1544 = tuple_extract %1542 : $(UnsafePointer<UInt8>, Int), 1, scope 215 // users: %1556, %1551, %1549, %1546
  debug_value %1543 : $UnsafePointer<UInt8>, scope 215 // id: %1545
  debug_value %1544 : $Int, scope 215             // id: %1546
  %1547 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1543 : $UnsafePointer<UInt8>, scope 215 // users: %1568, %1548
  debug_value %1547 : $Optional<UnsafePointer<UInt8>>, scope 260 // id: %1548
  debug_value %1544 : $Int, scope 260             // id: %1549
  %1550 = integer_literal $Builtin.Int64, 0, scope 260 // users: %1718, %1585, %1640, %1572, %1552
  %1551 = struct_extract %1544 : $Int, #Int._value, scope 260 // users: %1562, %1552
  %1552 = builtin "cmp_sge_Int64"(%1551 : $Builtin.Int64, %1550 : $Builtin.Int64) : $Builtin.Int1, scope 260 // user: %1553
  %1553 = builtin "xor_Int1"(%1552 : $Builtin.Int1, %1538 : $Builtin.Int1) : $Builtin.Int1, scope 260 // user: %1554
  cond_fail %1553 : $Builtin.Int1, scope 260      // id: %1554
  debug_value %1543 : $UnsafePointer<UInt8>, scope 260 // id: %1555
  debug_value %1544 : $Int, scope 260             // id: %1556
  %1557 = struct_extract %1543 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue, scope 260 // user: %1565
  %1558 = metatype $@thick UInt8.Type, scope 260  // user: %1559
  %1559 = builtin "strideof_nonzero"<UInt8>(%1558 : $@thick UInt8.Type) : $Builtin.Word, scope 260 // users: %1697, %1560
  %1560 = builtin "zextOrBitCast_Word_Int64"(%1559 : $Builtin.Word) : $Builtin.Int64, scope 260 // user: %1562
  %1561 = integer_literal $Builtin.Int1, 0, scope 260 // users: %1825, %1614, %1603, %1562
  %1562 = builtin "smul_with_overflow_Int64"(%1551 : $Builtin.Int64, %1560 : $Builtin.Int64, %1561 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 260 // user: %1563
  %1563 = tuple_extract %1562 : $(Builtin.Int64, Builtin.Int1), 0, scope 260 // user: %1564
  %1564 = builtin "truncOrBitCast_Int64_Word"(%1563 : $Builtin.Int64) : $Builtin.Word, scope 260 // user: %1565
  %1565 = index_raw_pointer %1557 : $Builtin.RawPointer, %1564 : $Builtin.Word, scope 260 // user: %1566
  %1566 = struct $UnsafePointer<UInt8> (%1565 : $Builtin.RawPointer), scope 260 // user: %1567
  %1567 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %1566 : $UnsafePointer<UInt8>, scope 260 // user: %1568
  %1568 = struct $UnsafeBufferPointer<UInt8> (%1547 : $Optional<UnsafePointer<UInt8>>, %1567 : $Optional<UnsafePointer<UInt8>>), scope 260 // users: %1573, %1571, %1570, %1569
  debug_value %1568 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %1569
  debug_value %1568 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %1570
  debug_value %1568 : $UnsafeBufferPointer<UInt8>, scope 215 // id: %1571
  %1572 = struct $Int (%1550 : $Builtin.Int64), scope 215 // users: %1822, %1644, %1573
  %1573 = struct $IndexingIterator<UnsafeBufferPointer<UInt8>> (%1568 : $UnsafeBufferPointer<UInt8>, %1572 : $Int), scope 215 // users: %1753, %1750, %1676, %1673, %1577, %1574
  debug_value %1573 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1574
  %1575 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1632, %1588, %1577
  %1576 = alloc_stack $UTF8, scope 215            // users: %1631, %1588, %1583
  store %1573 to %1575 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1577
  %1578 = integer_literal $Builtin.Int32, 0, scope 215 // user: %1579
  %1579 = struct $UInt32 (%1578 : $Builtin.Int32), scope 215 // user: %1582
  %1580 = integer_literal $Builtin.Int8, 0, scope 215 // user: %1581
  %1581 = struct $UInt8 (%1580 : $Builtin.Int8), scope 215 // user: %1582
  %1582 = struct $UTF8 (%1579 : $UInt32, %1581 : $UInt8), scope 215 // users: %1754, %1677, %1583
  store %1582 to %1576 : $*UTF8, scope 215        // id: %1583
  // function_ref specialized UTF8.decode<A where ...> (inout A) -> UnicodeDecodingResult
  %1584 = function_ref @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // users: %1757, %1680, %1588
  br bb221(%1550 : $Builtin.Int64, %1538 : $Builtin.Int1), scope 215 // id: %1585

// %1586                                          // users: %1625, %1609
// %1587                                          // users: %1624, %1623, %1626
bb221(%1586 : $Builtin.Int64, %1587 : $Builtin.Int1): // Preds: bb226 bb220
  %1588 = apply %1584(%1575, %1576) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1589
  switch_enum %1588 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb222, case #UnicodeDecodingResult.emptyInput!enumelt: bb232, case #UnicodeDecodingResult.error!enumelt: bb266, scope 215 // id: %1589

// %1590                                          // users: %1619, %1618, %1599, %1598, %1593, %1592, %1591
bb222(%1590 : $UnicodeScalar):                    // Preds: bb221
  debug_value %1590 : $UnicodeScalar, scope 215   // id: %1591
  debug_value %1590 : $UnicodeScalar, scope 215   // id: %1592
  %1593 = struct_extract %1590 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // user: %1595
  %1594 = integer_literal $Builtin.Int32, 127, scope 215 // user: %1596
  %1595 = struct_extract %1593 : $UInt32, #UInt32._value, scope 215 // users: %1621, %1601, %1596
  %1596 = builtin "cmp_ugt_Int32"(%1595 : $Builtin.Int32, %1594 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1597
  cond_br %1596, bb223, bb229, scope 215          // id: %1597

bb223:                                            // Preds: bb222
  debug_value %1590 : $UnicodeScalar, scope 215   // id: %1598
  debug_value %1590 : $UnicodeScalar, scope 215   // id: %1599
  %1600 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1601
  %1601 = builtin "cmp_ule_Int32"(%1595 : $Builtin.Int32, %1600 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1602
  cond_br %1601, bb224, bb227, scope 215          // id: %1602

bb224:                                            // Preds: bb223
  br bb225(%1561 : $Builtin.Int1), scope 215      // id: %1603

// %1604                                          // user: %1606
bb225(%1604 : $Builtin.Int1):                     // Preds: bb230 bb224
  %1605 = integer_literal $Builtin.Int64, 1, scope 215 // user: %1606
  br bb226(%1605 : $Builtin.Int64, %1604 : $Builtin.Int1), scope 215 // id: %1606

// %1607                                          // user: %1609
// %1608                                          // user: %1613
bb226(%1607 : $Builtin.Int64, %1608 : $Builtin.Int1): // Preds: bb228 bb225
  %1609 = builtin "sadd_with_overflow_Int64"(%1586 : $Builtin.Int64, %1607 : $Builtin.Int64, %1538 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 215 // users: %1611, %1610
  %1610 = tuple_extract %1609 : $(Builtin.Int64, Builtin.Int1), 0, scope 215 // user: %1613
  %1611 = tuple_extract %1609 : $(Builtin.Int64, Builtin.Int1), 1, scope 215 // user: %1612
  cond_fail %1611 : $Builtin.Int1, scope 215      // id: %1612
  br bb221(%1610 : $Builtin.Int64, %1608 : $Builtin.Int1), scope 215 // id: %1613

bb227:                                            // Preds: bb223
  br bb228(%1561 : $Builtin.Int1), scope 215      // id: %1614

// %1615                                          // user: %1617
bb228(%1615 : $Builtin.Int1):                     // Preds: bb231 bb227
  %1616 = integer_literal $Builtin.Int64, 2, scope 215 // user: %1617
  br bb226(%1616 : $Builtin.Int64, %1615 : $Builtin.Int1), scope 215 // id: %1617

bb229:                                            // Preds: bb222
  debug_value %1590 : $UnicodeScalar, scope 215   // id: %1618
  debug_value %1590 : $UnicodeScalar, scope 215   // id: %1619
  %1620 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1621
  %1621 = builtin "cmp_ule_Int32"(%1595 : $Builtin.Int32, %1620 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1622
  cond_br %1621, bb230, bb231, scope 215          // id: %1622

bb230:                                            // Preds: bb229
  br bb225(%1587 : $Builtin.Int1), scope 215      // id: %1623

bb231:                                            // Preds: bb229
  br bb228(%1587 : $Builtin.Int1), scope 215      // id: %1624

bb232:                                            // Preds: bb221
  %1625 = struct $Int (%1586 : $Builtin.Int64), scope 215 // user: %1627
  %1626 = struct $Bool (%1587 : $Builtin.Int1), scope 215 // user: %1627
  %1627 = tuple $(count: Int, isASCII: Bool) (%1625, %1626), scope 215 // user: %1628
  %1628 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %1627 : $(count: Int, isASCII: Bool), scope 215 // user: %1629
  br bb233(%1628 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %1629

// %1630                                          // user: %1633
bb233(%1630 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb266 bb232
  dealloc_stack %1576 : $*UTF8, scope 215         // id: %1631
  dealloc_stack %1575 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1632
  switch_enum %1630 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb234, case #Optional.none!enumelt: bb265, scope 215 // id: %1633

// %1634                                          // users: %1637, %1635
bb234(%1634 : $(count: Int, isASCII: Bool)):      // Preds: bb233
  %1635 = tuple_extract %1634 : $(count: Int, isASCII: Bool), 0, scope 215 // users: %1829, %1828, %1653, %1639, %1636
  debug_value %1635 : $Int, scope 215             // id: %1636
  %1637 = tuple_extract %1634 : $(count: Int, isASCII: Bool), 1, scope 215 // users: %1826, %1642, %1638
  debug_value %1637 : $Bool, scope 215            // id: %1638
  %1639 = struct_extract %1635 : $Int, #Int._value, scope 215 // user: %1640
  %1640 = builtin "cmp_sge_Int64"(%1550 : $Builtin.Int64, %1639 : $Builtin.Int64) : $Builtin.Int1, scope 215 // user: %1641
  cond_br %1640, bb235, bb262, scope 215          // id: %1641

bb235:                                            // Preds: bb234
  %1642 = struct_extract %1637 : $Bool, #Bool._value, scope 215 // user: %1643
  cond_br %1642, bb236, bb260, scope 215          // id: %1643

bb236:                                            // Preds: bb235
  br bb237(%1572 : $Int), scope 215               // id: %1644

// %1645                                          // user: %1647
bb237(%1645 : $Int):                              // Preds: bb263 bb236
  %1646 = integer_literal $Builtin.Int64, 1, scope 215 // user: %1647
  br bb238(%1646 : $Builtin.Int64, %1645 : $Int, %1538 : $Builtin.Int1), scope 215 // id: %1647

// %1648                                          // user: %1651
// %1649                                          // user: %1653
// %1650                                          // user: %1655
bb238(%1648 : $Builtin.Int64, %1649 : $Int, %1650 : $Builtin.Int1): // Preds: bb261 bb237
  %1651 = struct $Int (%1648 : $Builtin.Int64), scope 215 // user: %1653
  // function_ref specialized _StringBuffer.init(capacity : Int, initialSize : Int, elementWidth : Int) -> _StringBuffer
  %1652 = function_ref @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // user: %1653
  %1653 = apply %1652(%1649, %1635, %1651) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer, scope 215 // users: %1734, %1706, %1704, %1703, %1657, %1656, %1654
  debug_value %1653 : $_StringBuffer, scope 215   // id: %1654
  cond_br %1650, bb239, bb250, scope 215          // id: %1655

bb239:                                            // Preds: bb238
  debug_value %1653 : $_StringBuffer, scope 215   // id: %1656
  %1657 = struct_extract %1653 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %1663, %1662, %1659, %1658
  %1658 = struct_extract %1657 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %1664, %1667
  debug_value %1657 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1659
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1660 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %1661
  %1661 = apply %1660() : $@convention(thin) () -> Int, scope 215 // users: %1670, %1669
  debug_value %1657 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1662
  debug_value %1657 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1663
  switch_enum %1658 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb240, case #Optional.some!enumelt.1: bb241, scope 215 // id: %1664

bb240:                                            // Preds: bb239
  cond_fail %1538 : $Builtin.Int1, scope 215      // id: %1665
  unreachable, scope 215                          // id: %1666

bb241:                                            // Preds: bb239
  %1667 = unchecked_enum_data %1658 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %1668
  %1668 = ref_to_raw_pointer %1667 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %1672
  %1669 = struct_extract %1661 : $Int, #Int._value, scope 215 // user: %1671
  debug_value %1661 : $Int, scope 215             // id: %1670
  %1671 = builtin "truncOrBitCast_Int64_Word"(%1669 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %1672
  %1672 = index_raw_pointer %1668 : $Builtin.RawPointer, %1671 : $Builtin.Word, scope 215 // user: %1678
  debug_value %1573 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1673
  %1674 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1701, %1680, %1676
  %1675 = alloc_stack $UTF8, scope 215            // users: %1700, %1680, %1677
  store %1573 to %1674 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1676
  store %1582 to %1675 : $*UTF8, scope 215        // id: %1677
  br bb242(%1672 : $Builtin.RawPointer), scope 215 // id: %1678

// %1679                                          // users: %1697, %1695
bb242(%1679 : $Builtin.RawPointer):               // Preds: bb243 bb241
  %1680 = apply %1584(%1674, %1675) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1681
  switch_enum %1680 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb243, case #UnicodeDecodingResult.emptyInput!enumelt: bb244, case #UnicodeDecodingResult.error!enumelt: bb249, scope 215 // id: %1681

// %1682                                          // users: %1687, %1686, %1685, %1684, %1683
bb243(%1682 : $UnicodeScalar):                    // Preds: bb242
  debug_value %1682 : $UnicodeScalar, scope 215   // id: %1683
  debug_value %1682 : $UnicodeScalar, scope 215   // id: %1684
  debug_value %1682 : $UnicodeScalar, scope 215   // id: %1685
  debug_value %1682 : $UnicodeScalar, scope 215   // id: %1686
  %1687 = struct_extract %1682 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %1689, %1688
  debug_value %1687 : $UInt32, scope 215          // id: %1688
  %1689 = struct_extract %1687 : $UInt32, #UInt32._value, scope 215 // user: %1690
  %1690 = builtin "u_to_u_checked_trunc_Int32_Int8"(%1689 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1), scope 215 // users: %1692, %1691
  %1691 = tuple_extract %1690 : $(Builtin.Int8, Builtin.Int1), 0, scope 215 // user: %1694
  %1692 = tuple_extract %1690 : $(Builtin.Int8, Builtin.Int1), 1, scope 215 // user: %1693
  cond_fail %1692 : $Builtin.Int1, scope 215      // id: %1693
  %1694 = struct $UInt8 (%1691 : $Builtin.Int8), scope 215 // user: %1696
  %1695 = pointer_to_address %1679 : $Builtin.RawPointer to [strict] $*UInt8, scope 215 // user: %1696
  store %1694 to %1695 : $*UInt8, scope 215       // id: %1696
  %1697 = index_raw_pointer %1679 : $Builtin.RawPointer, %1559 : $Builtin.Word, scope 215 // user: %1698
  br bb242(%1697 : $Builtin.RawPointer), scope 215 // id: %1698

bb244:                                            // Preds: bb242
  br bb245, scope 215                             // id: %1699

bb245:                                            // Preds: bb249 bb244
  dealloc_stack %1675 : $*UTF8, scope 215         // id: %1700
  dealloc_stack %1674 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1701
  br bb246, scope 215                             // id: %1702

bb246:                                            // Preds: bb258 bb245
  debug_value %1653 : $_StringBuffer, scope 215   // id: %1703
  debug_value %1653 : $_StringBuffer, scope 215   // id: %1704
  // function_ref specialized _StringCore.init(_StringBuffer) -> _StringCore
  %1705 = function_ref @_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_ : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // user: %1706
  %1706 = apply %1705(%1653) : $@convention(thin) (@owned _StringBuffer) -> @owned _StringCore, scope 215 // users: %1731, %1726, %1727, %1728, %1707
  %1707 = struct $String (%1706 : $_StringCore), scope 215 // users: %1722, %1711, %1709
  debug_value_addr %11 : $*String, scope 262      // id: %1708
  debug_value %1707 : $String, scope 262          // id: %1709
  debug_value_addr %11 : $*String, scope 262      // id: %1710
  debug_value %1707 : $String, scope 262          // id: %1711
  %1712 = struct_element_addr %11 : $*String, #String._core, scope 262 // users: %1730, %1720, %1713
  %1713 = struct_element_addr %1712 : $*_StringCore, #_StringCore._countAndFlags, scope 262 // user: %1714
  %1714 = struct_element_addr %1713 : $*UInt, #UInt._value, scope 262 // user: %1715
  %1715 = load %1714 : $*Builtin.Int64, scope 262 // user: %1717
  %1716 = integer_literal $Builtin.Int64, 4611686018427387903, scope 262 // user: %1717
  %1717 = builtin "and_Int64"(%1715 : $Builtin.Int64, %1716 : $Builtin.Int64) : $Builtin.Int64, scope 262 // user: %1718
  %1718 = builtin "cmp_eq_Int64"(%1717 : $Builtin.Int64, %1550 : $Builtin.Int64) : $Builtin.Int1, scope 262 // user: %1719
  cond_br %1718, bb247, bb248, scope 262          // id: %1719

bb247:                                            // Preds: bb246
  %1720 = struct_element_addr %1712 : $*_StringCore, #_StringCore._owner, scope 262 // user: %1721
  %1721 = load %1720 : $*Optional<AnyObject>, scope 262 // user: %1723
  store %1707 to %11 : $*String, scope 262        // id: %1722
  release_value %1721 : $Optional<AnyObject>, scope 215 // id: %1723
  br bb5, scope 215                               // id: %1724

bb248:                                            // Preds: bb246
  // function_ref specialized _StringCore.append(_StringCore) -> ()
  %1725 = function_ref @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 262 // user: %1730
  %1726 = struct_extract %1706 : $_StringCore, #_StringCore._owner, scope 262 // user: %1730
  %1727 = struct_extract %1706 : $_StringCore, #_StringCore._countAndFlags, scope 262 // user: %1729
  %1728 = struct_extract %1706 : $_StringCore, #_StringCore._baseAddress, scope 262 // user: %1730
  %1729 = struct_extract %1727 : $UInt, #UInt._value, scope 262 // user: %1730
  %1730 = apply %1725(%1728, %1729, %1726, %1712) : $@convention(method) (Optional<UnsafeMutableRawPointer>, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> (), scope 262
  release_value %1706 : $_StringCore, scope 215   // id: %1731
  br bb5, scope 262                               // id: %1732

bb249:                                            // Preds: bb242
  br bb245, scope 215                             // id: %1733

bb250:                                            // Preds: bb238
  %1734 = struct_extract %1653 : $_StringBuffer, #_StringBuffer._storage, scope 215 // users: %1740, %1739, %1736, %1735
  %1735 = struct_extract %1734 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage, scope 215 // users: %1741, %1744
  debug_value %1734 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1736
  // function_ref specialized specialized static _HeapBuffer._elementOffset() -> Int
  %1737 = function_ref @_TTSfq4d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TZFVs11_HeapBuffer14_elementOffsetfT_Si : $@convention(thin) () -> Int, scope 215 // user: %1738
  %1738 = apply %1737() : $@convention(thin) () -> Int, scope 215 // users: %1747, %1746
  debug_value %1734 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1739
  debug_value %1734 : $_HeapBuffer<_StringBufferIVars, UInt16>, scope 215 // id: %1740
  switch_enum %1735 : $Optional<Builtin.NativeObject>, case #Optional.none!enumelt: bb251, case #Optional.some!enumelt.1: bb252, scope 215 // id: %1741

bb251:                                            // Preds: bb250
  cond_fail %1538 : $Builtin.Int1, scope 215      // id: %1742
  unreachable, scope 215                          // id: %1743

bb252:                                            // Preds: bb250
  %1744 = unchecked_enum_data %1735 : $Optional<Builtin.NativeObject>, #Optional.some!enumelt.1, scope 215 // user: %1745
  %1745 = ref_to_raw_pointer %1744 : $Builtin.NativeObject to $Builtin.RawPointer, scope 215 // user: %1749
  %1746 = struct_extract %1738 : $Int, #Int._value, scope 215 // user: %1748
  debug_value %1738 : $Int, scope 215             // id: %1747
  %1748 = builtin "truncOrBitCast_Int64_Word"(%1746 : $Builtin.Int64) : $Builtin.Word, scope 215 // user: %1749
  %1749 = index_raw_pointer %1745 : $Builtin.RawPointer, %1748 : $Builtin.Word, scope 215 // user: %1755
  debug_value %1573 : $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1750
  %1751 = alloc_stack $IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // users: %1819, %1757, %1753
  %1752 = alloc_stack $UTF8, scope 215            // users: %1818, %1757, %1754
  store %1573 to %1751 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1753
  store %1582 to %1752 : $*UTF8, scope 215        // id: %1754
  br bb253(%1749 : $Builtin.RawPointer), scope 215 // id: %1755

// %1756                                          // users: %1799, %1795, %1780, %1776
bb253(%1756 : $Builtin.RawPointer):               // Preds: bb256 bb255 bb252
  %1757 = apply %1584(%1751, %1752) : $@convention(method) (@inout IndexingIterator<UnsafeBufferPointer<UInt8>>, @inout UTF8) -> UnicodeDecodingResult, scope 215 // user: %1758
  switch_enum %1757 : $UnicodeDecodingResult, case #UnicodeDecodingResult.scalarValue!enumelt.1: bb254, case #UnicodeDecodingResult.emptyInput!enumelt: bb257, case #UnicodeDecodingResult.error!enumelt: bb259, scope 215 // id: %1758

// %1759                                          // users: %1764, %1763, %1762, %1761, %1760
bb254(%1759 : $UnicodeScalar):                    // Preds: bb253
  debug_value %1759 : $UnicodeScalar, scope 215   // id: %1760
  debug_value %1759 : $UnicodeScalar, scope 215   // id: %1761
  debug_value %1759 : $UnicodeScalar, scope 215   // id: %1762
  debug_value %1759 : $UnicodeScalar, scope 215   // id: %1763
  %1764 = struct_extract %1759 : $UnicodeScalar, #UnicodeScalar._value, scope 215 // users: %1767, %1765
  debug_value %1764 : $UInt32, scope 215          // id: %1765
  %1766 = integer_literal $Builtin.Int32, 65535, scope 215 // user: %1768
  %1767 = struct_extract %1764 : $UInt32, #UInt32._value, scope 215 // users: %1802, %1784, %1770, %1768
  %1768 = builtin "cmp_ule_Int32"(%1767 : $Builtin.Int32, %1766 : $Builtin.Int32) : $Builtin.Int1, scope 215 // user: %1769
  cond_br %1768, bb255, bb256, scope 215          // id: %1769

bb255:                                            // Preds: bb254
  %1770 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1767 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1772, %1771
  %1771 = tuple_extract %1770 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1774
  %1772 = tuple_extract %1770 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1773
  cond_fail %1772 : $Builtin.Int1, scope 215      // id: %1773
  %1774 = struct $UInt16 (%1771 : $Builtin.Int16), scope 215 // users: %1777, %1775
  debug_value %1774 : $UInt16, scope 215          // id: %1775
  %1776 = pointer_to_address %1756 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1777
  store %1774 to %1776 : $*UInt16, scope 215      // id: %1777
  %1778 = metatype $@thick UInt16.Type, scope 215 // user: %1779
  %1779 = builtin "strideof_nonzero"<UInt16>(%1778 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // user: %1780
  %1780 = index_raw_pointer %1756 : $Builtin.RawPointer, %1779 : $Builtin.Word, scope 215 // user: %1781
  br bb253(%1780 : $Builtin.RawPointer), scope 215 // id: %1781

bb256:                                            // Preds: bb254
  %1782 = integer_literal $Builtin.Int32, 55232, scope 215 // user: %1785
  %1783 = integer_literal $Builtin.Int32, 10, scope 215 // user: %1784
  %1784 = builtin "lshr_Int32"(%1767 : $Builtin.Int32, %1783 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %1785
  %1785 = builtin "uadd_with_overflow_Int32"(%1782 : $Builtin.Int32, %1784 : $Builtin.Int32, %1538 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %1787, %1786
  %1786 = tuple_extract %1785 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %1789
  %1787 = tuple_extract %1785 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %1788
  cond_fail %1787 : $Builtin.Int1, scope 215      // id: %1788
  %1789 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1786 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1791, %1790
  %1790 = tuple_extract %1789 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1793
  %1791 = tuple_extract %1789 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1792
  cond_fail %1791 : $Builtin.Int1, scope 215      // id: %1792
  %1793 = struct $UInt16 (%1790 : $Builtin.Int16), scope 215 // users: %1796, %1794
  debug_value %1793 : $UInt16, scope 215          // id: %1794
  %1795 = pointer_to_address %1756 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1796
  store %1793 to %1795 : $*UInt16, scope 215      // id: %1796
  %1797 = metatype $@thick UInt16.Type, scope 215 // user: %1798
  %1798 = builtin "strideof_nonzero"<UInt16>(%1797 : $@thick UInt16.Type) : $Builtin.Word, scope 215 // users: %1815, %1799
  %1799 = index_raw_pointer %1756 : $Builtin.RawPointer, %1798 : $Builtin.Word, scope 215 // users: %1815, %1813
  %1800 = integer_literal $Builtin.Int32, 56320, scope 215 // user: %1803
  %1801 = integer_literal $Builtin.Int32, 1023, scope 215 // user: %1802
  %1802 = builtin "and_Int32"(%1767 : $Builtin.Int32, %1801 : $Builtin.Int32) : $Builtin.Int32, scope 215 // user: %1803
  %1803 = builtin "uadd_with_overflow_Int32"(%1800 : $Builtin.Int32, %1802 : $Builtin.Int32, %1538 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1), scope 215 // users: %1805, %1804
  %1804 = tuple_extract %1803 : $(Builtin.Int32, Builtin.Int1), 0, scope 215 // user: %1807
  %1805 = tuple_extract %1803 : $(Builtin.Int32, Builtin.Int1), 1, scope 215 // user: %1806
  cond_fail %1805 : $Builtin.Int1, scope 215      // id: %1806
  %1807 = builtin "u_to_u_checked_trunc_Int32_Int16"(%1804 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1), scope 215 // users: %1809, %1808
  %1808 = tuple_extract %1807 : $(Builtin.Int16, Builtin.Int1), 0, scope 215 // user: %1811
  %1809 = tuple_extract %1807 : $(Builtin.Int16, Builtin.Int1), 1, scope 215 // user: %1810
  cond_fail %1809 : $Builtin.Int1, scope 215      // id: %1810
  %1811 = struct $UInt16 (%1808 : $Builtin.Int16), scope 215 // users: %1814, %1812
  debug_value %1811 : $UInt16, scope 215          // id: %1812
  %1813 = pointer_to_address %1799 : $Builtin.RawPointer to [strict] $*UInt16, scope 215 // user: %1814
  store %1811 to %1813 : $*UInt16, scope 215      // id: %1814
  %1815 = index_raw_pointer %1799 : $Builtin.RawPointer, %1798 : $Builtin.Word, scope 215 // user: %1816
  br bb253(%1815 : $Builtin.RawPointer), scope 215 // id: %1816

bb257:                                            // Preds: bb253
  br bb258, scope 215                             // id: %1817

bb258:                                            // Preds: bb259 bb257
  dealloc_stack %1752 : $*UTF8, scope 215         // id: %1818
  dealloc_stack %1751 : $*IndexingIterator<UnsafeBufferPointer<UInt8>>, scope 215 // id: %1819
  br bb246, scope 215                             // id: %1820

bb259:                                            // Preds: bb253
  br bb258, scope 215                             // id: %1821

bb260:                                            // Preds: bb235
  br bb261(%1572 : $Int), scope 215               // id: %1822

// %1823                                          // user: %1825
bb261(%1823 : $Int):                              // Preds: bb264 bb260
  %1824 = integer_literal $Builtin.Int64, 2, scope 215 // user: %1825
  br bb238(%1824 : $Builtin.Int64, %1823 : $Int, %1561 : $Builtin.Int1), scope 215 // id: %1825

bb262:                                            // Preds: bb234
  %1826 = struct_extract %1637 : $Bool, #Bool._value, scope 215 // user: %1827
  cond_br %1826, bb263, bb264, scope 215          // id: %1827

bb263:                                            // Preds: bb262
  br bb237(%1635 : $Int), scope 215               // id: %1828

bb264:                                            // Preds: bb262
  br bb261(%1635 : $Int), scope 215               // id: %1829

bb265:                                            // Preds: bb233
  cond_fail %1538 : $Builtin.Int1, scope 215      // id: %1830
  unreachable, scope 215                          // id: %1831

bb266:                                            // Preds: bb221
  %1832 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 215 // user: %1833
  br bb233(%1832 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %1833

bb267:                                            // Preds: bb175
  %1834 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt, scope 215 // user: %1835
  br bb187(%1834 : $Optional<(count: Int, isASCII: Bool)>), scope 215 // id: %1835

bb268:                                            // Preds: bb173
  br bb220, scope 215                             // id: %1836

bb269:                                            // Preds: bb2
  %1837 = class_method %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, #_AnyCollectionBox._first!getter.1 : <Element> (_AnyCollectionBox<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 215 // user: %1839
  retain_value %12 : $String, scope 215           // id: %1838
  %1839 = apply %1837<(label: Optional<String>, value: Any)>(%20, %2) : $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 215
  switch_enum_addr %20 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: bb4, case #Optional.none!enumelt: bb6, scope 215 // id: %1840

bb270:                                            // Preds: bb10
  %1841 = class_method %115 : $_AnySequenceBox<(label: Optional<String>, value: Any)>, #_AnySequenceBox._makeIterator!1 : <Element> (_AnySequenceBox<Element>) -> () -> AnyIterator<Element> , $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 215 // user: %1843
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %1842
  %1843 = apply %1841<(label: Optional<String>, value: Any)>(%115) : $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 215 // users: %1856, %196, %141, %1854, %1850, %1849
  strong_release %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %1844
  %1845 = alloc_stack $Optional<(Optional<String>, Any)>, scope 215 // users: %223, %195, %156, %153, %150, %1846
  %1846 = init_enum_data_addr %1845 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 215 // users: %1848, %1847
  %1847 = tuple_element_addr %1846 : $*(Optional<String>, Any), 0, scope 215 // user: %148
  %1848 = tuple_element_addr %1846 : $*(Optional<String>, Any), 1, scope 215 // user: %149
  %1849 = struct_extract %1843 : $AnyIterator<(label: Optional<String>, value: Any)>, #AnyIterator._box, scope 215 // users: %131, %1855, %1851
  debug_value %1843 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %1850
  %1851 = class_method %1849 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, #_AnyIteratorBoxBase.next!1 : <Element> (_AnyIteratorBoxBase<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 215 // user: %1855
  %1852 = integer_literal $Builtin.Int1, 0, scope 215 // users: %167, %153, %1857
  br bb12(%80 : $Builtin.Int1), scope 215         // id: %1853

bb271:                                            // Preds: bb12
  retain_value %1843 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %1854
  %1855 = apply %1851<(label: Optional<String>, value: Any)>(%130, %1849) : $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 215
  release_value %1843 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %1856
  %1857 = select_enum_addr %130 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: %80, case #Optional.none!enumelt: %1852 : $Builtin.Int1, scope 215 // user: %1858
  cond_br %1857, bb14, bb25, scope 215            // id: %1858

bb272:                                            // Preds: bb29
  %1859 = class_method %264 : $_AnySequenceBox<(label: Optional<String>, value: Any)>, #_AnySequenceBox._makeIterator!1 : <Element> (_AnySequenceBox<Element>) -> () -> AnyIterator<Element> , $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 215 // user: %1861
  strong_retain %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %1860
  %1861 = apply %1859<(label: Optional<String>, value: Any)>(%264) : $@convention(method) <τ_0_0> (@guaranteed _AnySequenceBox<τ_0_0>) -> @owned AnyIterator<τ_0_0>, scope 215 // users: %1874, %408, %290, %1872, %1868, %1867
  strong_release %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, scope 215 // id: %1862
  %1863 = alloc_stack $Optional<(Optional<String>, Any)>, scope 215 // users: %435, %407, %305, %302, %299, %1864
  %1864 = init_enum_data_addr %1863 : $*Optional<(Optional<String>, Any)>, #Optional.some!enumelt.1, scope 215 // users: %1866, %1865
  %1865 = tuple_element_addr %1864 : $*(Optional<String>, Any), 0, scope 215 // user: %297
  %1866 = tuple_element_addr %1864 : $*(Optional<String>, Any), 1, scope 215 // user: %298
  %1867 = struct_extract %1861 : $AnyIterator<(label: Optional<String>, value: Any)>, #AnyIterator._box, scope 215 // users: %280, %1873, %1869
  debug_value %1861 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %1868
  %1869 = class_method %1867 : $_AnyIteratorBoxBase<(label: Optional<String>, value: Any)>, #_AnyIteratorBoxBase.next!1 : <Element> (_AnyIteratorBoxBase<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 215 // user: %1873
  %1870 = integer_literal $Builtin.Int1, 0, scope 215 // users: %371, %302, %1875
  br bb31(%231 : $Builtin.Int1), scope 215        // id: %1871

bb273:                                            // Preds: bb31
  retain_value %1861 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %1872
  %1873 = apply %1869<(label: Optional<String>, value: Any)>(%279, %1867) : $@convention(method) <τ_0_0> (@guaranteed _AnyIteratorBoxBase<τ_0_0>) -> @out Optional<τ_0_0>, scope 215
  release_value %1861 : $AnyIterator<(label: Optional<String>, value: Any)>, scope 215 // id: %1874
  %1875 = select_enum_addr %279 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: %231, case #Optional.none!enumelt: %1870 : $Builtin.Int1, scope 215 // user: %1876
  cond_br %1875, bb33, bb53, scope 215            // id: %1876

bb274:                                            // Preds: bb89
  %1877 = class_method %2 : $_AnyCollectionBox<(label: Optional<String>, value: Any)>, #_AnyCollectionBox._first!getter.1 : <Element> (_AnyCollectionBox<Element>) -> () -> Element? , $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 215 // user: %1878
  %1878 = apply %1877<(label: Optional<String>, value: Any)>(%687, %2) : $@convention(method) <τ_0_0> (@guaranteed _AnyCollectionBox<τ_0_0>) -> @out Optional<τ_0_0>, scope 215
  switch_enum_addr %687 : $*Optional<(label: Optional<String>, value: Any)>, case #Optional.some!enumelt.1: bb91, case #Optional.none!enumelt: bb103, scope 215 // id: %1879
}

sil_vtable _HeapBufferStorage {
  #_HeapBufferStorage.init!initializer.1: _TFCs18_HeapBufferStoragecfT_GS_xq__	// _HeapBufferStorage.init() -> _HeapBufferStorage<A, B>
  #_HeapBufferStorage.deinit!deallocator: _TFCs18_HeapBufferStorageD	// _HeapBufferStorage.__deallocating_deinit
}

sil_vtable _RandomAccessCollectionBox {
  #_AnySequenceBox._makeIterator!1: _TFCs26_RandomAccessCollectionBox13_makeIteratorfT_GVs11AnyIteratorWx8Iterator7Element__	// _RandomAccessCollectionBox._makeIterator() -> AnyIterator<A.Iterator.Element>
  #_AnySequenceBox._underestimatedCount!getter.1: _TFCs26_RandomAccessCollectionBoxg20_underestimatedCountSi	// _RandomAccessCollectionBox._underestimatedCount.getter
  #_AnySequenceBox._map!1: _TFCs26_RandomAccessCollectionBox4_mapurfzFzWx8Iterator7Element_qd__GSaqd___	// _RandomAccessCollectionBox._map<A> ((A.Iterator.Element) throws -> A1) throws -> [A1]
  #_AnySequenceBox._filter!1: _TFCs26_RandomAccessCollectionBox7_filterfzFzWx8Iterator7Element_SbGSaWxS0_S1___	// _RandomAccessCollectionBox._filter((A.Iterator.Element) throws -> Bool) throws -> [A.Iterator.Element]
  #_AnySequenceBox._forEach!1: _TFCs26_RandomAccessCollectionBox8_forEachfzFzWx8Iterator7Element_T_T_	// _RandomAccessCollectionBox._forEach((A.Iterator.Element) throws -> ()) throws -> ()
  #_AnySequenceBox.__preprocessingPass!1: _TFCs26_RandomAccessCollectionBox19__preprocessingPassurfzFzT_qd__GSqqd___	// _RandomAccessCollectionBox.__preprocessingPass<A> (() throws -> A1) throws -> A1?
  #_AnySequenceBox.__copyToContiguousArray!1: _TFCs26_RandomAccessCollectionBox23__copyToContiguousArrayfT_GVs15ContiguousArrayWx8Iterator7Element__	// _RandomAccessCollectionBox.__copyToContiguousArray() -> ContiguousArray<A.Iterator.Element>
  #_AnySequenceBox.__copyContents!1: _TFCs26_RandomAccessCollectionBox14__copyContentsfT12initializingGSpWx8Iterator7Element___GSpWxS0_S1___	// _RandomAccessCollectionBox.__copyContents(initializing : UnsafeMutablePointer<A.Iterator.Element>) -> UnsafeMutablePointer<A.Iterator.Element>
  #_AnySequenceBox._dropFirst!1: _TFCs26_RandomAccessCollectionBox10_dropFirstfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__	// _RandomAccessCollectionBox._dropFirst(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
  #_AnySequenceBox._dropLast!1: _TFCs26_RandomAccessCollectionBox9_dropLastfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__	// _RandomAccessCollectionBox._dropLast(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
  #_AnySequenceBox._prefix!1: _TFCs26_RandomAccessCollectionBox7_prefixfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__	// _RandomAccessCollectionBox._prefix(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
  #_AnySequenceBox._suffix!1: _TFCs26_RandomAccessCollectionBox7_suffixfSiGCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__	// _RandomAccessCollectionBox._suffix(Int) -> _AnyRandomAccessCollectionBox<A.Iterator.Element>
  #_AnySequenceBox._split!1: _TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs11AnySequenceWxS0_S1____	// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnySequence<A.Iterator.Element>]
  #_AnyCollectionBox._split!1: _TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs13AnyCollectionWxS0_S1____	// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnyCollection<A.Iterator.Element>]
  #_AnyCollectionBox.subscript!getter.1: _TFCs26_RandomAccessCollectionBoxg9subscriptFPs12_AnyIndexBox_Wx8Iterator7Element_	// _RandomAccessCollectionBox.subscript.getter
  #_AnyCollectionBox._index!1: _TFCs26_RandomAccessCollectionBox6_indexfT5afterPs12_AnyIndexBox__PS0__	// _RandomAccessCollectionBox._index(after : _AnyIndexBox) -> _AnyIndexBox
  #_AnyCollectionBox._formIndex!1: _TFCs26_RandomAccessCollectionBox10_formIndexfT5afterPs12_AnyIndexBox__T_	// _RandomAccessCollectionBox._formIndex(after : _AnyIndexBox) -> ()
  #_AnyCollectionBox._index!1: _TFCs26_RandomAccessCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int64_PS0__	// _RandomAccessCollectionBox._index(_AnyIndexBox, offsetBy : Int64) -> _AnyIndexBox
  #_AnyCollectionBox._index!1: _TFCs26_RandomAccessCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___GSqPS0___	// _RandomAccessCollectionBox._index(_AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> _AnyIndexBox?
  #_AnyCollectionBox._formIndex!1: _TFCs26_RandomAccessCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int64_T_	// _RandomAccessCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64) -> ()
  #_AnyCollectionBox._formIndex!1: _TFCs26_RandomAccessCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___Sb	// _RandomAccessCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> Bool
  #_AnyCollectionBox._distance!1: _TFCs26_RandomAccessCollectionBox9_distancefT4fromPs12_AnyIndexBox_2toPS0___Vs5Int64	// _RandomAccessCollectionBox._distance(from : _AnyIndexBox, to : _AnyIndexBox) -> Int64
  #_AnyCollectionBox._count!getter.1: _TFCs26_RandomAccessCollectionBoxg6_countVs5Int64	// _RandomAccessCollectionBox._count.getter
  #_AnyCollectionBox._first!getter.1: _TFCs26_RandomAccessCollectionBoxg6_firstGSqWx8Iterator7Element__	// _RandomAccessCollectionBox._first.getter
  #_AnyCollectionBox.subscript!getter.1: _TFCs26_RandomAccessCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GCs29_AnyRandomAccessCollectionBoxWx8Iterator7Element__	// _RandomAccessCollectionBox.subscript.getter
  #_AnyBidirectionalCollectionBox._split!1: _TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs26AnyBidirectionalCollectionWxS0_S1____	// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnyBidirectionalCollection<A.Iterator.Element>]
  #_AnyBidirectionalCollectionBox._index!1: _TFCs26_RandomAccessCollectionBox6_indexfT6beforePs12_AnyIndexBox__PS0__	// _RandomAccessCollectionBox._index(before : _AnyIndexBox) -> _AnyIndexBox
  #_AnyBidirectionalCollectionBox._formIndex!1: _TFCs26_RandomAccessCollectionBox10_formIndexfT6beforePs12_AnyIndexBox__T_	// _RandomAccessCollectionBox._formIndex(before : _AnyIndexBox) -> ()
  #_AnyBidirectionalCollectionBox._last!getter.1: _TFCs26_RandomAccessCollectionBoxg5_lastGSqWx8Iterator7Element__	// _RandomAccessCollectionBox._last.getter
  #_AnyRandomAccessCollectionBox._split!1: _TFCs26_RandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzWx8Iterator7Element_Sb_GSaGVs25AnyRandomAccessCollectionWxS0_S1____	// _RandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A.Iterator.Element) throws -> Bool) throws -> [AnyRandomAccessCollection<A.Iterator.Element>]
  #_RandomAccessCollectionBox.init!initializer.1: _TFCs26_RandomAccessCollectionBoxcfT5_basex_GS_x_	// _RandomAccessCollectionBox.init(_base : A) -> _RandomAccessCollectionBox<A>
  #_RandomAccessCollectionBox.deinit!deallocator: _TFCs26_RandomAccessCollectionBoxD	// _RandomAccessCollectionBox.__deallocating_deinit
}

sil_vtable _IndexBox {
  #_IndexBox.init!initializer.1: _TFCs9_IndexBoxcfT5_basex_GS_x_	// _IndexBox.init(_base : A) -> _IndexBox<A>
  #_IndexBox.deinit!deallocator: _TFCs9_IndexBoxD	// _IndexBox.__deallocating_deinit
}

sil_vtable _ContiguousArrayStorage {
  #_SwiftNativeNSArray.init!initializer.1: _TFCs23_ContiguousArrayStoragecfT_GS_x_	// _ContiguousArrayStorage.init() -> _ContiguousArrayStorage<A>
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// _ContiguousArrayStorageBase.withUnsafeBufferOfObjects<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A
  #_ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer!1: _TFCs24_ContiguousArrayStorage132_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_	// _ContiguousArrayStorage1._withVerbatimBridgedUnsafeBuffer<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A?
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedCount!1: _TFCs23_ContiguousArrayStorage27_getNonVerbatimBridgedCountfT_Si	// _ContiguousArrayStorage._getNonVerbatimBridgedCount() -> Int
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer!1: _TFCs23_ContiguousArrayStorage32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__	// _ContiguousArrayStorage._getNonVerbatimBridgedHeapBuffer() -> _HeapBuffer<Int, AnyObject>
  #_ContiguousArrayStorageBase.staticElementType!getter.1: _TFCs23_ContiguousArrayStorageg17staticElementTypePMP_	// _ContiguousArrayStorage.staticElementType.getter
  #_ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl!1: _TFCs23_ContiguousArrayStorage36_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_	// _ContiguousArrayStorage._withVerbatimBridgedUnsafeBufferImpl((UnsafeBufferPointer<AnyObject>) throws -> ()) throws -> ()
  #_ContiguousArrayStorage.deinit!deallocator: _TFCs23_ContiguousArrayStorageD	// _ContiguousArrayStorage.__deallocating_deinit
}

sil_vtable _IteratorBox {
  #_AnyIteratorBoxBase.next!1: _TFCs12_IteratorBox4nextfT_GSqwx7Element_	// _IteratorBox.next() -> A.Element?
  #_IteratorBox.init!initializer.1: _TFCs12_IteratorBoxcfxGS_x_	// _IteratorBox.init(A) -> _IteratorBox<A>
  #_IteratorBox.deinit!deallocator: _TFCs12_IteratorBoxD	// _IteratorBox.__deallocating_deinit
}

sil_vtable _AnyRandomAccessCollectionBox {
  #_AnySequenceBox._makeIterator!1: _TFCs15_AnySequenceBox13_makeIteratorfT_GVs11AnyIteratorx_	// _AnySequenceBox._makeIterator() -> AnyIterator<A>
  #_AnySequenceBox._underestimatedCount!getter.1: _TFCs15_AnySequenceBoxg20_underestimatedCountSi	// _AnySequenceBox._underestimatedCount.getter
  #_AnySequenceBox._map!1: _TFCs15_AnySequenceBox4_mapurfzFzxqd__GSaqd___	// _AnySequenceBox._map<A> ((A) throws -> A1) throws -> [A1]
  #_AnySequenceBox._filter!1: _TFCs15_AnySequenceBox7_filterfzFzxSbGSax_	// _AnySequenceBox._filter((A) throws -> Bool) throws -> [A]
  #_AnySequenceBox._forEach!1: _TFCs15_AnySequenceBox8_forEachfzFzxT_T_	// _AnySequenceBox._forEach((A) throws -> ()) throws -> ()
  #_AnySequenceBox.__preprocessingPass!1: _TFCs15_AnySequenceBox19__preprocessingPassurfzFzT_qd__GSqqd___	// _AnySequenceBox.__preprocessingPass<A> (() throws -> A1) throws -> A1?
  #_AnySequenceBox.__copyToContiguousArray!1: _TFCs15_AnySequenceBox23__copyToContiguousArrayfT_GVs15ContiguousArrayx_	// _AnySequenceBox.__copyToContiguousArray() -> ContiguousArray<A>
  #_AnySequenceBox.__copyContents!1: _TFCs15_AnySequenceBox14__copyContentsfT12initializingGSpx__GSpx_	// _AnySequenceBox.__copyContents(initializing : UnsafeMutablePointer<A>) -> UnsafeMutablePointer<A>
  #_AnySequenceBox._dropFirst!1: _TFCs29_AnyRandomAccessCollectionBox10_dropFirstfSiGS_x_	// _AnyRandomAccessCollectionBox._dropFirst(Int) -> _AnyRandomAccessCollectionBox<A>
  #_AnySequenceBox._dropLast!1: _TFCs29_AnyRandomAccessCollectionBox9_dropLastfSiGS_x_	// _AnyRandomAccessCollectionBox._dropLast(Int) -> _AnyRandomAccessCollectionBox<A>
  #_AnySequenceBox._prefix!1: _TFCs29_AnyRandomAccessCollectionBox7_prefixfSiGS_x_	// _AnyRandomAccessCollectionBox._prefix(Int) -> _AnyRandomAccessCollectionBox<A>
  #_AnySequenceBox._suffix!1: _TFCs29_AnyRandomAccessCollectionBox7_suffixfSiGS_x_	// _AnyRandomAccessCollectionBox._suffix(Int) -> _AnyRandomAccessCollectionBox<A>
  #_AnySequenceBox._split!1: _TFCs15_AnySequenceBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs11AnySequencex__	// _AnySequenceBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnySequence<A>]
  #_AnyCollectionBox._split!1: _TFCs17_AnyCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs13AnyCollectionx__	// _AnyCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyCollection<A>]
  #_AnyCollectionBox.subscript!getter.1: _TFCs17_AnyCollectionBoxg9subscriptFPs12_AnyIndexBox_x	// _AnyCollectionBox.subscript.getter
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfT5afterPs12_AnyIndexBox__PS0__	// _AnyCollectionBox._index(after : _AnyIndexBox) -> _AnyIndexBox
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfT5afterPs12_AnyIndexBox__T_	// _AnyCollectionBox._formIndex(after : _AnyIndexBox) -> ()
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int64_PS0__	// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64) -> _AnyIndexBox
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___GSqPS0___	// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> _AnyIndexBox?
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int64_T_	// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64) -> ()
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___Sb	// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> Bool
  #_AnyCollectionBox._distance!1: _TFCs17_AnyCollectionBox9_distancefT4fromPs12_AnyIndexBox_2toPS0___Vs5Int64	// _AnyCollectionBox._distance(from : _AnyIndexBox, to : _AnyIndexBox) -> Int64
  #_AnyCollectionBox._count!getter.1: _TFCs17_AnyCollectionBoxg6_countVs5Int64	// _AnyCollectionBox._count.getter
  #_AnyCollectionBox._first!getter.1: _TFCs17_AnyCollectionBoxg6_firstGSqx_	// _AnyCollectionBox._first.getter
  #_AnyCollectionBox.init!initializer.1: _TFCs29_AnyRandomAccessCollectionBoxcfT11_startIndexPs12_AnyIndexBox_8endIndexPS0___GS_x_	// _AnyRandomAccessCollectionBox.init(_startIndex : _AnyIndexBox, endIndex : _AnyIndexBox) -> _AnyRandomAccessCollectionBox<A>
  #_AnyCollectionBox.subscript!getter.1: _TFCs29_AnyRandomAccessCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GS_x_	// _AnyRandomAccessCollectionBox.subscript.getter
  #_AnyBidirectionalCollectionBox._split!1: _TFCs30_AnyBidirectionalCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs26AnyBidirectionalCollectionx__	// _AnyBidirectionalCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyBidirectionalCollection<A>]
  #_AnyBidirectionalCollectionBox._index!1: _TFCs30_AnyBidirectionalCollectionBox6_indexfT6beforePs12_AnyIndexBox__PS0__	// _AnyBidirectionalCollectionBox._index(before : _AnyIndexBox) -> _AnyIndexBox
  #_AnyBidirectionalCollectionBox._formIndex!1: _TFCs30_AnyBidirectionalCollectionBox10_formIndexfT6beforePs12_AnyIndexBox__T_	// _AnyBidirectionalCollectionBox._formIndex(before : _AnyIndexBox) -> ()
  #_AnyBidirectionalCollectionBox._last!getter.1: _TFCs30_AnyBidirectionalCollectionBoxg5_lastGSqx_	// _AnyBidirectionalCollectionBox._last.getter
  #_AnyRandomAccessCollectionBox._split!1: _TFCs29_AnyRandomAccessCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs25AnyRandomAccessCollectionx__	// _AnyRandomAccessCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyRandomAccessCollection<A>]
  #_AnyRandomAccessCollectionBox.deinit!deallocator: _TFCs29_AnyRandomAccessCollectionBoxD	// _AnyRandomAccessCollectionBox.__deallocating_deinit
}

sil_vtable _AnyBidirectionalCollectionBox {
  #_AnySequenceBox._makeIterator!1: _TFCs15_AnySequenceBox13_makeIteratorfT_GVs11AnyIteratorx_	// _AnySequenceBox._makeIterator() -> AnyIterator<A>
  #_AnySequenceBox._underestimatedCount!getter.1: _TFCs15_AnySequenceBoxg20_underestimatedCountSi	// _AnySequenceBox._underestimatedCount.getter
  #_AnySequenceBox._map!1: _TFCs15_AnySequenceBox4_mapurfzFzxqd__GSaqd___	// _AnySequenceBox._map<A> ((A) throws -> A1) throws -> [A1]
  #_AnySequenceBox._filter!1: _TFCs15_AnySequenceBox7_filterfzFzxSbGSax_	// _AnySequenceBox._filter((A) throws -> Bool) throws -> [A]
  #_AnySequenceBox._forEach!1: _TFCs15_AnySequenceBox8_forEachfzFzxT_T_	// _AnySequenceBox._forEach((A) throws -> ()) throws -> ()
  #_AnySequenceBox.__preprocessingPass!1: _TFCs15_AnySequenceBox19__preprocessingPassurfzFzT_qd__GSqqd___	// _AnySequenceBox.__preprocessingPass<A> (() throws -> A1) throws -> A1?
  #_AnySequenceBox.__copyToContiguousArray!1: _TFCs15_AnySequenceBox23__copyToContiguousArrayfT_GVs15ContiguousArrayx_	// _AnySequenceBox.__copyToContiguousArray() -> ContiguousArray<A>
  #_AnySequenceBox.__copyContents!1: _TFCs15_AnySequenceBox14__copyContentsfT12initializingGSpx__GSpx_	// _AnySequenceBox.__copyContents(initializing : UnsafeMutablePointer<A>) -> UnsafeMutablePointer<A>
  #_AnySequenceBox._dropFirst!1: _TFCs30_AnyBidirectionalCollectionBox10_dropFirstfSiGS_x_	// _AnyBidirectionalCollectionBox._dropFirst(Int) -> _AnyBidirectionalCollectionBox<A>
  #_AnySequenceBox._dropLast!1: _TFCs30_AnyBidirectionalCollectionBox9_dropLastfSiGS_x_	// _AnyBidirectionalCollectionBox._dropLast(Int) -> _AnyBidirectionalCollectionBox<A>
  #_AnySequenceBox._prefix!1: _TFCs30_AnyBidirectionalCollectionBox7_prefixfSiGS_x_	// _AnyBidirectionalCollectionBox._prefix(Int) -> _AnyBidirectionalCollectionBox<A>
  #_AnySequenceBox._suffix!1: _TFCs30_AnyBidirectionalCollectionBox7_suffixfSiGS_x_	// _AnyBidirectionalCollectionBox._suffix(Int) -> _AnyBidirectionalCollectionBox<A>
  #_AnySequenceBox._split!1: _TFCs15_AnySequenceBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs11AnySequencex__	// _AnySequenceBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnySequence<A>]
  #_AnyCollectionBox._split!1: _TFCs17_AnyCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs13AnyCollectionx__	// _AnyCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyCollection<A>]
  #_AnyCollectionBox.subscript!getter.1: _TFCs17_AnyCollectionBoxg9subscriptFPs12_AnyIndexBox_x	// _AnyCollectionBox.subscript.getter
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfT5afterPs12_AnyIndexBox__PS0__	// _AnyCollectionBox._index(after : _AnyIndexBox) -> _AnyIndexBox
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfT5afterPs12_AnyIndexBox__T_	// _AnyCollectionBox._formIndex(after : _AnyIndexBox) -> ()
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int64_PS0__	// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64) -> _AnyIndexBox
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___GSqPS0___	// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> _AnyIndexBox?
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int64_T_	// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64) -> ()
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___Sb	// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> Bool
  #_AnyCollectionBox._distance!1: _TFCs17_AnyCollectionBox9_distancefT4fromPs12_AnyIndexBox_2toPS0___Vs5Int64	// _AnyCollectionBox._distance(from : _AnyIndexBox, to : _AnyIndexBox) -> Int64
  #_AnyCollectionBox._count!getter.1: _TFCs17_AnyCollectionBoxg6_countVs5Int64	// _AnyCollectionBox._count.getter
  #_AnyCollectionBox._first!getter.1: _TFCs17_AnyCollectionBoxg6_firstGSqx_	// _AnyCollectionBox._first.getter
  #_AnyCollectionBox.init!initializer.1: _TFCs30_AnyBidirectionalCollectionBoxcfT11_startIndexPs12_AnyIndexBox_8endIndexPS0___GS_x_	// _AnyBidirectionalCollectionBox.init(_startIndex : _AnyIndexBox, endIndex : _AnyIndexBox) -> _AnyBidirectionalCollectionBox<A>
  #_AnyCollectionBox.subscript!getter.1: _TFCs30_AnyBidirectionalCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GS_x_	// _AnyBidirectionalCollectionBox.subscript.getter
  #_AnyBidirectionalCollectionBox._split!1: _TFCs30_AnyBidirectionalCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs26AnyBidirectionalCollectionx__	// _AnyBidirectionalCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyBidirectionalCollection<A>]
  #_AnyBidirectionalCollectionBox._index!1: _TFCs30_AnyBidirectionalCollectionBox6_indexfT6beforePs12_AnyIndexBox__PS0__	// _AnyBidirectionalCollectionBox._index(before : _AnyIndexBox) -> _AnyIndexBox
  #_AnyBidirectionalCollectionBox._formIndex!1: _TFCs30_AnyBidirectionalCollectionBox10_formIndexfT6beforePs12_AnyIndexBox__T_	// _AnyBidirectionalCollectionBox._formIndex(before : _AnyIndexBox) -> ()
  #_AnyBidirectionalCollectionBox._last!getter.1: _TFCs30_AnyBidirectionalCollectionBoxg5_lastGSqx_	// _AnyBidirectionalCollectionBox._last.getter
  #_AnyBidirectionalCollectionBox.deinit!deallocator: _TFCs30_AnyBidirectionalCollectionBoxD	// _AnyBidirectionalCollectionBox.__deallocating_deinit
}

sil_vtable _AnyCollectionBox {
  #_AnySequenceBox._makeIterator!1: _TFCs15_AnySequenceBox13_makeIteratorfT_GVs11AnyIteratorx_	// _AnySequenceBox._makeIterator() -> AnyIterator<A>
  #_AnySequenceBox._underestimatedCount!getter.1: _TFCs15_AnySequenceBoxg20_underestimatedCountSi	// _AnySequenceBox._underestimatedCount.getter
  #_AnySequenceBox._map!1: _TFCs15_AnySequenceBox4_mapurfzFzxqd__GSaqd___	// _AnySequenceBox._map<A> ((A) throws -> A1) throws -> [A1]
  #_AnySequenceBox._filter!1: _TFCs15_AnySequenceBox7_filterfzFzxSbGSax_	// _AnySequenceBox._filter((A) throws -> Bool) throws -> [A]
  #_AnySequenceBox._forEach!1: _TFCs15_AnySequenceBox8_forEachfzFzxT_T_	// _AnySequenceBox._forEach((A) throws -> ()) throws -> ()
  #_AnySequenceBox.__preprocessingPass!1: _TFCs15_AnySequenceBox19__preprocessingPassurfzFzT_qd__GSqqd___	// _AnySequenceBox.__preprocessingPass<A> (() throws -> A1) throws -> A1?
  #_AnySequenceBox.__copyToContiguousArray!1: _TFCs15_AnySequenceBox23__copyToContiguousArrayfT_GVs15ContiguousArrayx_	// _AnySequenceBox.__copyToContiguousArray() -> ContiguousArray<A>
  #_AnySequenceBox.__copyContents!1: _TFCs15_AnySequenceBox14__copyContentsfT12initializingGSpx__GSpx_	// _AnySequenceBox.__copyContents(initializing : UnsafeMutablePointer<A>) -> UnsafeMutablePointer<A>
  #_AnySequenceBox._dropFirst!1: _TFCs17_AnyCollectionBox10_dropFirstfSiGS_x_	// _AnyCollectionBox._dropFirst(Int) -> _AnyCollectionBox<A>
  #_AnySequenceBox._dropLast!1: _TFCs17_AnyCollectionBox9_dropLastfSiGS_x_	// _AnyCollectionBox._dropLast(Int) -> _AnyCollectionBox<A>
  #_AnySequenceBox._prefix!1: _TFCs17_AnyCollectionBox7_prefixfSiGS_x_	// _AnyCollectionBox._prefix(Int) -> _AnyCollectionBox<A>
  #_AnySequenceBox._suffix!1: _TFCs17_AnyCollectionBox7_suffixfSiGS_x_	// _AnyCollectionBox._suffix(Int) -> _AnyCollectionBox<A>
  #_AnySequenceBox._split!1: _TFCs15_AnySequenceBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs11AnySequencex__	// _AnySequenceBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnySequence<A>]
  #_AnyCollectionBox._split!1: _TFCs17_AnyCollectionBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs13AnyCollectionx__	// _AnyCollectionBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnyCollection<A>]
  #_AnyCollectionBox.subscript!getter.1: _TFCs17_AnyCollectionBoxg9subscriptFPs12_AnyIndexBox_x	// _AnyCollectionBox.subscript.getter
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfT5afterPs12_AnyIndexBox__PS0__	// _AnyCollectionBox._index(after : _AnyIndexBox) -> _AnyIndexBox
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfT5afterPs12_AnyIndexBox__T_	// _AnyCollectionBox._formIndex(after : _AnyIndexBox) -> ()
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int64_PS0__	// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64) -> _AnyIndexBox
  #_AnyCollectionBox._index!1: _TFCs17_AnyCollectionBox6_indexfTPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___GSqPS0___	// _AnyCollectionBox._index(_AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> _AnyIndexBox?
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int64_T_	// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64) -> ()
  #_AnyCollectionBox._formIndex!1: _TFCs17_AnyCollectionBox10_formIndexfTRPs12_AnyIndexBox_8offsetByVs5Int649limitedByPS0___Sb	// _AnyCollectionBox._formIndex(inout _AnyIndexBox, offsetBy : Int64, limitedBy : _AnyIndexBox) -> Bool
  #_AnyCollectionBox._distance!1: _TFCs17_AnyCollectionBox9_distancefT4fromPs12_AnyIndexBox_2toPS0___Vs5Int64	// _AnyCollectionBox._distance(from : _AnyIndexBox, to : _AnyIndexBox) -> Int64
  #_AnyCollectionBox._count!getter.1: _TFCs17_AnyCollectionBoxg6_countVs5Int64	// _AnyCollectionBox._count.getter
  #_AnyCollectionBox._first!getter.1: _TFCs17_AnyCollectionBoxg6_firstGSqx_	// _AnyCollectionBox._first.getter
  #_AnyCollectionBox.init!initializer.1: _TFCs17_AnyCollectionBoxcfT11_startIndexPs12_AnyIndexBox_8endIndexPS0___GS_x_	// _AnyCollectionBox.init(_startIndex : _AnyIndexBox, endIndex : _AnyIndexBox) -> _AnyCollectionBox<A>
  #_AnyCollectionBox.subscript!getter.1: _TFCs17_AnyCollectionBoxg9subscriptFT5startPs12_AnyIndexBox_3endPS0___GS_x_	// _AnyCollectionBox.subscript.getter
  #_AnyCollectionBox.deinit!deallocator: _TFCs17_AnyCollectionBoxD	// _AnyCollectionBox.__deallocating_deinit
  #_AnyCollectionBox!ivardestroyer.1: _TFCs17_AnyCollectionBoxE	// _AnyCollectionBox.__ivar_destroyer
}

sil_vtable _AnySequenceBox {
  #_AnySequenceBox._makeIterator!1: _TFCs15_AnySequenceBox13_makeIteratorfT_GVs11AnyIteratorx_	// _AnySequenceBox._makeIterator() -> AnyIterator<A>
  #_AnySequenceBox._underestimatedCount!getter.1: _TFCs15_AnySequenceBoxg20_underestimatedCountSi	// _AnySequenceBox._underestimatedCount.getter
  #_AnySequenceBox._map!1: _TFCs15_AnySequenceBox4_mapurfzFzxqd__GSaqd___	// _AnySequenceBox._map<A> ((A) throws -> A1) throws -> [A1]
  #_AnySequenceBox._filter!1: _TFCs15_AnySequenceBox7_filterfzFzxSbGSax_	// _AnySequenceBox._filter((A) throws -> Bool) throws -> [A]
  #_AnySequenceBox._forEach!1: _TFCs15_AnySequenceBox8_forEachfzFzxT_T_	// _AnySequenceBox._forEach((A) throws -> ()) throws -> ()
  #_AnySequenceBox.__preprocessingPass!1: _TFCs15_AnySequenceBox19__preprocessingPassurfzFzT_qd__GSqqd___	// _AnySequenceBox.__preprocessingPass<A> (() throws -> A1) throws -> A1?
  #_AnySequenceBox.__copyToContiguousArray!1: _TFCs15_AnySequenceBox23__copyToContiguousArrayfT_GVs15ContiguousArrayx_	// _AnySequenceBox.__copyToContiguousArray() -> ContiguousArray<A>
  #_AnySequenceBox.__copyContents!1: _TFCs15_AnySequenceBox14__copyContentsfT12initializingGSpx__GSpx_	// _AnySequenceBox.__copyContents(initializing : UnsafeMutablePointer<A>) -> UnsafeMutablePointer<A>
  #_AnySequenceBox._dropFirst!1: _TFCs15_AnySequenceBox10_dropFirstfSiGS_x_	// _AnySequenceBox._dropFirst(Int) -> _AnySequenceBox<A>
  #_AnySequenceBox._dropLast!1: _TFCs15_AnySequenceBox9_dropLastfSiGS_x_	// _AnySequenceBox._dropLast(Int) -> _AnySequenceBox<A>
  #_AnySequenceBox._prefix!1: _TFCs15_AnySequenceBox7_prefixfSiGS_x_	// _AnySequenceBox._prefix(Int) -> _AnySequenceBox<A>
  #_AnySequenceBox._suffix!1: _TFCs15_AnySequenceBox7_suffixfSiGS_x_	// _AnySequenceBox._suffix(Int) -> _AnySequenceBox<A>
  #_AnySequenceBox._split!1: _TFCs15_AnySequenceBox6_splitfzT9maxSplitsSi25omittingEmptySubsequencesSb14whereSeparatorFzxSb_GSaGVs11AnySequencex__	// _AnySequenceBox._split(maxSplits : Int, omittingEmptySubsequences : Bool, whereSeparator : (A) throws -> Bool) throws -> [AnySequence<A>]
  #_AnySequenceBox.init!initializer.1: _TFCs15_AnySequenceBoxcfT_GS_x_	// _AnySequenceBox.init() -> _AnySequenceBox<A>
  #_AnySequenceBox.deinit!deallocator: _TFCs15_AnySequenceBoxD	// _AnySequenceBox.__deallocating_deinit
}

sil_vtable _ContiguousArrayStorage1 {
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// _ContiguousArrayStorageBase.withUnsafeBufferOfObjects<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A
  #_ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer!1: _TFCs24_ContiguousArrayStorage132_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_	// _ContiguousArrayStorage1._withVerbatimBridgedUnsafeBuffer<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A?
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedCount!1: _TFCs27_ContiguousArrayStorageBase27_getNonVerbatimBridgedCountfT_Si	// _ContiguousArrayStorageBase._getNonVerbatimBridgedCount() -> Int
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer!1: _TFCs27_ContiguousArrayStorageBase32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__	// _ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer() -> _HeapBuffer<Int, AnyObject>
  #_ContiguousArrayStorageBase.staticElementType!getter.1: _TFCs27_ContiguousArrayStorageBaseg17staticElementTypePMP_	// _ContiguousArrayStorageBase.staticElementType.getter
  #_ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl!1: _TFCs24_ContiguousArrayStorage136_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_	// _ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl((UnsafeBufferPointer<AnyObject>) throws -> ()) throws -> ()
  #_ContiguousArrayStorage1.deinit!deallocator: _TFCs24_ContiguousArrayStorage1D	// _ContiguousArrayStorage1.__deallocating_deinit
}

sil_vtable _ContiguousArrayStorageBase {
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// _ContiguousArrayStorageBase.withUnsafeBufferOfObjects<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A
  #_ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer!1: _TFCs27_ContiguousArrayStorageBase32_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_	// _ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A?
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedCount!1: _TFCs27_ContiguousArrayStorageBase27_getNonVerbatimBridgedCountfT_Si	// _ContiguousArrayStorageBase._getNonVerbatimBridgedCount() -> Int
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer!1: _TFCs27_ContiguousArrayStorageBase32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__	// _ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer() -> _HeapBuffer<Int, AnyObject>
  #_ContiguousArrayStorageBase.staticElementType!getter.1: _TFCs27_ContiguousArrayStorageBaseg17staticElementTypePMP_	// _ContiguousArrayStorageBase.staticElementType.getter
  #_ContiguousArrayStorageBase.deinit!deallocator: _TFCs27_ContiguousArrayStorageBaseD	// _ContiguousArrayStorageBase.__deallocating_deinit
}

sil_vtable _SwiftNativeNSArrayWithContiguousStorage {
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs40_SwiftNativeNSArrayWithContiguousStorage25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// _SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects<A> ((UnsafeBufferPointer<AnyObject>) throws -> A) throws -> A
  #_SwiftNativeNSArrayWithContiguousStorage.deinit!deallocator: _TFCs40_SwiftNativeNSArrayWithContiguousStorageD	// _SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
}

sil_vtable _SwiftNativeNSArray {
  #_SwiftNativeNSArray.deinit!deallocator: _TFCs19_SwiftNativeNSArrayD	// _SwiftNativeNSArray.__deallocating_deinit
}

sil_vtable _AnyIteratorBoxBase {
  #_AnyIteratorBoxBase.next!1: _TFCs19_AnyIteratorBoxBase4nextfT_GSqx_	// _AnyIteratorBoxBase.next() -> A?
  #_AnyIteratorBoxBase.init!initializer.1: _TFCs19_AnyIteratorBoxBasecfT_GS_x_	// _AnyIteratorBoxBase.init() -> _AnyIteratorBoxBase<A>
  #_AnyIteratorBoxBase.deinit!deallocator: _TFCs19_AnyIteratorBoxBaseD	// _AnyIteratorBoxBase.__deallocating_deinit
}

sil_witness_table MyError: Equatable module throw {
  method #Equatable."=="!1: @_TTWO5throw7MyErrors9EquatableS_ZFS1_oi2eefTxx_Sb	// protocol witness for static Equatable.== infix(A, A) -> Bool in conformance MyError
}

sil_witness_table MyError: Hashable module throw {
  base_protocol _Hashable: MyError: _Hashable module throw
  base_protocol Equatable: MyError: Equatable module throw
  method #Hashable.hashValue!getter.1: @_TTWO5throw7MyErrors8HashableS_FS1_g9hashValueSi	// protocol witness for Hashable.hashValue.getter in conformance MyError
}

sil_witness_table MyError: Error module throw {
  method #Error._domain!getter.1: @_TTWO5throw7MyErrors5ErrorS_FS1_g7_domainSS	// protocol witness for Error._domain.getter in conformance MyError
  method #Error._code!getter.1: @_TTWO5throw7MyErrors5ErrorS_FS1_g5_codeSi	// protocol witness for Error._code.getter in conformance MyError
  method #Error._userInfo!getter.1: @_TTWO5throw7MyErrors5ErrorS_FS1_g9_userInfoGSqP__	// protocol witness for Error._userInfo.getter in conformance MyError
  method #Error._getEmbeddedNSError!1: @_TTWO5throw7MyErrors5ErrorS_FS1_19_getEmbeddedNSErrorfT_GSqPs9AnyObject__	// protocol witness for Error._getEmbeddedNSError() -> AnyObject? in conformance MyError
}

sil_witness_table MyError: _Hashable module throw {
  method #_Hashable._toAnyHashable!1: @_TTWO5throw7MyErrors9_HashableS_FS1_14_toAnyHashablefT_Vs11AnyHashable	// protocol witness for _Hashable._toAnyHashable() -> AnyHashable in conformance MyError
}

sil_witness_table <Value, Element> _HeapBufferStorage<Value, Element>: AnyObject module Swift

sil_witness_table public_external [fragile] <BaseIndex where BaseIndex : Comparable> _IndexBox<BaseIndex>: _AnyIndexBox module Swift {
  method #_AnyIndexBox._typeID!getter.1: @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_g7_typeIDVs16ObjectIdentifier	// protocol witness for _AnyIndexBox._typeID.getter in conformance <A where ...> _IndexBox<A>
  method #_AnyIndexBox._unbox!1: @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_6_unboxuRd__S_rfT_GSqqd___	// protocol witness for _AnyIndexBox._unbox<A where ...> () -> A1? in conformance <A where ...> _IndexBox<A>
  method #_AnyIndexBox._isEqual!1: @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_8_isEqualfT2toPS1___Sb	// protocol witness for _AnyIndexBox._isEqual(to : _AnyIndexBox) -> Bool in conformance <A where ...> _IndexBox<A>
  method #_AnyIndexBox._isLess!1: @_TTWuRxs10ComparablerGCs9_IndexBoxx_s12_AnyIndexBoxsFS1_7_isLessfT4thanPS1___Sb	// protocol witness for _AnyIndexBox._isLess(than : _AnyIndexBox) -> Bool in conformance <A where ...> _IndexBox<A>
}

sil_witness_table _SwiftNativeNSArray: AnyObject module Swift

sil_witness_table public_external [fragile] <Base where Base : Hashable> _ConcreteHashableBox<Base>: _AnyHashableBox module Swift {
  method #_AnyHashableBox._typeID!getter.1: @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_g7_typeIDVs16ObjectIdentifier	// protocol witness for _AnyHashableBox._typeID.getter in conformance <A where ...> _ConcreteHashableBox<A>
  method #_AnyHashableBox._unbox!1: @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_6_unboxuRd__S_rfT_GSqqd___	// protocol witness for _AnyHashableBox._unbox<A where ...> () -> A1? in conformance <A where ...> _ConcreteHashableBox<A>
  method #_AnyHashableBox._isEqual!1: @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_8_isEqualfT2toPS1___Sb	// protocol witness for _AnyHashableBox._isEqual(to : _AnyHashableBox) -> Bool in conformance <A where ...> _ConcreteHashableBox<A>
  method #_AnyHashableBox._hashValue!getter.1: @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_g10_hashValueSi	// protocol witness for _AnyHashableBox._hashValue.getter in conformance <A where ...> _ConcreteHashableBox<A>
  method #_AnyHashableBox._base!getter.1: @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_g5_baseP_	// protocol witness for _AnyHashableBox._base.getter in conformance <A where ...> _ConcreteHashableBox<A>
  method #_AnyHashableBox._downCastConditional!1: @_TTWuRxs8HashablerGVs20_ConcreteHashableBoxx_s15_AnyHashableBoxsFS1_20_downCastConditionalurfT4intoGSpqd____Sb	// protocol witness for _AnyHashableBox._downCastConditional<A> (into : UnsafeMutablePointer<A1>) -> Bool in conformance <A where ...> _ConcreteHashableBox<A>
}

sil_witness_table public_external [fragile] String: TextOutputStream module Swift {
  method #TextOutputStream._lock!1: @_TTWSSs16TextOutputStreamsFS_5_lockfT_T_	// protocol witness for TextOutputStream._lock() -> () in conformance String
  method #TextOutputStream._unlock!1: @_TTWSSs16TextOutputStreamsFS_7_unlockfT_T_	// protocol witness for TextOutputStream._unlock() -> () in conformance String
  method #TextOutputStream.write!1: @_TTWSSs16TextOutputStreamsFS_5writefSST_	// protocol witness for TextOutputStream.write(String) -> () in conformance String
}



